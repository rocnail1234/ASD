generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider       = "zod-prisma-types"
  output         = "../src/db/zod" 
  createInputTypes                 = false // default is true
  addInputTypeValidation           = false // default is true
  addIncludeType                   = false // default is true
  addSelectType                    = false 
}


model Community {
  id              String       @id @default(uuid())
  title           String
  address         String
  initSerialNumber Int         @default(0)  

  Residence       Residence[]
  Provider        Provider[]
  User            User[]
  Account         Account[]
  ResidenceType   ResidenceType[]
  ParkingSlot     ParkingSlot[]
}


model User {
  id              String       @id @default(uuid())
  userName        String
  email           String       @unique
  password        String?
  identification  String
  firstName       String
  lastName        String
  phone           String
  isVerified      Boolean?     @default(false)
  isActive        Boolean?     @default(false)
  community_id    String       @default("1")
  role_id         Int
  residence_id    String?
  createdAt       DateTime         @default(now())

  Community       Community     @relation(fields: [community_id], references: [id])
  Role            Role?        @relation(fields: [role_id], references: [id])
  PaymentsCreated Payment[]    @relation("createdBy")
  Residence       Residence[]
  ResidentIn      Residence?   @relation("resident",fields: [residence_id],references: [id])
  ParkingSlot     ParkingSlot[]
  Vehicle         Vehicle[]
}


model Residence {
  id              String       @id @default(uuid())
  title           String
  owner_id        String?      
  community_id     String       
  contacts        Json?
  residenceType_id Int
  createdAt       DateTime         @default(now())   

  Owner           User?       @relation(fields: [owner_id], references: [id])
  Community       Community     @relation(fields: [community_id], references: [id])
  ResidenceType   ResidenceType @relation(fields: [residenceType_id], references: [id])
  Expense         Expense[]
  Resident        User[]     @relation("resident")
}

model ParkingSlot {
  id           String     @id @default(uuid())
  number       Int
  user_id      String?
  community_id String   
  createdAt       DateTime         @default(now())     

  User    User?  @relation(fields: [user_id], references: [id])
  Community Community  @relation(fields: [community_id],references:[id])
}



model ResidenceType {
  id           Int           @id @default(autoincrement())
  title        String
  description  String
  community_id String
  createdAt    DateTime         @default(now())   

  Residence    Residence[]
  Community    Community     @relation(fields:[community_id],references:[id])
}

model Vehicle {
  id        Int           @id @default(autoincrement())
  plate     String
  model     String
  color     String
  user_id   String
  createdAt       DateTime         @default(now())   

  User      User         @relation(fields:[user_id],references:[id])
}

model Provider {
  id           String       @id @default(uuid())
  title        String
  contactName  String
  description  String
  phone        String
  email        String?
  address      String?
  website      String?
  active       Boolean
  community_id  String
  createdAt       DateTime         @default(now())          

  Community     Community     @relation(fields: [community_id], references: [id])
  Cashout      Cashout[]
}



model Role {
  id           Int           @id @default(autoincrement())
  title        String
  description  String
  modules      String
  createdAt       DateTime         @default(now())  
  User         User[]
}

model Expense {
  id               String       @id @default(uuid())
  title            String
  residence_id     String 
  createdAt        DateTime     @default(now())
  emitingDate      DateTime?    @db.Date
  dayPayment       DateTime?    @db.Date
  value            Decimal      @db.Decimal(8, 2)
  owedValue        Decimal      @db.Decimal(8, 2)
  payment_id       String?
  isRecurrent      Boolean

  Residence        Residence   @relation(fields: [residence_id], references: [id])
  Payment          Payment?     @relation(fields: [payment_id], references: [id])
}

enum StatusPayment {
  Pending
  Paid
}

model Payment {
  id              String      @id @default(uuid())
  title           String
  description     String
  registerDate    DateTime    @db.Date
  amount          Decimal     @db.Decimal(8, 2)
  whoPay          String?        
  voucherImage    String?
  isEmailSend     Boolean
  account_id      String      
  created_by      String      
  status          StatusPayment
  serial          Int? 
  paymentMethod   String      @default("Efectivo")
  createdAt       DateTime         @default(now())    

 
  Expense         Expense[]
  Account         Account     @relation(fields: [account_id], references: [id])
  Admin            User        @relation("createdBy", fields: [created_by], references: [id])
}

model Cashout {
  id              String      @id @default(uuid())
  title           String
  description     String
  provider_id     String?      
  amount          Decimal     @db.Decimal(8, 2)
  billImage       String
  account_id      String   
  toAccount_id    String?
  status          StatusPayment
  registerDate    DateTime    @db.Date
  createdAt       DateTime         @default(now())  

  Provider        Provider?    @relation(fields: [provider_id], references: [id])
  Account         Account     @relation(fields: [account_id], references: [id])
  ToAccount       Account?     @relation(fields:[toAccount_id],references: [id],name: "ToAccountRelation")
}



model Account {
  id              String       @id @default(uuid())
  title           String  
  description     String
  active          Boolean
  community_id    String       
  balance         Decimal
  image           String?
  Responsable     String?
  accountNumber   String?
  bank            String?
  createdAt       DateTime         @default(now())  

  Community       Community     @relation(fields: [community_id], references: [id])
  Payment         Payment[]
  Cashout         Cashout[]
  ToAccount       Cashout[]     @relation(name:"ToAccountRelation")
}
