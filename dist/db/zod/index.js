"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResidenceCountOutputTypeArgsSchema = exports.ResidenceArgsSchema = exports.ResidenceIncludeSchema = exports.UserSelectSchema = exports.UserCountOutputTypeSelectSchema = exports.UserCountOutputTypeArgsSchema = exports.UserArgsSchema = exports.UserIncludeSchema = exports.CommunitySelectSchema = exports.CommunityCountOutputTypeSelectSchema = exports.CommunityCountOutputTypeArgsSchema = exports.CommunityArgsSchema = exports.CommunityIncludeSchema = exports.AccountSchema = exports.ExpenseTypeSchema = exports.CashoutSchema = exports.PaymentSchema = exports.ExpenseSchema = exports.RoleSchema = exports.ProviderSchema = exports.ResidenceTypeSchema = exports.ParkingSlotSchema = exports.ResidenceSchema = exports.UserSchema = exports.CommunitySchema = exports.JsonNullValueFilterSchema = exports.NullsOrderSchema = exports.QueryModeSchema = exports.NullableJsonNullValueInputSchema = exports.SortOrderSchema = exports.AccountScalarFieldEnumSchema = exports.ExpenseTypeScalarFieldEnumSchema = exports.CashoutScalarFieldEnumSchema = exports.PaymentScalarFieldEnumSchema = exports.ExpenseScalarFieldEnumSchema = exports.RoleScalarFieldEnumSchema = exports.ProviderScalarFieldEnumSchema = exports.ResidenceTypeScalarFieldEnumSchema = exports.ParkingSlotScalarFieldEnumSchema = exports.ResidenceScalarFieldEnumSchema = exports.UserScalarFieldEnumSchema = exports.CommunityScalarFieldEnumSchema = exports.TransactionIsolationLevelSchema = exports.isValidDecimalInput = exports.DECIMAL_STRING_REGEX = exports.DecimalJsLikeSchema = exports.InputJsonValueSchema = exports.NullableJsonValue = exports.JsonValueSchema = exports.transformJsonNull = void 0;
exports.UserOrderByWithAggregationInputSchema = exports.UserWhereUniqueInputSchema = exports.UserOrderByWithRelationInputSchema = exports.UserWhereInputSchema = exports.CommunityScalarWhereWithAggregatesInputSchema = exports.CommunityOrderByWithAggregationInputSchema = exports.CommunityWhereUniqueInputSchema = exports.CommunityOrderByWithRelationInputSchema = exports.CommunityWhereInputSchema = exports.AccountSelectSchema = exports.AccountCountOutputTypeSelectSchema = exports.AccountCountOutputTypeArgsSchema = exports.AccountArgsSchema = exports.AccountIncludeSchema = exports.ExpenseTypeSelectSchema = exports.ExpenseTypeCountOutputTypeSelectSchema = exports.ExpenseTypeCountOutputTypeArgsSchema = exports.ExpenseTypeArgsSchema = exports.ExpenseTypeIncludeSchema = exports.CashoutSelectSchema = exports.CashoutArgsSchema = exports.CashoutIncludeSchema = exports.PaymentSelectSchema = exports.PaymentCountOutputTypeSelectSchema = exports.PaymentCountOutputTypeArgsSchema = exports.PaymentArgsSchema = exports.PaymentIncludeSchema = exports.ExpenseSelectSchema = exports.ExpenseArgsSchema = exports.ExpenseIncludeSchema = exports.RoleSelectSchema = exports.RoleCountOutputTypeSelectSchema = exports.RoleCountOutputTypeArgsSchema = exports.RoleArgsSchema = exports.RoleIncludeSchema = exports.ProviderSelectSchema = exports.ProviderCountOutputTypeSelectSchema = exports.ProviderCountOutputTypeArgsSchema = exports.ProviderArgsSchema = exports.ProviderIncludeSchema = exports.ResidenceTypeSelectSchema = exports.ResidenceTypeCountOutputTypeSelectSchema = exports.ResidenceTypeCountOutputTypeArgsSchema = exports.ResidenceTypeArgsSchema = exports.ResidenceTypeIncludeSchema = exports.ParkingSlotSelectSchema = exports.ParkingSlotArgsSchema = exports.ParkingSlotIncludeSchema = exports.ResidenceSelectSchema = exports.ResidenceCountOutputTypeSelectSchema = void 0;
exports.AccountOrderByWithAggregationInputSchema = exports.AccountWhereUniqueInputSchema = exports.AccountOrderByWithRelationInputSchema = exports.AccountWhereInputSchema = exports.ExpenseTypeScalarWhereWithAggregatesInputSchema = exports.ExpenseTypeOrderByWithAggregationInputSchema = exports.ExpenseTypeWhereUniqueInputSchema = exports.ExpenseTypeOrderByWithRelationInputSchema = exports.ExpenseTypeWhereInputSchema = exports.CashoutScalarWhereWithAggregatesInputSchema = exports.CashoutOrderByWithAggregationInputSchema = exports.CashoutWhereUniqueInputSchema = exports.CashoutOrderByWithRelationInputSchema = exports.CashoutWhereInputSchema = exports.PaymentScalarWhereWithAggregatesInputSchema = exports.PaymentOrderByWithAggregationInputSchema = exports.PaymentWhereUniqueInputSchema = exports.PaymentOrderByWithRelationInputSchema = exports.PaymentWhereInputSchema = exports.ExpenseScalarWhereWithAggregatesInputSchema = exports.ExpenseOrderByWithAggregationInputSchema = exports.ExpenseWhereUniqueInputSchema = exports.ExpenseOrderByWithRelationInputSchema = exports.ExpenseWhereInputSchema = exports.RoleScalarWhereWithAggregatesInputSchema = exports.RoleOrderByWithAggregationInputSchema = exports.RoleWhereUniqueInputSchema = exports.RoleOrderByWithRelationInputSchema = exports.RoleWhereInputSchema = exports.ProviderScalarWhereWithAggregatesInputSchema = exports.ProviderOrderByWithAggregationInputSchema = exports.ProviderWhereUniqueInputSchema = exports.ProviderOrderByWithRelationInputSchema = exports.ProviderWhereInputSchema = exports.ResidenceTypeScalarWhereWithAggregatesInputSchema = exports.ResidenceTypeOrderByWithAggregationInputSchema = exports.ResidenceTypeWhereUniqueInputSchema = exports.ResidenceTypeOrderByWithRelationInputSchema = exports.ResidenceTypeWhereInputSchema = exports.ParkingSlotScalarWhereWithAggregatesInputSchema = exports.ParkingSlotOrderByWithAggregationInputSchema = exports.ParkingSlotWhereUniqueInputSchema = exports.ParkingSlotOrderByWithRelationInputSchema = exports.ParkingSlotWhereInputSchema = exports.ResidenceScalarWhereWithAggregatesInputSchema = exports.ResidenceOrderByWithAggregationInputSchema = exports.ResidenceWhereUniqueInputSchema = exports.ResidenceOrderByWithRelationInputSchema = exports.ResidenceWhereInputSchema = exports.UserScalarWhereWithAggregatesInputSchema = void 0;
exports.RoleUncheckedUpdateManyInputSchema = exports.RoleUpdateManyMutationInputSchema = exports.RoleCreateManyInputSchema = exports.RoleUncheckedUpdateInputSchema = exports.RoleUpdateInputSchema = exports.RoleUncheckedCreateInputSchema = exports.RoleCreateInputSchema = exports.ProviderUncheckedUpdateManyInputSchema = exports.ProviderUpdateManyMutationInputSchema = exports.ProviderCreateManyInputSchema = exports.ProviderUncheckedUpdateInputSchema = exports.ProviderUpdateInputSchema = exports.ProviderUncheckedCreateInputSchema = exports.ProviderCreateInputSchema = exports.ResidenceTypeUncheckedUpdateManyInputSchema = exports.ResidenceTypeUpdateManyMutationInputSchema = exports.ResidenceTypeCreateManyInputSchema = exports.ResidenceTypeUncheckedUpdateInputSchema = exports.ResidenceTypeUpdateInputSchema = exports.ResidenceTypeUncheckedCreateInputSchema = exports.ResidenceTypeCreateInputSchema = exports.ParkingSlotUncheckedUpdateManyInputSchema = exports.ParkingSlotUpdateManyMutationInputSchema = exports.ParkingSlotCreateManyInputSchema = exports.ParkingSlotUncheckedUpdateInputSchema = exports.ParkingSlotUpdateInputSchema = exports.ParkingSlotUncheckedCreateInputSchema = exports.ParkingSlotCreateInputSchema = exports.ResidenceUncheckedUpdateManyInputSchema = exports.ResidenceUpdateManyMutationInputSchema = exports.ResidenceCreateManyInputSchema = exports.ResidenceUncheckedUpdateInputSchema = exports.ResidenceUpdateInputSchema = exports.ResidenceUncheckedCreateInputSchema = exports.ResidenceCreateInputSchema = exports.UserUncheckedUpdateManyInputSchema = exports.UserUpdateManyMutationInputSchema = exports.UserCreateManyInputSchema = exports.UserUncheckedUpdateInputSchema = exports.UserUpdateInputSchema = exports.UserUncheckedCreateInputSchema = exports.UserCreateInputSchema = exports.CommunityUncheckedUpdateManyInputSchema = exports.CommunityUpdateManyMutationInputSchema = exports.CommunityCreateManyInputSchema = exports.CommunityUncheckedUpdateInputSchema = exports.CommunityUpdateInputSchema = exports.CommunityUncheckedCreateInputSchema = exports.CommunityCreateInputSchema = exports.AccountScalarWhereWithAggregatesInputSchema = void 0;
exports.StringWithAggregatesFilterSchema = exports.CommunityMinOrderByAggregateInputSchema = exports.CommunityMaxOrderByAggregateInputSchema = exports.CommunityCountOrderByAggregateInputSchema = exports.ResidenceTypeOrderByRelationAggregateInputSchema = exports.AccountOrderByRelationAggregateInputSchema = exports.UserOrderByRelationAggregateInputSchema = exports.ProviderOrderByRelationAggregateInputSchema = exports.ResidenceOrderByRelationAggregateInputSchema = exports.ResidenceTypeListRelationFilterSchema = exports.AccountListRelationFilterSchema = exports.UserListRelationFilterSchema = exports.ProviderListRelationFilterSchema = exports.ResidenceListRelationFilterSchema = exports.StringFilterSchema = exports.AccountUncheckedUpdateManyInputSchema = exports.AccountUpdateManyMutationInputSchema = exports.AccountCreateManyInputSchema = exports.AccountUncheckedUpdateInputSchema = exports.AccountUpdateInputSchema = exports.AccountUncheckedCreateInputSchema = exports.AccountCreateInputSchema = exports.ExpenseTypeUncheckedUpdateManyInputSchema = exports.ExpenseTypeUpdateManyMutationInputSchema = exports.ExpenseTypeCreateManyInputSchema = exports.ExpenseTypeUncheckedUpdateInputSchema = exports.ExpenseTypeUpdateInputSchema = exports.ExpenseTypeUncheckedCreateInputSchema = exports.ExpenseTypeCreateInputSchema = exports.CashoutUncheckedUpdateManyInputSchema = exports.CashoutUpdateManyMutationInputSchema = exports.CashoutCreateManyInputSchema = exports.CashoutUncheckedUpdateInputSchema = exports.CashoutUpdateInputSchema = exports.CashoutUncheckedCreateInputSchema = exports.CashoutCreateInputSchema = exports.PaymentUncheckedUpdateManyInputSchema = exports.PaymentUpdateManyMutationInputSchema = exports.PaymentCreateManyInputSchema = exports.PaymentUncheckedUpdateInputSchema = exports.PaymentUpdateInputSchema = exports.PaymentUncheckedCreateInputSchema = exports.PaymentCreateInputSchema = exports.ExpenseUncheckedUpdateManyInputSchema = exports.ExpenseUpdateManyMutationInputSchema = exports.ExpenseCreateManyInputSchema = exports.ExpenseUncheckedUpdateInputSchema = exports.ExpenseUpdateInputSchema = exports.ExpenseUncheckedCreateInputSchema = exports.ExpenseCreateInputSchema = void 0;
exports.BoolWithAggregatesFilterSchema = exports.ProviderMinOrderByAggregateInputSchema = exports.ProviderMaxOrderByAggregateInputSchema = exports.ProviderCountOrderByAggregateInputSchema = exports.CashoutOrderByRelationAggregateInputSchema = exports.CashoutListRelationFilterSchema = exports.BoolFilterSchema = exports.ResidenceTypeSumOrderByAggregateInputSchema = exports.ResidenceTypeMinOrderByAggregateInputSchema = exports.ResidenceTypeMaxOrderByAggregateInputSchema = exports.ResidenceTypeAvgOrderByAggregateInputSchema = exports.ResidenceTypeCountOrderByAggregateInputSchema = exports.ExpenseTypeOrderByRelationAggregateInputSchema = exports.ExpenseTypeListRelationFilterSchema = exports.ParkingSlotSumOrderByAggregateInputSchema = exports.ParkingSlotMinOrderByAggregateInputSchema = exports.ParkingSlotMaxOrderByAggregateInputSchema = exports.ParkingSlotAvgOrderByAggregateInputSchema = exports.ParkingSlotCountOrderByAggregateInputSchema = exports.ResidenceRelationFilterSchema = exports.JsonNullableWithAggregatesFilterSchema = exports.ResidenceSumOrderByAggregateInputSchema = exports.ResidenceMinOrderByAggregateInputSchema = exports.ResidenceMaxOrderByAggregateInputSchema = exports.ResidenceAvgOrderByAggregateInputSchema = exports.ResidenceCountOrderByAggregateInputSchema = exports.ExpenseOrderByRelationAggregateInputSchema = exports.ParkingSlotOrderByRelationAggregateInputSchema = exports.ExpenseListRelationFilterSchema = exports.ParkingSlotListRelationFilterSchema = exports.ResidenceTypeRelationFilterSchema = exports.UserNullableRelationFilterSchema = exports.JsonNullableFilterSchema = exports.IntWithAggregatesFilterSchema = exports.BoolNullableWithAggregatesFilterSchema = exports.StringNullableWithAggregatesFilterSchema = exports.UserSumOrderByAggregateInputSchema = exports.UserMinOrderByAggregateInputSchema = exports.UserMaxOrderByAggregateInputSchema = exports.UserAvgOrderByAggregateInputSchema = exports.UserCountOrderByAggregateInputSchema = exports.PaymentOrderByRelationAggregateInputSchema = exports.SortOrderInputSchema = exports.ResidenceNullableRelationFilterSchema = exports.PaymentListRelationFilterSchema = exports.RoleNullableRelationFilterSchema = exports.CommunityRelationFilterSchema = exports.IntFilterSchema = exports.BoolNullableFilterSchema = exports.StringNullableFilterSchema = void 0;
exports.AccountUncheckedCreateNestedManyWithoutCommunityInputSchema = exports.UserUncheckedCreateNestedManyWithoutCommunityInputSchema = exports.ProviderUncheckedCreateNestedManyWithoutCommunityInputSchema = exports.ResidenceUncheckedCreateNestedManyWithoutCommunityInputSchema = exports.ResidenceTypeCreateNestedManyWithoutCommunityInputSchema = exports.AccountCreateNestedManyWithoutCommunityInputSchema = exports.UserCreateNestedManyWithoutCommunityInputSchema = exports.ProviderCreateNestedManyWithoutCommunityInputSchema = exports.ResidenceCreateNestedManyWithoutCommunityInputSchema = exports.BigIntWithAggregatesFilterSchema = exports.AccountSumOrderByAggregateInputSchema = exports.AccountMinOrderByAggregateInputSchema = exports.AccountMaxOrderByAggregateInputSchema = exports.AccountAvgOrderByAggregateInputSchema = exports.AccountCountOrderByAggregateInputSchema = exports.BigIntFilterSchema = exports.ExpenseTypeSumOrderByAggregateInputSchema = exports.ExpenseTypeMinOrderByAggregateInputSchema = exports.ExpenseTypeMaxOrderByAggregateInputSchema = exports.ExpenseTypeAvgOrderByAggregateInputSchema = exports.ExpenseTypeCountOrderByAggregateInputSchema = exports.CashoutSumOrderByAggregateInputSchema = exports.CashoutMinOrderByAggregateInputSchema = exports.CashoutMaxOrderByAggregateInputSchema = exports.CashoutAvgOrderByAggregateInputSchema = exports.CashoutCountOrderByAggregateInputSchema = exports.ProviderRelationFilterSchema = exports.DecimalWithAggregatesFilterSchema = exports.PaymentSumOrderByAggregateInputSchema = exports.PaymentMinOrderByAggregateInputSchema = exports.PaymentMaxOrderByAggregateInputSchema = exports.PaymentAvgOrderByAggregateInputSchema = exports.PaymentCountOrderByAggregateInputSchema = exports.AccountRelationFilterSchema = exports.UserRelationFilterSchema = exports.DecimalFilterSchema = exports.DateTimeWithAggregatesFilterSchema = exports.ExpenseSumOrderByAggregateInputSchema = exports.ExpenseMinOrderByAggregateInputSchema = exports.ExpenseMaxOrderByAggregateInputSchema = exports.ExpenseAvgOrderByAggregateInputSchema = exports.ExpenseCountOrderByAggregateInputSchema = exports.PaymentRelationFilterSchema = exports.ExpenseTypeRelationFilterSchema = exports.DateTimeFilterSchema = exports.RoleSumOrderByAggregateInputSchema = exports.RoleMinOrderByAggregateInputSchema = exports.RoleMaxOrderByAggregateInputSchema = exports.RoleAvgOrderByAggregateInputSchema = exports.RoleCountOrderByAggregateInputSchema = void 0;
exports.ExpenseUncheckedUpdateManyWithoutResidenceNestedInputSchema = exports.ParkingSlotUncheckedUpdateManyWithoutResidenceNestedInputSchema = exports.UserUpdateManyWithoutResidentInNestedInputSchema = exports.ExpenseUpdateManyWithoutResidenceNestedInputSchema = exports.ParkingSlotUpdateManyWithoutResidenceNestedInputSchema = exports.ResidenceTypeUpdateOneRequiredWithoutResidenceNestedInputSchema = exports.CommunityUpdateOneRequiredWithoutResidenceNestedInputSchema = exports.UserUpdateOneWithoutResidenceNestedInputSchema = exports.UserUncheckedCreateNestedManyWithoutResidentInInputSchema = exports.ExpenseUncheckedCreateNestedManyWithoutResidenceInputSchema = exports.ParkingSlotUncheckedCreateNestedManyWithoutResidenceInputSchema = exports.UserCreateNestedManyWithoutResidentInInputSchema = exports.ExpenseCreateNestedManyWithoutResidenceInputSchema = exports.ParkingSlotCreateNestedManyWithoutResidenceInputSchema = exports.ResidenceTypeCreateNestedOneWithoutResidenceInputSchema = exports.CommunityCreateNestedOneWithoutResidenceInputSchema = exports.UserCreateNestedOneWithoutResidenceInputSchema = exports.ResidenceUncheckedUpdateManyWithoutOwnerNestedInputSchema = exports.PaymentUncheckedUpdateManyWithoutUserNestedInputSchema = exports.PaymentUncheckedUpdateManyWithoutAdminNestedInputSchema = exports.IntFieldUpdateOperationsInputSchema = exports.ResidenceUpdateOneWithoutResidentNestedInputSchema = exports.ResidenceUpdateManyWithoutOwnerNestedInputSchema = exports.PaymentUpdateManyWithoutUserNestedInputSchema = exports.PaymentUpdateManyWithoutAdminNestedInputSchema = exports.RoleUpdateOneWithoutUserNestedInputSchema = exports.CommunityUpdateOneRequiredWithoutUserNestedInputSchema = exports.NullableBoolFieldUpdateOperationsInputSchema = exports.NullableStringFieldUpdateOperationsInputSchema = exports.ResidenceUncheckedCreateNestedManyWithoutOwnerInputSchema = exports.PaymentUncheckedCreateNestedManyWithoutUserInputSchema = exports.PaymentUncheckedCreateNestedManyWithoutAdminInputSchema = exports.ResidenceCreateNestedOneWithoutResidentInputSchema = exports.ResidenceCreateNestedManyWithoutOwnerInputSchema = exports.PaymentCreateNestedManyWithoutUserInputSchema = exports.PaymentCreateNestedManyWithoutAdminInputSchema = exports.RoleCreateNestedOneWithoutUserInputSchema = exports.CommunityCreateNestedOneWithoutUserInputSchema = exports.ResidenceTypeUncheckedUpdateManyWithoutCommunityNestedInputSchema = exports.AccountUncheckedUpdateManyWithoutCommunityNestedInputSchema = exports.UserUncheckedUpdateManyWithoutCommunityNestedInputSchema = exports.ProviderUncheckedUpdateManyWithoutCommunityNestedInputSchema = exports.ResidenceUncheckedUpdateManyWithoutCommunityNestedInputSchema = exports.ResidenceTypeUpdateManyWithoutCommunityNestedInputSchema = exports.AccountUpdateManyWithoutCommunityNestedInputSchema = exports.UserUpdateManyWithoutCommunityNestedInputSchema = exports.ProviderUpdateManyWithoutCommunityNestedInputSchema = exports.ResidenceUpdateManyWithoutCommunityNestedInputSchema = exports.StringFieldUpdateOperationsInputSchema = exports.ResidenceTypeUncheckedCreateNestedManyWithoutCommunityInputSchema = void 0;
exports.ResidenceTypeUpdateOneRequiredWithoutExpenseTypeNestedInputSchema = exports.ExpenseUncheckedCreateNestedManyWithoutExpenseTypeInputSchema = exports.ExpenseCreateNestedManyWithoutExpenseTypeInputSchema = exports.ResidenceTypeCreateNestedOneWithoutExpenseTypeInputSchema = exports.AccountUpdateOneRequiredWithoutCashoutNestedInputSchema = exports.ProviderUpdateOneRequiredWithoutCashoutNestedInputSchema = exports.AccountCreateNestedOneWithoutCashoutInputSchema = exports.ProviderCreateNestedOneWithoutCashoutInputSchema = exports.ExpenseUncheckedUpdateManyWithoutPaymentNestedInputSchema = exports.UserUpdateOneRequiredWithoutPaymentsCreatedNestedInputSchema = exports.AccountUpdateOneRequiredWithoutPaymentNestedInputSchema = exports.UserUpdateOneRequiredWithoutPaymentsMadeNestedInputSchema = exports.ExpenseUpdateManyWithoutPaymentNestedInputSchema = exports.DecimalFieldUpdateOperationsInputSchema = exports.ExpenseUncheckedCreateNestedManyWithoutPaymentInputSchema = exports.UserCreateNestedOneWithoutPaymentsCreatedInputSchema = exports.AccountCreateNestedOneWithoutPaymentInputSchema = exports.UserCreateNestedOneWithoutPaymentsMadeInputSchema = exports.ExpenseCreateNestedManyWithoutPaymentInputSchema = exports.PaymentUpdateOneRequiredWithoutExpenseNestedInputSchema = exports.ExpenseTypeUpdateOneRequiredWithoutExpenseNestedInputSchema = exports.ResidenceUpdateOneRequiredWithoutExpenseNestedInputSchema = exports.DateTimeFieldUpdateOperationsInputSchema = exports.PaymentCreateNestedOneWithoutExpenseInputSchema = exports.ExpenseTypeCreateNestedOneWithoutExpenseInputSchema = exports.ResidenceCreateNestedOneWithoutExpenseInputSchema = exports.UserUncheckedUpdateManyWithoutRoleNestedInputSchema = exports.UserUpdateManyWithoutRoleNestedInputSchema = exports.UserUncheckedCreateNestedManyWithoutRoleInputSchema = exports.UserCreateNestedManyWithoutRoleInputSchema = exports.CashoutUncheckedUpdateManyWithoutProviderNestedInputSchema = exports.CashoutUpdateManyWithoutProviderNestedInputSchema = exports.CommunityUpdateOneRequiredWithoutProviderNestedInputSchema = exports.BoolFieldUpdateOperationsInputSchema = exports.CashoutUncheckedCreateNestedManyWithoutProviderInputSchema = exports.CashoutCreateNestedManyWithoutProviderInputSchema = exports.CommunityCreateNestedOneWithoutProviderInputSchema = exports.ExpenseTypeUncheckedUpdateManyWithoutResidenceTypeNestedInputSchema = exports.ResidenceUncheckedUpdateManyWithoutResidenceTypeNestedInputSchema = exports.CommunityUpdateOneRequiredWithoutResidenceTypeNestedInputSchema = exports.ExpenseTypeUpdateManyWithoutResidenceTypeNestedInputSchema = exports.ResidenceUpdateManyWithoutResidenceTypeNestedInputSchema = exports.ExpenseTypeUncheckedCreateNestedManyWithoutResidenceTypeInputSchema = exports.ResidenceUncheckedCreateNestedManyWithoutResidenceTypeInputSchema = exports.CommunityCreateNestedOneWithoutResidenceTypeInputSchema = exports.ExpenseTypeCreateNestedManyWithoutResidenceTypeInputSchema = exports.ResidenceCreateNestedManyWithoutResidenceTypeInputSchema = exports.ResidenceUpdateOneRequiredWithoutParkingSlotNestedInputSchema = exports.ResidenceCreateNestedOneWithoutParkingSlotInputSchema = exports.UserUncheckedUpdateManyWithoutResidentInNestedInputSchema = void 0;
exports.ResidenceTypeUncheckedCreateWithoutCommunityInputSchema = exports.ResidenceTypeCreateWithoutCommunityInputSchema = exports.AccountCreateManyCommunityInputEnvelopeSchema = exports.AccountCreateOrConnectWithoutCommunityInputSchema = exports.AccountUncheckedCreateWithoutCommunityInputSchema = exports.AccountCreateWithoutCommunityInputSchema = exports.UserCreateManyCommunityInputEnvelopeSchema = exports.UserCreateOrConnectWithoutCommunityInputSchema = exports.UserUncheckedCreateWithoutCommunityInputSchema = exports.UserCreateWithoutCommunityInputSchema = exports.ProviderCreateManyCommunityInputEnvelopeSchema = exports.ProviderCreateOrConnectWithoutCommunityInputSchema = exports.ProviderUncheckedCreateWithoutCommunityInputSchema = exports.ProviderCreateWithoutCommunityInputSchema = exports.ResidenceCreateManyCommunityInputEnvelopeSchema = exports.ResidenceCreateOrConnectWithoutCommunityInputSchema = exports.ResidenceUncheckedCreateWithoutCommunityInputSchema = exports.ResidenceCreateWithoutCommunityInputSchema = exports.NestedBigIntWithAggregatesFilterSchema = exports.NestedBigIntFilterSchema = exports.NestedDecimalWithAggregatesFilterSchema = exports.NestedDecimalFilterSchema = exports.NestedDateTimeWithAggregatesFilterSchema = exports.NestedDateTimeFilterSchema = exports.NestedBoolWithAggregatesFilterSchema = exports.NestedBoolFilterSchema = exports.NestedJsonNullableFilterSchema = exports.NestedFloatFilterSchema = exports.NestedIntWithAggregatesFilterSchema = exports.NestedBoolNullableWithAggregatesFilterSchema = exports.NestedIntNullableFilterSchema = exports.NestedStringNullableWithAggregatesFilterSchema = exports.NestedBoolNullableFilterSchema = exports.NestedStringNullableFilterSchema = exports.NestedIntFilterSchema = exports.NestedStringWithAggregatesFilterSchema = exports.NestedStringFilterSchema = exports.CashoutUncheckedUpdateManyWithoutAccountNestedInputSchema = exports.PaymentUncheckedUpdateManyWithoutAccountNestedInputSchema = exports.CashoutUpdateManyWithoutAccountNestedInputSchema = exports.PaymentUpdateManyWithoutAccountNestedInputSchema = exports.CommunityUpdateOneRequiredWithoutAccountNestedInputSchema = exports.BigIntFieldUpdateOperationsInputSchema = exports.CashoutUncheckedCreateNestedManyWithoutAccountInputSchema = exports.PaymentUncheckedCreateNestedManyWithoutAccountInputSchema = exports.CashoutCreateNestedManyWithoutAccountInputSchema = exports.PaymentCreateNestedManyWithoutAccountInputSchema = exports.CommunityCreateNestedOneWithoutAccountInputSchema = exports.ExpenseUncheckedUpdateManyWithoutExpenseTypeNestedInputSchema = exports.ExpenseUpdateManyWithoutExpenseTypeNestedInputSchema = void 0;
exports.RoleUpdateWithoutUserInputSchema = exports.RoleUpdateToOneWithWhereWithoutUserInputSchema = exports.RoleUpsertWithoutUserInputSchema = exports.CommunityUncheckedUpdateWithoutUserInputSchema = exports.CommunityUpdateWithoutUserInputSchema = exports.CommunityUpdateToOneWithWhereWithoutUserInputSchema = exports.CommunityUpsertWithoutUserInputSchema = exports.ResidenceCreateOrConnectWithoutResidentInputSchema = exports.ResidenceUncheckedCreateWithoutResidentInputSchema = exports.ResidenceCreateWithoutResidentInputSchema = exports.ResidenceCreateManyOwnerInputEnvelopeSchema = exports.ResidenceCreateOrConnectWithoutOwnerInputSchema = exports.ResidenceUncheckedCreateWithoutOwnerInputSchema = exports.ResidenceCreateWithoutOwnerInputSchema = exports.PaymentCreateManyUserInputEnvelopeSchema = exports.PaymentCreateOrConnectWithoutUserInputSchema = exports.PaymentUncheckedCreateWithoutUserInputSchema = exports.PaymentCreateWithoutUserInputSchema = exports.PaymentCreateManyAdminInputEnvelopeSchema = exports.PaymentCreateOrConnectWithoutAdminInputSchema = exports.PaymentUncheckedCreateWithoutAdminInputSchema = exports.PaymentCreateWithoutAdminInputSchema = exports.RoleCreateOrConnectWithoutUserInputSchema = exports.RoleUncheckedCreateWithoutUserInputSchema = exports.RoleCreateWithoutUserInputSchema = exports.CommunityCreateOrConnectWithoutUserInputSchema = exports.CommunityUncheckedCreateWithoutUserInputSchema = exports.CommunityCreateWithoutUserInputSchema = exports.ResidenceTypeScalarWhereInputSchema = exports.ResidenceTypeUpdateManyWithWhereWithoutCommunityInputSchema = exports.ResidenceTypeUpdateWithWhereUniqueWithoutCommunityInputSchema = exports.ResidenceTypeUpsertWithWhereUniqueWithoutCommunityInputSchema = exports.AccountScalarWhereInputSchema = exports.AccountUpdateManyWithWhereWithoutCommunityInputSchema = exports.AccountUpdateWithWhereUniqueWithoutCommunityInputSchema = exports.AccountUpsertWithWhereUniqueWithoutCommunityInputSchema = exports.UserScalarWhereInputSchema = exports.UserUpdateManyWithWhereWithoutCommunityInputSchema = exports.UserUpdateWithWhereUniqueWithoutCommunityInputSchema = exports.UserUpsertWithWhereUniqueWithoutCommunityInputSchema = exports.ProviderScalarWhereInputSchema = exports.ProviderUpdateManyWithWhereWithoutCommunityInputSchema = exports.ProviderUpdateWithWhereUniqueWithoutCommunityInputSchema = exports.ProviderUpsertWithWhereUniqueWithoutCommunityInputSchema = exports.ResidenceScalarWhereInputSchema = exports.ResidenceUpdateManyWithWhereWithoutCommunityInputSchema = exports.ResidenceUpdateWithWhereUniqueWithoutCommunityInputSchema = exports.ResidenceUpsertWithWhereUniqueWithoutCommunityInputSchema = exports.ResidenceTypeCreateManyCommunityInputEnvelopeSchema = exports.ResidenceTypeCreateOrConnectWithoutCommunityInputSchema = void 0;
exports.ParkingSlotUpdateWithWhereUniqueWithoutResidenceInputSchema = exports.ParkingSlotUpsertWithWhereUniqueWithoutResidenceInputSchema = exports.ResidenceTypeUncheckedUpdateWithoutResidenceInputSchema = exports.ResidenceTypeUpdateWithoutResidenceInputSchema = exports.ResidenceTypeUpdateToOneWithWhereWithoutResidenceInputSchema = exports.ResidenceTypeUpsertWithoutResidenceInputSchema = exports.CommunityUncheckedUpdateWithoutResidenceInputSchema = exports.CommunityUpdateWithoutResidenceInputSchema = exports.CommunityUpdateToOneWithWhereWithoutResidenceInputSchema = exports.CommunityUpsertWithoutResidenceInputSchema = exports.UserUncheckedUpdateWithoutResidenceInputSchema = exports.UserUpdateWithoutResidenceInputSchema = exports.UserUpdateToOneWithWhereWithoutResidenceInputSchema = exports.UserUpsertWithoutResidenceInputSchema = exports.UserCreateManyResidentInInputEnvelopeSchema = exports.UserCreateOrConnectWithoutResidentInInputSchema = exports.UserUncheckedCreateWithoutResidentInInputSchema = exports.UserCreateWithoutResidentInInputSchema = exports.ExpenseCreateManyResidenceInputEnvelopeSchema = exports.ExpenseCreateOrConnectWithoutResidenceInputSchema = exports.ExpenseUncheckedCreateWithoutResidenceInputSchema = exports.ExpenseCreateWithoutResidenceInputSchema = exports.ParkingSlotCreateManyResidenceInputEnvelopeSchema = exports.ParkingSlotCreateOrConnectWithoutResidenceInputSchema = exports.ParkingSlotUncheckedCreateWithoutResidenceInputSchema = exports.ParkingSlotCreateWithoutResidenceInputSchema = exports.ResidenceTypeCreateOrConnectWithoutResidenceInputSchema = exports.ResidenceTypeUncheckedCreateWithoutResidenceInputSchema = exports.ResidenceTypeCreateWithoutResidenceInputSchema = exports.CommunityCreateOrConnectWithoutResidenceInputSchema = exports.CommunityUncheckedCreateWithoutResidenceInputSchema = exports.CommunityCreateWithoutResidenceInputSchema = exports.UserCreateOrConnectWithoutResidenceInputSchema = exports.UserUncheckedCreateWithoutResidenceInputSchema = exports.UserCreateWithoutResidenceInputSchema = exports.ResidenceUncheckedUpdateWithoutResidentInputSchema = exports.ResidenceUpdateWithoutResidentInputSchema = exports.ResidenceUpdateToOneWithWhereWithoutResidentInputSchema = exports.ResidenceUpsertWithoutResidentInputSchema = exports.ResidenceUpdateManyWithWhereWithoutOwnerInputSchema = exports.ResidenceUpdateWithWhereUniqueWithoutOwnerInputSchema = exports.ResidenceUpsertWithWhereUniqueWithoutOwnerInputSchema = exports.PaymentUpdateManyWithWhereWithoutUserInputSchema = exports.PaymentUpdateWithWhereUniqueWithoutUserInputSchema = exports.PaymentUpsertWithWhereUniqueWithoutUserInputSchema = exports.PaymentScalarWhereInputSchema = exports.PaymentUpdateManyWithWhereWithoutAdminInputSchema = exports.PaymentUpdateWithWhereUniqueWithoutAdminInputSchema = exports.PaymentUpsertWithWhereUniqueWithoutAdminInputSchema = exports.RoleUncheckedUpdateWithoutUserInputSchema = void 0;
exports.CashoutUpsertWithWhereUniqueWithoutProviderInputSchema = exports.CommunityUncheckedUpdateWithoutProviderInputSchema = exports.CommunityUpdateWithoutProviderInputSchema = exports.CommunityUpdateToOneWithWhereWithoutProviderInputSchema = exports.CommunityUpsertWithoutProviderInputSchema = exports.CashoutCreateManyProviderInputEnvelopeSchema = exports.CashoutCreateOrConnectWithoutProviderInputSchema = exports.CashoutUncheckedCreateWithoutProviderInputSchema = exports.CashoutCreateWithoutProviderInputSchema = exports.CommunityCreateOrConnectWithoutProviderInputSchema = exports.CommunityUncheckedCreateWithoutProviderInputSchema = exports.CommunityCreateWithoutProviderInputSchema = exports.CommunityUncheckedUpdateWithoutResidenceTypeInputSchema = exports.CommunityUpdateWithoutResidenceTypeInputSchema = exports.CommunityUpdateToOneWithWhereWithoutResidenceTypeInputSchema = exports.CommunityUpsertWithoutResidenceTypeInputSchema = exports.ExpenseTypeScalarWhereInputSchema = exports.ExpenseTypeUpdateManyWithWhereWithoutResidenceTypeInputSchema = exports.ExpenseTypeUpdateWithWhereUniqueWithoutResidenceTypeInputSchema = exports.ExpenseTypeUpsertWithWhereUniqueWithoutResidenceTypeInputSchema = exports.ResidenceUpdateManyWithWhereWithoutResidenceTypeInputSchema = exports.ResidenceUpdateWithWhereUniqueWithoutResidenceTypeInputSchema = exports.ResidenceUpsertWithWhereUniqueWithoutResidenceTypeInputSchema = exports.CommunityCreateOrConnectWithoutResidenceTypeInputSchema = exports.CommunityUncheckedCreateWithoutResidenceTypeInputSchema = exports.CommunityCreateWithoutResidenceTypeInputSchema = exports.ExpenseTypeCreateManyResidenceTypeInputEnvelopeSchema = exports.ExpenseTypeCreateOrConnectWithoutResidenceTypeInputSchema = exports.ExpenseTypeUncheckedCreateWithoutResidenceTypeInputSchema = exports.ExpenseTypeCreateWithoutResidenceTypeInputSchema = exports.ResidenceCreateManyResidenceTypeInputEnvelopeSchema = exports.ResidenceCreateOrConnectWithoutResidenceTypeInputSchema = exports.ResidenceUncheckedCreateWithoutResidenceTypeInputSchema = exports.ResidenceCreateWithoutResidenceTypeInputSchema = exports.ResidenceUncheckedUpdateWithoutParkingSlotInputSchema = exports.ResidenceUpdateWithoutParkingSlotInputSchema = exports.ResidenceUpdateToOneWithWhereWithoutParkingSlotInputSchema = exports.ResidenceUpsertWithoutParkingSlotInputSchema = exports.ResidenceCreateOrConnectWithoutParkingSlotInputSchema = exports.ResidenceUncheckedCreateWithoutParkingSlotInputSchema = exports.ResidenceCreateWithoutParkingSlotInputSchema = exports.UserUpdateManyWithWhereWithoutResidentInInputSchema = exports.UserUpdateWithWhereUniqueWithoutResidentInInputSchema = exports.UserUpsertWithWhereUniqueWithoutResidentInInputSchema = exports.ExpenseScalarWhereInputSchema = exports.ExpenseUpdateManyWithWhereWithoutResidenceInputSchema = exports.ExpenseUpdateWithWhereUniqueWithoutResidenceInputSchema = exports.ExpenseUpsertWithWhereUniqueWithoutResidenceInputSchema = exports.ParkingSlotScalarWhereInputSchema = exports.ParkingSlotUpdateManyWithWhereWithoutResidenceInputSchema = void 0;
exports.UserUpdateWithoutPaymentsMadeInputSchema = exports.UserUpdateToOneWithWhereWithoutPaymentsMadeInputSchema = exports.UserUpsertWithoutPaymentsMadeInputSchema = exports.ExpenseUpdateManyWithWhereWithoutPaymentInputSchema = exports.ExpenseUpdateWithWhereUniqueWithoutPaymentInputSchema = exports.ExpenseUpsertWithWhereUniqueWithoutPaymentInputSchema = exports.UserCreateOrConnectWithoutPaymentsCreatedInputSchema = exports.UserUncheckedCreateWithoutPaymentsCreatedInputSchema = exports.UserCreateWithoutPaymentsCreatedInputSchema = exports.AccountCreateOrConnectWithoutPaymentInputSchema = exports.AccountUncheckedCreateWithoutPaymentInputSchema = exports.AccountCreateWithoutPaymentInputSchema = exports.UserCreateOrConnectWithoutPaymentsMadeInputSchema = exports.UserUncheckedCreateWithoutPaymentsMadeInputSchema = exports.UserCreateWithoutPaymentsMadeInputSchema = exports.ExpenseCreateManyPaymentInputEnvelopeSchema = exports.ExpenseCreateOrConnectWithoutPaymentInputSchema = exports.ExpenseUncheckedCreateWithoutPaymentInputSchema = exports.ExpenseCreateWithoutPaymentInputSchema = exports.PaymentUncheckedUpdateWithoutExpenseInputSchema = exports.PaymentUpdateWithoutExpenseInputSchema = exports.PaymentUpdateToOneWithWhereWithoutExpenseInputSchema = exports.PaymentUpsertWithoutExpenseInputSchema = exports.ExpenseTypeUncheckedUpdateWithoutExpenseInputSchema = exports.ExpenseTypeUpdateWithoutExpenseInputSchema = exports.ExpenseTypeUpdateToOneWithWhereWithoutExpenseInputSchema = exports.ExpenseTypeUpsertWithoutExpenseInputSchema = exports.ResidenceUncheckedUpdateWithoutExpenseInputSchema = exports.ResidenceUpdateWithoutExpenseInputSchema = exports.ResidenceUpdateToOneWithWhereWithoutExpenseInputSchema = exports.ResidenceUpsertWithoutExpenseInputSchema = exports.PaymentCreateOrConnectWithoutExpenseInputSchema = exports.PaymentUncheckedCreateWithoutExpenseInputSchema = exports.PaymentCreateWithoutExpenseInputSchema = exports.ExpenseTypeCreateOrConnectWithoutExpenseInputSchema = exports.ExpenseTypeUncheckedCreateWithoutExpenseInputSchema = exports.ExpenseTypeCreateWithoutExpenseInputSchema = exports.ResidenceCreateOrConnectWithoutExpenseInputSchema = exports.ResidenceUncheckedCreateWithoutExpenseInputSchema = exports.ResidenceCreateWithoutExpenseInputSchema = exports.UserUpdateManyWithWhereWithoutRoleInputSchema = exports.UserUpdateWithWhereUniqueWithoutRoleInputSchema = exports.UserUpsertWithWhereUniqueWithoutRoleInputSchema = exports.UserCreateManyRoleInputEnvelopeSchema = exports.UserCreateOrConnectWithoutRoleInputSchema = exports.UserUncheckedCreateWithoutRoleInputSchema = exports.UserCreateWithoutRoleInputSchema = exports.CashoutScalarWhereInputSchema = exports.CashoutUpdateManyWithWhereWithoutProviderInputSchema = exports.CashoutUpdateWithWhereUniqueWithoutProviderInputSchema = void 0;
exports.CommunityUpdateToOneWithWhereWithoutAccountInputSchema = exports.CommunityUpsertWithoutAccountInputSchema = exports.CashoutCreateManyAccountInputEnvelopeSchema = exports.CashoutCreateOrConnectWithoutAccountInputSchema = exports.CashoutUncheckedCreateWithoutAccountInputSchema = exports.CashoutCreateWithoutAccountInputSchema = exports.PaymentCreateManyAccountInputEnvelopeSchema = exports.PaymentCreateOrConnectWithoutAccountInputSchema = exports.PaymentUncheckedCreateWithoutAccountInputSchema = exports.PaymentCreateWithoutAccountInputSchema = exports.CommunityCreateOrConnectWithoutAccountInputSchema = exports.CommunityUncheckedCreateWithoutAccountInputSchema = exports.CommunityCreateWithoutAccountInputSchema = exports.ExpenseUpdateManyWithWhereWithoutExpenseTypeInputSchema = exports.ExpenseUpdateWithWhereUniqueWithoutExpenseTypeInputSchema = exports.ExpenseUpsertWithWhereUniqueWithoutExpenseTypeInputSchema = exports.ResidenceTypeUncheckedUpdateWithoutExpenseTypeInputSchema = exports.ResidenceTypeUpdateWithoutExpenseTypeInputSchema = exports.ResidenceTypeUpdateToOneWithWhereWithoutExpenseTypeInputSchema = exports.ResidenceTypeUpsertWithoutExpenseTypeInputSchema = exports.ExpenseCreateManyExpenseTypeInputEnvelopeSchema = exports.ExpenseCreateOrConnectWithoutExpenseTypeInputSchema = exports.ExpenseUncheckedCreateWithoutExpenseTypeInputSchema = exports.ExpenseCreateWithoutExpenseTypeInputSchema = exports.ResidenceTypeCreateOrConnectWithoutExpenseTypeInputSchema = exports.ResidenceTypeUncheckedCreateWithoutExpenseTypeInputSchema = exports.ResidenceTypeCreateWithoutExpenseTypeInputSchema = exports.AccountUncheckedUpdateWithoutCashoutInputSchema = exports.AccountUpdateWithoutCashoutInputSchema = exports.AccountUpdateToOneWithWhereWithoutCashoutInputSchema = exports.AccountUpsertWithoutCashoutInputSchema = exports.ProviderUncheckedUpdateWithoutCashoutInputSchema = exports.ProviderUpdateWithoutCashoutInputSchema = exports.ProviderUpdateToOneWithWhereWithoutCashoutInputSchema = exports.ProviderUpsertWithoutCashoutInputSchema = exports.AccountCreateOrConnectWithoutCashoutInputSchema = exports.AccountUncheckedCreateWithoutCashoutInputSchema = exports.AccountCreateWithoutCashoutInputSchema = exports.ProviderCreateOrConnectWithoutCashoutInputSchema = exports.ProviderUncheckedCreateWithoutCashoutInputSchema = exports.ProviderCreateWithoutCashoutInputSchema = exports.UserUncheckedUpdateWithoutPaymentsCreatedInputSchema = exports.UserUpdateWithoutPaymentsCreatedInputSchema = exports.UserUpdateToOneWithWhereWithoutPaymentsCreatedInputSchema = exports.UserUpsertWithoutPaymentsCreatedInputSchema = exports.AccountUncheckedUpdateWithoutPaymentInputSchema = exports.AccountUpdateWithoutPaymentInputSchema = exports.AccountUpdateToOneWithWhereWithoutPaymentInputSchema = exports.AccountUpsertWithoutPaymentInputSchema = exports.UserUncheckedUpdateWithoutPaymentsMadeInputSchema = void 0;
exports.UserUpdateWithoutResidentInInputSchema = exports.ExpenseUncheckedUpdateManyWithoutResidenceInputSchema = exports.ExpenseUncheckedUpdateWithoutResidenceInputSchema = exports.ExpenseUpdateWithoutResidenceInputSchema = exports.ParkingSlotUncheckedUpdateManyWithoutResidenceInputSchema = exports.ParkingSlotUncheckedUpdateWithoutResidenceInputSchema = exports.ParkingSlotUpdateWithoutResidenceInputSchema = exports.UserCreateManyResidentInInputSchema = exports.ExpenseCreateManyResidenceInputSchema = exports.ParkingSlotCreateManyResidenceInputSchema = exports.ResidenceUncheckedUpdateManyWithoutOwnerInputSchema = exports.ResidenceUncheckedUpdateWithoutOwnerInputSchema = exports.ResidenceUpdateWithoutOwnerInputSchema = exports.PaymentUncheckedUpdateManyWithoutUserInputSchema = exports.PaymentUncheckedUpdateWithoutUserInputSchema = exports.PaymentUpdateWithoutUserInputSchema = exports.PaymentUncheckedUpdateManyWithoutAdminInputSchema = exports.PaymentUncheckedUpdateWithoutAdminInputSchema = exports.PaymentUpdateWithoutAdminInputSchema = exports.ResidenceCreateManyOwnerInputSchema = exports.PaymentCreateManyUserInputSchema = exports.PaymentCreateManyAdminInputSchema = exports.ResidenceTypeUncheckedUpdateManyWithoutCommunityInputSchema = exports.ResidenceTypeUncheckedUpdateWithoutCommunityInputSchema = exports.ResidenceTypeUpdateWithoutCommunityInputSchema = exports.AccountUncheckedUpdateManyWithoutCommunityInputSchema = exports.AccountUncheckedUpdateWithoutCommunityInputSchema = exports.AccountUpdateWithoutCommunityInputSchema = exports.UserUncheckedUpdateManyWithoutCommunityInputSchema = exports.UserUncheckedUpdateWithoutCommunityInputSchema = exports.UserUpdateWithoutCommunityInputSchema = exports.ProviderUncheckedUpdateManyWithoutCommunityInputSchema = exports.ProviderUncheckedUpdateWithoutCommunityInputSchema = exports.ProviderUpdateWithoutCommunityInputSchema = exports.ResidenceUncheckedUpdateManyWithoutCommunityInputSchema = exports.ResidenceUncheckedUpdateWithoutCommunityInputSchema = exports.ResidenceUpdateWithoutCommunityInputSchema = exports.ResidenceTypeCreateManyCommunityInputSchema = exports.AccountCreateManyCommunityInputSchema = exports.UserCreateManyCommunityInputSchema = exports.ProviderCreateManyCommunityInputSchema = exports.ResidenceCreateManyCommunityInputSchema = exports.CashoutUpdateManyWithWhereWithoutAccountInputSchema = exports.CashoutUpdateWithWhereUniqueWithoutAccountInputSchema = exports.CashoutUpsertWithWhereUniqueWithoutAccountInputSchema = exports.PaymentUpdateManyWithWhereWithoutAccountInputSchema = exports.PaymentUpdateWithWhereUniqueWithoutAccountInputSchema = exports.PaymentUpsertWithWhereUniqueWithoutAccountInputSchema = exports.CommunityUncheckedUpdateWithoutAccountInputSchema = exports.CommunityUpdateWithoutAccountInputSchema = void 0;
exports.ResidenceFindFirstOrThrowArgsSchema = exports.ResidenceFindFirstArgsSchema = exports.UserFindUniqueOrThrowArgsSchema = exports.UserFindUniqueArgsSchema = exports.UserGroupByArgsSchema = exports.UserAggregateArgsSchema = exports.UserFindManyArgsSchema = exports.UserFindFirstOrThrowArgsSchema = exports.UserFindFirstArgsSchema = exports.CommunityFindUniqueOrThrowArgsSchema = exports.CommunityFindUniqueArgsSchema = exports.CommunityGroupByArgsSchema = exports.CommunityAggregateArgsSchema = exports.CommunityFindManyArgsSchema = exports.CommunityFindFirstOrThrowArgsSchema = exports.CommunityFindFirstArgsSchema = exports.CashoutUncheckedUpdateManyWithoutAccountInputSchema = exports.CashoutUncheckedUpdateWithoutAccountInputSchema = exports.CashoutUpdateWithoutAccountInputSchema = exports.PaymentUncheckedUpdateManyWithoutAccountInputSchema = exports.PaymentUncheckedUpdateWithoutAccountInputSchema = exports.PaymentUpdateWithoutAccountInputSchema = exports.CashoutCreateManyAccountInputSchema = exports.PaymentCreateManyAccountInputSchema = exports.ExpenseUncheckedUpdateManyWithoutExpenseTypeInputSchema = exports.ExpenseUncheckedUpdateWithoutExpenseTypeInputSchema = exports.ExpenseUpdateWithoutExpenseTypeInputSchema = exports.ExpenseCreateManyExpenseTypeInputSchema = exports.ExpenseUncheckedUpdateManyWithoutPaymentInputSchema = exports.ExpenseUncheckedUpdateWithoutPaymentInputSchema = exports.ExpenseUpdateWithoutPaymentInputSchema = exports.ExpenseCreateManyPaymentInputSchema = exports.UserUncheckedUpdateManyWithoutRoleInputSchema = exports.UserUncheckedUpdateWithoutRoleInputSchema = exports.UserUpdateWithoutRoleInputSchema = exports.UserCreateManyRoleInputSchema = exports.CashoutUncheckedUpdateManyWithoutProviderInputSchema = exports.CashoutUncheckedUpdateWithoutProviderInputSchema = exports.CashoutUpdateWithoutProviderInputSchema = exports.CashoutCreateManyProviderInputSchema = exports.ExpenseTypeUncheckedUpdateManyWithoutResidenceTypeInputSchema = exports.ExpenseTypeUncheckedUpdateWithoutResidenceTypeInputSchema = exports.ExpenseTypeUpdateWithoutResidenceTypeInputSchema = exports.ResidenceUncheckedUpdateManyWithoutResidenceTypeInputSchema = exports.ResidenceUncheckedUpdateWithoutResidenceTypeInputSchema = exports.ResidenceUpdateWithoutResidenceTypeInputSchema = exports.ExpenseTypeCreateManyResidenceTypeInputSchema = exports.ResidenceCreateManyResidenceTypeInputSchema = exports.UserUncheckedUpdateManyWithoutResidentInInputSchema = exports.UserUncheckedUpdateWithoutResidentInInputSchema = void 0;
exports.CashoutFindManyArgsSchema = exports.CashoutFindFirstOrThrowArgsSchema = exports.CashoutFindFirstArgsSchema = exports.PaymentFindUniqueOrThrowArgsSchema = exports.PaymentFindUniqueArgsSchema = exports.PaymentGroupByArgsSchema = exports.PaymentAggregateArgsSchema = exports.PaymentFindManyArgsSchema = exports.PaymentFindFirstOrThrowArgsSchema = exports.PaymentFindFirstArgsSchema = exports.ExpenseFindUniqueOrThrowArgsSchema = exports.ExpenseFindUniqueArgsSchema = exports.ExpenseGroupByArgsSchema = exports.ExpenseAggregateArgsSchema = exports.ExpenseFindManyArgsSchema = exports.ExpenseFindFirstOrThrowArgsSchema = exports.ExpenseFindFirstArgsSchema = exports.RoleFindUniqueOrThrowArgsSchema = exports.RoleFindUniqueArgsSchema = exports.RoleGroupByArgsSchema = exports.RoleAggregateArgsSchema = exports.RoleFindManyArgsSchema = exports.RoleFindFirstOrThrowArgsSchema = exports.RoleFindFirstArgsSchema = exports.ProviderFindUniqueOrThrowArgsSchema = exports.ProviderFindUniqueArgsSchema = exports.ProviderGroupByArgsSchema = exports.ProviderAggregateArgsSchema = exports.ProviderFindManyArgsSchema = exports.ProviderFindFirstOrThrowArgsSchema = exports.ProviderFindFirstArgsSchema = exports.ResidenceTypeFindUniqueOrThrowArgsSchema = exports.ResidenceTypeFindUniqueArgsSchema = exports.ResidenceTypeGroupByArgsSchema = exports.ResidenceTypeAggregateArgsSchema = exports.ResidenceTypeFindManyArgsSchema = exports.ResidenceTypeFindFirstOrThrowArgsSchema = exports.ResidenceTypeFindFirstArgsSchema = exports.ParkingSlotFindUniqueOrThrowArgsSchema = exports.ParkingSlotFindUniqueArgsSchema = exports.ParkingSlotGroupByArgsSchema = exports.ParkingSlotAggregateArgsSchema = exports.ParkingSlotFindManyArgsSchema = exports.ParkingSlotFindFirstOrThrowArgsSchema = exports.ParkingSlotFindFirstArgsSchema = exports.ResidenceFindUniqueOrThrowArgsSchema = exports.ResidenceFindUniqueArgsSchema = exports.ResidenceGroupByArgsSchema = exports.ResidenceAggregateArgsSchema = exports.ResidenceFindManyArgsSchema = void 0;
exports.ParkingSlotDeleteManyArgsSchema = exports.ParkingSlotUpdateManyArgsSchema = exports.ParkingSlotUpdateArgsSchema = exports.ParkingSlotDeleteArgsSchema = exports.ParkingSlotCreateManyAndReturnArgsSchema = exports.ParkingSlotCreateManyArgsSchema = exports.ParkingSlotUpsertArgsSchema = exports.ParkingSlotCreateArgsSchema = exports.ResidenceDeleteManyArgsSchema = exports.ResidenceUpdateManyArgsSchema = exports.ResidenceUpdateArgsSchema = exports.ResidenceDeleteArgsSchema = exports.ResidenceCreateManyAndReturnArgsSchema = exports.ResidenceCreateManyArgsSchema = exports.ResidenceUpsertArgsSchema = exports.ResidenceCreateArgsSchema = exports.UserDeleteManyArgsSchema = exports.UserUpdateManyArgsSchema = exports.UserUpdateArgsSchema = exports.UserDeleteArgsSchema = exports.UserCreateManyAndReturnArgsSchema = exports.UserCreateManyArgsSchema = exports.UserUpsertArgsSchema = exports.UserCreateArgsSchema = exports.CommunityDeleteManyArgsSchema = exports.CommunityUpdateManyArgsSchema = exports.CommunityUpdateArgsSchema = exports.CommunityDeleteArgsSchema = exports.CommunityCreateManyAndReturnArgsSchema = exports.CommunityCreateManyArgsSchema = exports.CommunityUpsertArgsSchema = exports.CommunityCreateArgsSchema = exports.AccountFindUniqueOrThrowArgsSchema = exports.AccountFindUniqueArgsSchema = exports.AccountGroupByArgsSchema = exports.AccountAggregateArgsSchema = exports.AccountFindManyArgsSchema = exports.AccountFindFirstOrThrowArgsSchema = exports.AccountFindFirstArgsSchema = exports.ExpenseTypeFindUniqueOrThrowArgsSchema = exports.ExpenseTypeFindUniqueArgsSchema = exports.ExpenseTypeGroupByArgsSchema = exports.ExpenseTypeAggregateArgsSchema = exports.ExpenseTypeFindManyArgsSchema = exports.ExpenseTypeFindFirstOrThrowArgsSchema = exports.ExpenseTypeFindFirstArgsSchema = exports.CashoutFindUniqueOrThrowArgsSchema = exports.CashoutFindUniqueArgsSchema = exports.CashoutGroupByArgsSchema = exports.CashoutAggregateArgsSchema = void 0;
exports.ExpenseTypeUpsertArgsSchema = exports.ExpenseTypeCreateArgsSchema = exports.CashoutDeleteManyArgsSchema = exports.CashoutUpdateManyArgsSchema = exports.CashoutUpdateArgsSchema = exports.CashoutDeleteArgsSchema = exports.CashoutCreateManyAndReturnArgsSchema = exports.CashoutCreateManyArgsSchema = exports.CashoutUpsertArgsSchema = exports.CashoutCreateArgsSchema = exports.PaymentDeleteManyArgsSchema = exports.PaymentUpdateManyArgsSchema = exports.PaymentUpdateArgsSchema = exports.PaymentDeleteArgsSchema = exports.PaymentCreateManyAndReturnArgsSchema = exports.PaymentCreateManyArgsSchema = exports.PaymentUpsertArgsSchema = exports.PaymentCreateArgsSchema = exports.ExpenseDeleteManyArgsSchema = exports.ExpenseUpdateManyArgsSchema = exports.ExpenseUpdateArgsSchema = exports.ExpenseDeleteArgsSchema = exports.ExpenseCreateManyAndReturnArgsSchema = exports.ExpenseCreateManyArgsSchema = exports.ExpenseUpsertArgsSchema = exports.ExpenseCreateArgsSchema = exports.RoleDeleteManyArgsSchema = exports.RoleUpdateManyArgsSchema = exports.RoleUpdateArgsSchema = exports.RoleDeleteArgsSchema = exports.RoleCreateManyAndReturnArgsSchema = exports.RoleCreateManyArgsSchema = exports.RoleUpsertArgsSchema = exports.RoleCreateArgsSchema = exports.ProviderDeleteManyArgsSchema = exports.ProviderUpdateManyArgsSchema = exports.ProviderUpdateArgsSchema = exports.ProviderDeleteArgsSchema = exports.ProviderCreateManyAndReturnArgsSchema = exports.ProviderCreateManyArgsSchema = exports.ProviderUpsertArgsSchema = exports.ProviderCreateArgsSchema = exports.ResidenceTypeDeleteManyArgsSchema = exports.ResidenceTypeUpdateManyArgsSchema = exports.ResidenceTypeUpdateArgsSchema = exports.ResidenceTypeDeleteArgsSchema = exports.ResidenceTypeCreateManyAndReturnArgsSchema = exports.ResidenceTypeCreateManyArgsSchema = exports.ResidenceTypeUpsertArgsSchema = exports.ResidenceTypeCreateArgsSchema = void 0;
exports.AccountDeleteManyArgsSchema = exports.AccountUpdateManyArgsSchema = exports.AccountUpdateArgsSchema = exports.AccountDeleteArgsSchema = exports.AccountCreateManyAndReturnArgsSchema = exports.AccountCreateManyArgsSchema = exports.AccountUpsertArgsSchema = exports.AccountCreateArgsSchema = exports.ExpenseTypeDeleteManyArgsSchema = exports.ExpenseTypeUpdateManyArgsSchema = exports.ExpenseTypeUpdateArgsSchema = exports.ExpenseTypeDeleteArgsSchema = exports.ExpenseTypeCreateManyAndReturnArgsSchema = exports.ExpenseTypeCreateManyArgsSchema = void 0;
const zod_1 = require("zod");
const client_1 = require("@prisma/client");
const transformJsonNull = (v) => {
    if (!v || v === 'DbNull')
        return client_1.Prisma.DbNull;
    if (v === 'JsonNull')
        return client_1.Prisma.JsonNull;
    return v;
};
exports.transformJsonNull = transformJsonNull;
exports.JsonValueSchema = zod_1.z.lazy(() => zod_1.z.union([
    zod_1.z.string(),
    zod_1.z.number(),
    zod_1.z.boolean(),
    zod_1.z.literal(null),
    zod_1.z.record(zod_1.z.lazy(() => exports.JsonValueSchema.optional())),
    zod_1.z.array(zod_1.z.lazy(() => exports.JsonValueSchema)),
]));
exports.NullableJsonValue = zod_1.z
    .union([exports.JsonValueSchema, zod_1.z.literal('DbNull'), zod_1.z.literal('JsonNull')])
    .nullable()
    .transform((v) => (0, exports.transformJsonNull)(v));
exports.InputJsonValueSchema = zod_1.z.lazy(() => zod_1.z.union([
    zod_1.z.string(),
    zod_1.z.number(),
    zod_1.z.boolean(),
    zod_1.z.object({ toJSON: zod_1.z.function(zod_1.z.tuple([]), zod_1.z.any()) }),
    zod_1.z.record(zod_1.z.lazy(() => zod_1.z.union([exports.InputJsonValueSchema, zod_1.z.literal(null)]))),
    zod_1.z.array(zod_1.z.lazy(() => zod_1.z.union([exports.InputJsonValueSchema, zod_1.z.literal(null)]))),
]));
// DECIMAL
//------------------------------------------------------
exports.DecimalJsLikeSchema = zod_1.z.object({
    d: zod_1.z.array(zod_1.z.number()),
    e: zod_1.z.number(),
    s: zod_1.z.number(),
    toFixed: zod_1.z.function(zod_1.z.tuple([]), zod_1.z.string()),
});
exports.DECIMAL_STRING_REGEX = /^(?:-?Infinity|NaN|-?(?:0[bB][01]+(?:\.[01]+)?(?:[pP][-+]?\d+)?|0[oO][0-7]+(?:\.[0-7]+)?(?:[pP][-+]?\d+)?|0[xX][\da-fA-F]+(?:\.[\da-fA-F]+)?(?:[pP][-+]?\d+)?|(?:\d+|\d*\.\d+)(?:[eE][-+]?\d+)?))$/;
const isValidDecimalInput = (v) => {
    if (v === undefined || v === null)
        return false;
    return ((typeof v === 'object' && 'd' in v && 'e' in v && 's' in v && 'toFixed' in v) ||
        (typeof v === 'string' && exports.DECIMAL_STRING_REGEX.test(v)) ||
        typeof v === 'number');
};
exports.isValidDecimalInput = isValidDecimalInput;
/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////
exports.TransactionIsolationLevelSchema = zod_1.z.enum(['ReadUncommitted', 'ReadCommitted', 'RepeatableRead', 'Serializable']);
exports.CommunityScalarFieldEnumSchema = zod_1.z.enum(['id', 'title', 'address']);
exports.UserScalarFieldEnumSchema = zod_1.z.enum(['id', 'userName', 'email', 'password', 'identification', 'firstName', 'lastName', 'phone', 'isVerified', 'isActive', 'community_id', 'role_id', 'residence_id']);
exports.ResidenceScalarFieldEnumSchema = zod_1.z.enum(['id', 'title', 'owner_id', 'community_id', 'contacts', 'residenceType_id']);
exports.ParkingSlotScalarFieldEnumSchema = zod_1.z.enum(['id', 'number', 'residence_id']);
exports.ResidenceTypeScalarFieldEnumSchema = zod_1.z.enum(['id', 'title', 'description', 'community_id']);
exports.ProviderScalarFieldEnumSchema = zod_1.z.enum(['id', 'title', 'contactName', 'description', 'phone', 'email', 'address', 'website', 'active', 'community_id']);
exports.RoleScalarFieldEnumSchema = zod_1.z.enum(['id', 'title', 'description', 'modules']);
exports.ExpenseScalarFieldEnumSchema = zod_1.z.enum(['id', 'title', 'residence_id', 'emitingDate', 'expireDate', 'status', 'expenseType_id', 'payment_id']);
exports.PaymentScalarFieldEnumSchema = zod_1.z.enum(['id', 'title', 'description', 'registerDate', 'amount', 'owner_id', 'voucherImage', 'isEmailSend', 'account_id', 'created_by']);
exports.CashoutScalarFieldEnumSchema = zod_1.z.enum(['id', 'title', 'description', 'provider_id', 'amount', 'billImage', 'account_id', 'status', 'registerDate']);
exports.ExpenseTypeScalarFieldEnumSchema = zod_1.z.enum(['id', 'title', 'value', 'residenceType_id']);
exports.AccountScalarFieldEnumSchema = zod_1.z.enum(['id', 'title', 'description', 'active', 'community_id', 'balance']);
exports.SortOrderSchema = zod_1.z.enum(['asc', 'desc']);
exports.NullableJsonNullValueInputSchema = zod_1.z.enum(['DbNull', 'JsonNull',]).transform((value) => value === 'JsonNull' ? client_1.Prisma.JsonNull : value === 'DbNull' ? client_1.Prisma.DbNull : value);
exports.QueryModeSchema = zod_1.z.enum(['default', 'insensitive']);
exports.NullsOrderSchema = zod_1.z.enum(['first', 'last']);
exports.JsonNullValueFilterSchema = zod_1.z.enum(['DbNull', 'JsonNull', 'AnyNull',]).transform((value) => value === 'JsonNull' ? client_1.Prisma.JsonNull : value === 'DbNull' ? client_1.Prisma.JsonNull : value === 'AnyNull' ? client_1.Prisma.AnyNull : value);
/////////////////////////////////////////
// MODELS
/////////////////////////////////////////
/////////////////////////////////////////
// COMMUNITY SCHEMA
/////////////////////////////////////////
exports.CommunitySchema = zod_1.z.object({
    id: zod_1.z.string(),
    title: zod_1.z.string(),
    address: zod_1.z.string(),
});
/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////
exports.UserSchema = zod_1.z.object({
    id: zod_1.z.string(),
    userName: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string().nullable(),
    identification: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    phone: zod_1.z.string(),
    isVerified: zod_1.z.boolean().nullable(),
    isActive: zod_1.z.boolean().nullable(),
    community_id: zod_1.z.string(),
    role_id: zod_1.z.number().int(),
    residence_id: zod_1.z.string().nullable(),
});
/////////////////////////////////////////
// RESIDENCE SCHEMA
/////////////////////////////////////////
exports.ResidenceSchema = zod_1.z.object({
    id: zod_1.z.string(),
    title: zod_1.z.string(),
    owner_id: zod_1.z.string().nullable(),
    community_id: zod_1.z.string(),
    contacts: exports.JsonValueSchema.nullable(),
    residenceType_id: zod_1.z.number().int(),
});
/////////////////////////////////////////
// PARKING SLOT SCHEMA
/////////////////////////////////////////
exports.ParkingSlotSchema = zod_1.z.object({
    id: zod_1.z.string(),
    number: zod_1.z.number().int(),
    residence_id: zod_1.z.string(),
});
/////////////////////////////////////////
// RESIDENCE TYPE SCHEMA
/////////////////////////////////////////
exports.ResidenceTypeSchema = zod_1.z.object({
    id: zod_1.z.number().int(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    community_id: zod_1.z.string(),
});
/////////////////////////////////////////
// PROVIDER SCHEMA
/////////////////////////////////////////
exports.ProviderSchema = zod_1.z.object({
    id: zod_1.z.string(),
    title: zod_1.z.string(),
    contactName: zod_1.z.string(),
    description: zod_1.z.string(),
    phone: zod_1.z.string(),
    email: zod_1.z.string().nullable(),
    address: zod_1.z.string().nullable(),
    website: zod_1.z.string().nullable(),
    active: zod_1.z.boolean(),
    community_id: zod_1.z.string(),
});
/////////////////////////////////////////
// ROLE SCHEMA
/////////////////////////////////////////
exports.RoleSchema = zod_1.z.object({
    id: zod_1.z.number().int(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    modules: zod_1.z.string(),
});
/////////////////////////////////////////
// EXPENSE SCHEMA
/////////////////////////////////////////
exports.ExpenseSchema = zod_1.z.object({
    id: zod_1.z.string(),
    title: zod_1.z.string(),
    residence_id: zod_1.z.string(),
    emitingDate: zod_1.z.coerce.date(),
    expireDate: zod_1.z.coerce.date(),
    status: zod_1.z.string(),
    expenseType_id: zod_1.z.number().int(),
    payment_id: zod_1.z.string(),
});
/////////////////////////////////////////
// PAYMENT SCHEMA
/////////////////////////////////////////
exports.PaymentSchema = zod_1.z.object({
    id: zod_1.z.string(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date(),
    amount: zod_1.z.instanceof(client_1.Prisma.Decimal, { message: "Field 'amount' must be a Decimal. Location: ['Models', 'Payment']" }),
    owner_id: zod_1.z.string(),
    voucherImage: zod_1.z.string(),
    isEmailSend: zod_1.z.boolean(),
    account_id: zod_1.z.string(),
    created_by: zod_1.z.string(),
});
/////////////////////////////////////////
// CASHOUT SCHEMA
/////////////////////////////////////////
exports.CashoutSchema = zod_1.z.object({
    id: zod_1.z.string(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    provider_id: zod_1.z.string(),
    amount: zod_1.z.instanceof(client_1.Prisma.Decimal, { message: "Field 'amount' must be a Decimal. Location: ['Models', 'Cashout']" }),
    billImage: zod_1.z.string(),
    account_id: zod_1.z.string(),
    status: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date(),
});
/////////////////////////////////////////
// EXPENSE TYPE SCHEMA
/////////////////////////////////////////
exports.ExpenseTypeSchema = zod_1.z.object({
    id: zod_1.z.number().int(),
    title: zod_1.z.string(),
    value: zod_1.z.number().int(),
    residenceType_id: zod_1.z.number().int(),
});
/////////////////////////////////////////
// ACCOUNT SCHEMA
/////////////////////////////////////////
exports.AccountSchema = zod_1.z.object({
    id: zod_1.z.string(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    active: zod_1.z.boolean(),
    community_id: zod_1.z.string(),
    balance: zod_1.z.bigint(),
});
/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////
// COMMUNITY
//------------------------------------------------------
exports.CommunityIncludeSchema = zod_1.z.object({
    Residence: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceFindManyArgsSchema)]).optional(),
    Provider: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ProviderFindManyArgsSchema)]).optional(),
    User: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.UserFindManyArgsSchema)]).optional(),
    Account: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.AccountFindManyArgsSchema)]).optional(),
    ResidenceType: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceTypeFindManyArgsSchema)]).optional(),
    _count: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.CommunityCountOutputTypeArgsSchema)]).optional(),
}).strict();
exports.CommunityArgsSchema = zod_1.z.object({
    select: zod_1.z.lazy(() => exports.CommunitySelectSchema).optional(),
    include: zod_1.z.lazy(() => exports.CommunityIncludeSchema).optional(),
}).strict();
exports.CommunityCountOutputTypeArgsSchema = zod_1.z.object({
    select: zod_1.z.lazy(() => exports.CommunityCountOutputTypeSelectSchema).nullish(),
}).strict();
exports.CommunityCountOutputTypeSelectSchema = zod_1.z.object({
    Residence: zod_1.z.boolean().optional(),
    Provider: zod_1.z.boolean().optional(),
    User: zod_1.z.boolean().optional(),
    Account: zod_1.z.boolean().optional(),
    ResidenceType: zod_1.z.boolean().optional(),
}).strict();
exports.CommunitySelectSchema = zod_1.z.object({
    id: zod_1.z.boolean().optional(),
    title: zod_1.z.boolean().optional(),
    address: zod_1.z.boolean().optional(),
    Residence: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceFindManyArgsSchema)]).optional(),
    Provider: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ProviderFindManyArgsSchema)]).optional(),
    User: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.UserFindManyArgsSchema)]).optional(),
    Account: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.AccountFindManyArgsSchema)]).optional(),
    ResidenceType: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceTypeFindManyArgsSchema)]).optional(),
    _count: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.CommunityCountOutputTypeArgsSchema)]).optional(),
}).strict();
// USER
//------------------------------------------------------
exports.UserIncludeSchema = zod_1.z.object({
    Community: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.CommunityArgsSchema)]).optional(),
    Role: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.RoleArgsSchema)]).optional(),
    paymentsCreated: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.PaymentFindManyArgsSchema)]).optional(),
    paymentsMade: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.PaymentFindManyArgsSchema)]).optional(),
    Residence: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceFindManyArgsSchema)]).optional(),
    ResidentIn: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceArgsSchema)]).optional(),
    _count: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.UserCountOutputTypeArgsSchema)]).optional(),
}).strict();
exports.UserArgsSchema = zod_1.z.object({
    select: zod_1.z.lazy(() => exports.UserSelectSchema).optional(),
    include: zod_1.z.lazy(() => exports.UserIncludeSchema).optional(),
}).strict();
exports.UserCountOutputTypeArgsSchema = zod_1.z.object({
    select: zod_1.z.lazy(() => exports.UserCountOutputTypeSelectSchema).nullish(),
}).strict();
exports.UserCountOutputTypeSelectSchema = zod_1.z.object({
    paymentsCreated: zod_1.z.boolean().optional(),
    paymentsMade: zod_1.z.boolean().optional(),
    Residence: zod_1.z.boolean().optional(),
}).strict();
exports.UserSelectSchema = zod_1.z.object({
    id: zod_1.z.boolean().optional(),
    userName: zod_1.z.boolean().optional(),
    email: zod_1.z.boolean().optional(),
    password: zod_1.z.boolean().optional(),
    identification: zod_1.z.boolean().optional(),
    firstName: zod_1.z.boolean().optional(),
    lastName: zod_1.z.boolean().optional(),
    phone: zod_1.z.boolean().optional(),
    isVerified: zod_1.z.boolean().optional(),
    isActive: zod_1.z.boolean().optional(),
    community_id: zod_1.z.boolean().optional(),
    role_id: zod_1.z.boolean().optional(),
    residence_id: zod_1.z.boolean().optional(),
    Community: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.CommunityArgsSchema)]).optional(),
    Role: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.RoleArgsSchema)]).optional(),
    paymentsCreated: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.PaymentFindManyArgsSchema)]).optional(),
    paymentsMade: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.PaymentFindManyArgsSchema)]).optional(),
    Residence: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceFindManyArgsSchema)]).optional(),
    ResidentIn: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceArgsSchema)]).optional(),
    _count: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.UserCountOutputTypeArgsSchema)]).optional(),
}).strict();
// RESIDENCE
//------------------------------------------------------
exports.ResidenceIncludeSchema = zod_1.z.object({
    Owner: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.UserArgsSchema)]).optional(),
    Community: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.CommunityArgsSchema)]).optional(),
    ResidenceType: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceTypeArgsSchema)]).optional(),
    ParkingSlot: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ParkingSlotFindManyArgsSchema)]).optional(),
    Expense: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ExpenseFindManyArgsSchema)]).optional(),
    Resident: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.UserFindManyArgsSchema)]).optional(),
    _count: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceCountOutputTypeArgsSchema)]).optional(),
}).strict();
exports.ResidenceArgsSchema = zod_1.z.object({
    select: zod_1.z.lazy(() => exports.ResidenceSelectSchema).optional(),
    include: zod_1.z.lazy(() => exports.ResidenceIncludeSchema).optional(),
}).strict();
exports.ResidenceCountOutputTypeArgsSchema = zod_1.z.object({
    select: zod_1.z.lazy(() => exports.ResidenceCountOutputTypeSelectSchema).nullish(),
}).strict();
exports.ResidenceCountOutputTypeSelectSchema = zod_1.z.object({
    ParkingSlot: zod_1.z.boolean().optional(),
    Expense: zod_1.z.boolean().optional(),
    Resident: zod_1.z.boolean().optional(),
}).strict();
exports.ResidenceSelectSchema = zod_1.z.object({
    id: zod_1.z.boolean().optional(),
    title: zod_1.z.boolean().optional(),
    owner_id: zod_1.z.boolean().optional(),
    community_id: zod_1.z.boolean().optional(),
    contacts: zod_1.z.boolean().optional(),
    residenceType_id: zod_1.z.boolean().optional(),
    Owner: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.UserArgsSchema)]).optional(),
    Community: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.CommunityArgsSchema)]).optional(),
    ResidenceType: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceTypeArgsSchema)]).optional(),
    ParkingSlot: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ParkingSlotFindManyArgsSchema)]).optional(),
    Expense: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ExpenseFindManyArgsSchema)]).optional(),
    Resident: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.UserFindManyArgsSchema)]).optional(),
    _count: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceCountOutputTypeArgsSchema)]).optional(),
}).strict();
// PARKING SLOT
//------------------------------------------------------
exports.ParkingSlotIncludeSchema = zod_1.z.object({
    Residence: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceArgsSchema)]).optional(),
}).strict();
exports.ParkingSlotArgsSchema = zod_1.z.object({
    select: zod_1.z.lazy(() => exports.ParkingSlotSelectSchema).optional(),
    include: zod_1.z.lazy(() => exports.ParkingSlotIncludeSchema).optional(),
}).strict();
exports.ParkingSlotSelectSchema = zod_1.z.object({
    id: zod_1.z.boolean().optional(),
    number: zod_1.z.boolean().optional(),
    residence_id: zod_1.z.boolean().optional(),
    Residence: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceArgsSchema)]).optional(),
}).strict();
// RESIDENCE TYPE
//------------------------------------------------------
exports.ResidenceTypeIncludeSchema = zod_1.z.object({
    Residence: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceFindManyArgsSchema)]).optional(),
    ExpenseType: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ExpenseTypeFindManyArgsSchema)]).optional(),
    Community: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.CommunityArgsSchema)]).optional(),
    _count: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceTypeCountOutputTypeArgsSchema)]).optional(),
}).strict();
exports.ResidenceTypeArgsSchema = zod_1.z.object({
    select: zod_1.z.lazy(() => exports.ResidenceTypeSelectSchema).optional(),
    include: zod_1.z.lazy(() => exports.ResidenceTypeIncludeSchema).optional(),
}).strict();
exports.ResidenceTypeCountOutputTypeArgsSchema = zod_1.z.object({
    select: zod_1.z.lazy(() => exports.ResidenceTypeCountOutputTypeSelectSchema).nullish(),
}).strict();
exports.ResidenceTypeCountOutputTypeSelectSchema = zod_1.z.object({
    Residence: zod_1.z.boolean().optional(),
    ExpenseType: zod_1.z.boolean().optional(),
}).strict();
exports.ResidenceTypeSelectSchema = zod_1.z.object({
    id: zod_1.z.boolean().optional(),
    title: zod_1.z.boolean().optional(),
    description: zod_1.z.boolean().optional(),
    community_id: zod_1.z.boolean().optional(),
    Residence: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceFindManyArgsSchema)]).optional(),
    ExpenseType: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ExpenseTypeFindManyArgsSchema)]).optional(),
    Community: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.CommunityArgsSchema)]).optional(),
    _count: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceTypeCountOutputTypeArgsSchema)]).optional(),
}).strict();
// PROVIDER
//------------------------------------------------------
exports.ProviderIncludeSchema = zod_1.z.object({
    Community: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.CommunityArgsSchema)]).optional(),
    Cashout: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.CashoutFindManyArgsSchema)]).optional(),
    _count: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ProviderCountOutputTypeArgsSchema)]).optional(),
}).strict();
exports.ProviderArgsSchema = zod_1.z.object({
    select: zod_1.z.lazy(() => exports.ProviderSelectSchema).optional(),
    include: zod_1.z.lazy(() => exports.ProviderIncludeSchema).optional(),
}).strict();
exports.ProviderCountOutputTypeArgsSchema = zod_1.z.object({
    select: zod_1.z.lazy(() => exports.ProviderCountOutputTypeSelectSchema).nullish(),
}).strict();
exports.ProviderCountOutputTypeSelectSchema = zod_1.z.object({
    Cashout: zod_1.z.boolean().optional(),
}).strict();
exports.ProviderSelectSchema = zod_1.z.object({
    id: zod_1.z.boolean().optional(),
    title: zod_1.z.boolean().optional(),
    contactName: zod_1.z.boolean().optional(),
    description: zod_1.z.boolean().optional(),
    phone: zod_1.z.boolean().optional(),
    email: zod_1.z.boolean().optional(),
    address: zod_1.z.boolean().optional(),
    website: zod_1.z.boolean().optional(),
    active: zod_1.z.boolean().optional(),
    community_id: zod_1.z.boolean().optional(),
    Community: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.CommunityArgsSchema)]).optional(),
    Cashout: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.CashoutFindManyArgsSchema)]).optional(),
    _count: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ProviderCountOutputTypeArgsSchema)]).optional(),
}).strict();
// ROLE
//------------------------------------------------------
exports.RoleIncludeSchema = zod_1.z.object({
    User: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.UserFindManyArgsSchema)]).optional(),
    _count: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.RoleCountOutputTypeArgsSchema)]).optional(),
}).strict();
exports.RoleArgsSchema = zod_1.z.object({
    select: zod_1.z.lazy(() => exports.RoleSelectSchema).optional(),
    include: zod_1.z.lazy(() => exports.RoleIncludeSchema).optional(),
}).strict();
exports.RoleCountOutputTypeArgsSchema = zod_1.z.object({
    select: zod_1.z.lazy(() => exports.RoleCountOutputTypeSelectSchema).nullish(),
}).strict();
exports.RoleCountOutputTypeSelectSchema = zod_1.z.object({
    User: zod_1.z.boolean().optional(),
}).strict();
exports.RoleSelectSchema = zod_1.z.object({
    id: zod_1.z.boolean().optional(),
    title: zod_1.z.boolean().optional(),
    description: zod_1.z.boolean().optional(),
    modules: zod_1.z.boolean().optional(),
    User: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.UserFindManyArgsSchema)]).optional(),
    _count: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.RoleCountOutputTypeArgsSchema)]).optional(),
}).strict();
// EXPENSE
//------------------------------------------------------
exports.ExpenseIncludeSchema = zod_1.z.object({
    Residence: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceArgsSchema)]).optional(),
    ExpenseType: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ExpenseTypeArgsSchema)]).optional(),
    Payment: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.PaymentArgsSchema)]).optional(),
}).strict();
exports.ExpenseArgsSchema = zod_1.z.object({
    select: zod_1.z.lazy(() => exports.ExpenseSelectSchema).optional(),
    include: zod_1.z.lazy(() => exports.ExpenseIncludeSchema).optional(),
}).strict();
exports.ExpenseSelectSchema = zod_1.z.object({
    id: zod_1.z.boolean().optional(),
    title: zod_1.z.boolean().optional(),
    residence_id: zod_1.z.boolean().optional(),
    emitingDate: zod_1.z.boolean().optional(),
    expireDate: zod_1.z.boolean().optional(),
    status: zod_1.z.boolean().optional(),
    expenseType_id: zod_1.z.boolean().optional(),
    payment_id: zod_1.z.boolean().optional(),
    Residence: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceArgsSchema)]).optional(),
    ExpenseType: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ExpenseTypeArgsSchema)]).optional(),
    Payment: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.PaymentArgsSchema)]).optional(),
}).strict();
// PAYMENT
//------------------------------------------------------
exports.PaymentIncludeSchema = zod_1.z.object({
    Expense: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ExpenseFindManyArgsSchema)]).optional(),
    User: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.UserArgsSchema)]).optional(),
    Account: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.AccountArgsSchema)]).optional(),
    Admin: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.UserArgsSchema)]).optional(),
    _count: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.PaymentCountOutputTypeArgsSchema)]).optional(),
}).strict();
exports.PaymentArgsSchema = zod_1.z.object({
    select: zod_1.z.lazy(() => exports.PaymentSelectSchema).optional(),
    include: zod_1.z.lazy(() => exports.PaymentIncludeSchema).optional(),
}).strict();
exports.PaymentCountOutputTypeArgsSchema = zod_1.z.object({
    select: zod_1.z.lazy(() => exports.PaymentCountOutputTypeSelectSchema).nullish(),
}).strict();
exports.PaymentCountOutputTypeSelectSchema = zod_1.z.object({
    Expense: zod_1.z.boolean().optional(),
}).strict();
exports.PaymentSelectSchema = zod_1.z.object({
    id: zod_1.z.boolean().optional(),
    title: zod_1.z.boolean().optional(),
    description: zod_1.z.boolean().optional(),
    registerDate: zod_1.z.boolean().optional(),
    amount: zod_1.z.boolean().optional(),
    owner_id: zod_1.z.boolean().optional(),
    voucherImage: zod_1.z.boolean().optional(),
    isEmailSend: zod_1.z.boolean().optional(),
    account_id: zod_1.z.boolean().optional(),
    created_by: zod_1.z.boolean().optional(),
    Expense: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ExpenseFindManyArgsSchema)]).optional(),
    User: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.UserArgsSchema)]).optional(),
    Account: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.AccountArgsSchema)]).optional(),
    Admin: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.UserArgsSchema)]).optional(),
    _count: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.PaymentCountOutputTypeArgsSchema)]).optional(),
}).strict();
// CASHOUT
//------------------------------------------------------
exports.CashoutIncludeSchema = zod_1.z.object({
    Provider: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ProviderArgsSchema)]).optional(),
    Account: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.AccountArgsSchema)]).optional(),
}).strict();
exports.CashoutArgsSchema = zod_1.z.object({
    select: zod_1.z.lazy(() => exports.CashoutSelectSchema).optional(),
    include: zod_1.z.lazy(() => exports.CashoutIncludeSchema).optional(),
}).strict();
exports.CashoutSelectSchema = zod_1.z.object({
    id: zod_1.z.boolean().optional(),
    title: zod_1.z.boolean().optional(),
    description: zod_1.z.boolean().optional(),
    provider_id: zod_1.z.boolean().optional(),
    amount: zod_1.z.boolean().optional(),
    billImage: zod_1.z.boolean().optional(),
    account_id: zod_1.z.boolean().optional(),
    status: zod_1.z.boolean().optional(),
    registerDate: zod_1.z.boolean().optional(),
    Provider: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ProviderArgsSchema)]).optional(),
    Account: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.AccountArgsSchema)]).optional(),
}).strict();
// EXPENSE TYPE
//------------------------------------------------------
exports.ExpenseTypeIncludeSchema = zod_1.z.object({
    ResidenceType: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceTypeArgsSchema)]).optional(),
    Expense: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ExpenseFindManyArgsSchema)]).optional(),
    _count: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ExpenseTypeCountOutputTypeArgsSchema)]).optional(),
}).strict();
exports.ExpenseTypeArgsSchema = zod_1.z.object({
    select: zod_1.z.lazy(() => exports.ExpenseTypeSelectSchema).optional(),
    include: zod_1.z.lazy(() => exports.ExpenseTypeIncludeSchema).optional(),
}).strict();
exports.ExpenseTypeCountOutputTypeArgsSchema = zod_1.z.object({
    select: zod_1.z.lazy(() => exports.ExpenseTypeCountOutputTypeSelectSchema).nullish(),
}).strict();
exports.ExpenseTypeCountOutputTypeSelectSchema = zod_1.z.object({
    Expense: zod_1.z.boolean().optional(),
}).strict();
exports.ExpenseTypeSelectSchema = zod_1.z.object({
    id: zod_1.z.boolean().optional(),
    title: zod_1.z.boolean().optional(),
    value: zod_1.z.boolean().optional(),
    residenceType_id: zod_1.z.boolean().optional(),
    ResidenceType: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceTypeArgsSchema)]).optional(),
    Expense: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ExpenseFindManyArgsSchema)]).optional(),
    _count: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ExpenseTypeCountOutputTypeArgsSchema)]).optional(),
}).strict();
// ACCOUNT
//------------------------------------------------------
exports.AccountIncludeSchema = zod_1.z.object({
    Community: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.CommunityArgsSchema)]).optional(),
    Payment: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.PaymentFindManyArgsSchema)]).optional(),
    Cashout: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.CashoutFindManyArgsSchema)]).optional(),
    _count: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.AccountCountOutputTypeArgsSchema)]).optional(),
}).strict();
exports.AccountArgsSchema = zod_1.z.object({
    select: zod_1.z.lazy(() => exports.AccountSelectSchema).optional(),
    include: zod_1.z.lazy(() => exports.AccountIncludeSchema).optional(),
}).strict();
exports.AccountCountOutputTypeArgsSchema = zod_1.z.object({
    select: zod_1.z.lazy(() => exports.AccountCountOutputTypeSelectSchema).nullish(),
}).strict();
exports.AccountCountOutputTypeSelectSchema = zod_1.z.object({
    Payment: zod_1.z.boolean().optional(),
    Cashout: zod_1.z.boolean().optional(),
}).strict();
exports.AccountSelectSchema = zod_1.z.object({
    id: zod_1.z.boolean().optional(),
    title: zod_1.z.boolean().optional(),
    description: zod_1.z.boolean().optional(),
    active: zod_1.z.boolean().optional(),
    community_id: zod_1.z.boolean().optional(),
    balance: zod_1.z.boolean().optional(),
    Community: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.CommunityArgsSchema)]).optional(),
    Payment: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.PaymentFindManyArgsSchema)]).optional(),
    Cashout: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.CashoutFindManyArgsSchema)]).optional(),
    _count: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.AccountCountOutputTypeArgsSchema)]).optional(),
}).strict();
/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////
exports.CommunityWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityWhereInputSchema), zod_1.z.lazy(() => exports.CommunityWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.CommunityWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityWhereInputSchema), zod_1.z.lazy(() => exports.CommunityWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    address: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceListRelationFilterSchema).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderListRelationFilterSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserListRelationFilterSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountListRelationFilterSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeListRelationFilterSchema).optional()
}).strict();
exports.CommunityOrderByWithRelationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    address: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceOrderByRelationAggregateInputSchema).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderOrderByRelationAggregateInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserOrderByRelationAggregateInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountOrderByRelationAggregateInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeOrderByRelationAggregateInputSchema).optional()
}).strict();
exports.CommunityWhereUniqueInputSchema = zod_1.z.object({
    id: zod_1.z.string()
})
    .and(zod_1.z.object({
    id: zod_1.z.string().optional(),
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityWhereInputSchema), zod_1.z.lazy(() => exports.CommunityWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.CommunityWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityWhereInputSchema), zod_1.z.lazy(() => exports.CommunityWhereInputSchema).array()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    address: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceListRelationFilterSchema).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderListRelationFilterSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserListRelationFilterSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountListRelationFilterSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeListRelationFilterSchema).optional()
}).strict());
exports.CommunityOrderByWithAggregationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    address: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    _count: zod_1.z.lazy(() => exports.CommunityCountOrderByAggregateInputSchema).optional(),
    _max: zod_1.z.lazy(() => exports.CommunityMaxOrderByAggregateInputSchema).optional(),
    _min: zod_1.z.lazy(() => exports.CommunityMinOrderByAggregateInputSchema).optional()
}).strict();
exports.CommunityScalarWhereWithAggregatesInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.CommunityScalarWhereWithAggregatesInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.CommunityScalarWhereWithAggregatesInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.CommunityScalarWhereWithAggregatesInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    address: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
}).strict();
exports.UserWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereInputSchema), zod_1.z.lazy(() => exports.UserWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.UserWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereInputSchema), zod_1.z.lazy(() => exports.UserWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    userName: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    email: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    password: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableFilterSchema), zod_1.z.string()]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    firstName: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    lastName: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    phone: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    isVerified: zod_1.z.union([zod_1.z.lazy(() => exports.BoolNullableFilterSchema), zod_1.z.boolean()]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.lazy(() => exports.BoolNullableFilterSchema), zod_1.z.boolean()]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    role_id: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number()]).optional(),
    residence_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableFilterSchema), zod_1.z.string()]).optional().nullable(),
    Community: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityRelationFilterSchema), zod_1.z.lazy(() => exports.CommunityWhereInputSchema)]).optional(),
    Role: zod_1.z.union([zod_1.z.lazy(() => exports.RoleNullableRelationFilterSchema), zod_1.z.lazy(() => exports.RoleWhereInputSchema)]).optional().nullable(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentListRelationFilterSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentListRelationFilterSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceListRelationFilterSchema).optional(),
    ResidentIn: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceNullableRelationFilterSchema), zod_1.z.lazy(() => exports.ResidenceWhereInputSchema)]).optional().nullable(),
}).strict();
exports.UserOrderByWithRelationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    userName: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    email: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    password: zod_1.z.union([zod_1.z.lazy(() => exports.SortOrderSchema), zod_1.z.lazy(() => exports.SortOrderInputSchema)]).optional(),
    identification: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    firstName: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    lastName: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    phone: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    isVerified: zod_1.z.union([zod_1.z.lazy(() => exports.SortOrderSchema), zod_1.z.lazy(() => exports.SortOrderInputSchema)]).optional(),
    isActive: zod_1.z.union([zod_1.z.lazy(() => exports.SortOrderSchema), zod_1.z.lazy(() => exports.SortOrderInputSchema)]).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    role_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residence_id: zod_1.z.union([zod_1.z.lazy(() => exports.SortOrderSchema), zod_1.z.lazy(() => exports.SortOrderInputSchema)]).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityOrderByWithRelationInputSchema).optional(),
    Role: zod_1.z.lazy(() => exports.RoleOrderByWithRelationInputSchema).optional(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentOrderByRelationAggregateInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentOrderByRelationAggregateInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceOrderByRelationAggregateInputSchema).optional(),
    ResidentIn: zod_1.z.lazy(() => exports.ResidenceOrderByWithRelationInputSchema).optional()
}).strict();
exports.UserWhereUniqueInputSchema = zod_1.z.union([
    zod_1.z.object({
        id: zod_1.z.string(),
        email: zod_1.z.string()
    }),
    zod_1.z.object({
        id: zod_1.z.string(),
    }),
    zod_1.z.object({
        email: zod_1.z.string(),
    }),
])
    .and(zod_1.z.object({
    id: zod_1.z.string().optional(),
    email: zod_1.z.string().optional(),
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereInputSchema), zod_1.z.lazy(() => exports.UserWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.UserWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereInputSchema), zod_1.z.lazy(() => exports.UserWhereInputSchema).array()]).optional(),
    userName: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    password: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableFilterSchema), zod_1.z.string()]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    firstName: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    lastName: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    phone: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    isVerified: zod_1.z.union([zod_1.z.lazy(() => exports.BoolNullableFilterSchema), zod_1.z.boolean()]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.lazy(() => exports.BoolNullableFilterSchema), zod_1.z.boolean()]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    role_id: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number().int()]).optional(),
    residence_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableFilterSchema), zod_1.z.string()]).optional().nullable(),
    Community: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityRelationFilterSchema), zod_1.z.lazy(() => exports.CommunityWhereInputSchema)]).optional(),
    Role: zod_1.z.union([zod_1.z.lazy(() => exports.RoleNullableRelationFilterSchema), zod_1.z.lazy(() => exports.RoleWhereInputSchema)]).optional().nullable(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentListRelationFilterSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentListRelationFilterSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceListRelationFilterSchema).optional(),
    ResidentIn: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceNullableRelationFilterSchema), zod_1.z.lazy(() => exports.ResidenceWhereInputSchema)]).optional().nullable(),
}).strict());
exports.UserOrderByWithAggregationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    userName: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    email: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    password: zod_1.z.union([zod_1.z.lazy(() => exports.SortOrderSchema), zod_1.z.lazy(() => exports.SortOrderInputSchema)]).optional(),
    identification: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    firstName: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    lastName: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    phone: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    isVerified: zod_1.z.union([zod_1.z.lazy(() => exports.SortOrderSchema), zod_1.z.lazy(() => exports.SortOrderInputSchema)]).optional(),
    isActive: zod_1.z.union([zod_1.z.lazy(() => exports.SortOrderSchema), zod_1.z.lazy(() => exports.SortOrderInputSchema)]).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    role_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residence_id: zod_1.z.union([zod_1.z.lazy(() => exports.SortOrderSchema), zod_1.z.lazy(() => exports.SortOrderInputSchema)]).optional(),
    _count: zod_1.z.lazy(() => exports.UserCountOrderByAggregateInputSchema).optional(),
    _avg: zod_1.z.lazy(() => exports.UserAvgOrderByAggregateInputSchema).optional(),
    _max: zod_1.z.lazy(() => exports.UserMaxOrderByAggregateInputSchema).optional(),
    _min: zod_1.z.lazy(() => exports.UserMinOrderByAggregateInputSchema).optional(),
    _sum: zod_1.z.lazy(() => exports.UserSumOrderByAggregateInputSchema).optional()
}).strict();
exports.UserScalarWhereWithAggregatesInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.UserScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.UserScalarWhereWithAggregatesInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.UserScalarWhereWithAggregatesInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.UserScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.UserScalarWhereWithAggregatesInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    userName: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    email: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    password: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableWithAggregatesFilterSchema), zod_1.z.string()]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    firstName: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    lastName: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    phone: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    isVerified: zod_1.z.union([zod_1.z.lazy(() => exports.BoolNullableWithAggregatesFilterSchema), zod_1.z.boolean()]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.lazy(() => exports.BoolNullableWithAggregatesFilterSchema), zod_1.z.boolean()]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    role_id: zod_1.z.union([zod_1.z.lazy(() => exports.IntWithAggregatesFilterSchema), zod_1.z.number()]).optional(),
    residence_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableWithAggregatesFilterSchema), zod_1.z.string()]).optional().nullable(),
}).strict();
exports.ResidenceWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ResidenceWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    owner_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableFilterSchema), zod_1.z.string()]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    contacts: zod_1.z.lazy(() => exports.JsonNullableFilterSchema).optional(),
    residenceType_id: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number()]).optional(),
    Owner: zod_1.z.union([zod_1.z.lazy(() => exports.UserNullableRelationFilterSchema), zod_1.z.lazy(() => exports.UserWhereInputSchema)]).optional().nullable(),
    Community: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityRelationFilterSchema), zod_1.z.lazy(() => exports.CommunityWhereInputSchema)]).optional(),
    ResidenceType: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeRelationFilterSchema), zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema)]).optional(),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotListRelationFilterSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseListRelationFilterSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserListRelationFilterSchema).optional()
}).strict();
exports.ResidenceOrderByWithRelationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    owner_id: zod_1.z.union([zod_1.z.lazy(() => exports.SortOrderSchema), zod_1.z.lazy(() => exports.SortOrderInputSchema)]).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.SortOrderSchema), zod_1.z.lazy(() => exports.SortOrderInputSchema)]).optional(),
    residenceType_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    Owner: zod_1.z.lazy(() => exports.UserOrderByWithRelationInputSchema).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityOrderByWithRelationInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeOrderByWithRelationInputSchema).optional(),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotOrderByRelationAggregateInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseOrderByRelationAggregateInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserOrderByRelationAggregateInputSchema).optional()
}).strict();
exports.ResidenceWhereUniqueInputSchema = zod_1.z.object({
    id: zod_1.z.string()
})
    .and(zod_1.z.object({
    id: zod_1.z.string().optional(),
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ResidenceWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereInputSchema).array()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    owner_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableFilterSchema), zod_1.z.string()]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    contacts: zod_1.z.lazy(() => exports.JsonNullableFilterSchema).optional(),
    residenceType_id: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number().int()]).optional(),
    Owner: zod_1.z.union([zod_1.z.lazy(() => exports.UserNullableRelationFilterSchema), zod_1.z.lazy(() => exports.UserWhereInputSchema)]).optional().nullable(),
    Community: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityRelationFilterSchema), zod_1.z.lazy(() => exports.CommunityWhereInputSchema)]).optional(),
    ResidenceType: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeRelationFilterSchema), zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema)]).optional(),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotListRelationFilterSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseListRelationFilterSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserListRelationFilterSchema).optional()
}).strict());
exports.ResidenceOrderByWithAggregationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    owner_id: zod_1.z.union([zod_1.z.lazy(() => exports.SortOrderSchema), zod_1.z.lazy(() => exports.SortOrderInputSchema)]).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.SortOrderSchema), zod_1.z.lazy(() => exports.SortOrderInputSchema)]).optional(),
    residenceType_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    _count: zod_1.z.lazy(() => exports.ResidenceCountOrderByAggregateInputSchema).optional(),
    _avg: zod_1.z.lazy(() => exports.ResidenceAvgOrderByAggregateInputSchema).optional(),
    _max: zod_1.z.lazy(() => exports.ResidenceMaxOrderByAggregateInputSchema).optional(),
    _min: zod_1.z.lazy(() => exports.ResidenceMinOrderByAggregateInputSchema).optional(),
    _sum: zod_1.z.lazy(() => exports.ResidenceSumOrderByAggregateInputSchema).optional()
}).strict();
exports.ResidenceScalarWhereWithAggregatesInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.ResidenceScalarWhereWithAggregatesInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ResidenceScalarWhereWithAggregatesInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.ResidenceScalarWhereWithAggregatesInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    owner_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableWithAggregatesFilterSchema), zod_1.z.string()]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    contacts: zod_1.z.lazy(() => exports.JsonNullableWithAggregatesFilterSchema).optional(),
    residenceType_id: zod_1.z.union([zod_1.z.lazy(() => exports.IntWithAggregatesFilterSchema), zod_1.z.number()]).optional(),
}).strict();
exports.ParkingSlotWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotWhereInputSchema), zod_1.z.lazy(() => exports.ParkingSlotWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ParkingSlotWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotWhereInputSchema), zod_1.z.lazy(() => exports.ParkingSlotWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    number: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number()]).optional(),
    residence_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    Residence: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceRelationFilterSchema), zod_1.z.lazy(() => exports.ResidenceWhereInputSchema)]).optional(),
}).strict();
exports.ParkingSlotOrderByWithRelationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    number: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residence_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceOrderByWithRelationInputSchema).optional()
}).strict();
exports.ParkingSlotWhereUniqueInputSchema = zod_1.z.object({
    id: zod_1.z.string()
})
    .and(zod_1.z.object({
    id: zod_1.z.string().optional(),
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotWhereInputSchema), zod_1.z.lazy(() => exports.ParkingSlotWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ParkingSlotWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotWhereInputSchema), zod_1.z.lazy(() => exports.ParkingSlotWhereInputSchema).array()]).optional(),
    number: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number().int()]).optional(),
    residence_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    Residence: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceRelationFilterSchema), zod_1.z.lazy(() => exports.ResidenceWhereInputSchema)]).optional(),
}).strict());
exports.ParkingSlotOrderByWithAggregationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    number: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residence_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    _count: zod_1.z.lazy(() => exports.ParkingSlotCountOrderByAggregateInputSchema).optional(),
    _avg: zod_1.z.lazy(() => exports.ParkingSlotAvgOrderByAggregateInputSchema).optional(),
    _max: zod_1.z.lazy(() => exports.ParkingSlotMaxOrderByAggregateInputSchema).optional(),
    _min: zod_1.z.lazy(() => exports.ParkingSlotMinOrderByAggregateInputSchema).optional(),
    _sum: zod_1.z.lazy(() => exports.ParkingSlotSumOrderByAggregateInputSchema).optional()
}).strict();
exports.ParkingSlotScalarWhereWithAggregatesInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.ParkingSlotScalarWhereWithAggregatesInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ParkingSlotScalarWhereWithAggregatesInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.ParkingSlotScalarWhereWithAggregatesInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    number: zod_1.z.union([zod_1.z.lazy(() => exports.IntWithAggregatesFilterSchema), zod_1.z.number()]).optional(),
    residence_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
}).strict();
exports.ResidenceTypeWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    community_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceListRelationFilterSchema).optional(),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeListRelationFilterSchema).optional(),
    Community: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityRelationFilterSchema), zod_1.z.lazy(() => exports.CommunityWhereInputSchema)]).optional(),
}).strict();
exports.ResidenceTypeOrderByWithRelationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceOrderByRelationAggregateInputSchema).optional(),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeOrderByRelationAggregateInputSchema).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityOrderByWithRelationInputSchema).optional()
}).strict();
exports.ResidenceTypeWhereUniqueInputSchema = zod_1.z.object({
    id: zod_1.z.number().int()
})
    .and(zod_1.z.object({
    id: zod_1.z.number().int().optional(),
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema).array()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    community_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceListRelationFilterSchema).optional(),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeListRelationFilterSchema).optional(),
    Community: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityRelationFilterSchema), zod_1.z.lazy(() => exports.CommunityWhereInputSchema)]).optional(),
}).strict());
exports.ResidenceTypeOrderByWithAggregationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    _count: zod_1.z.lazy(() => exports.ResidenceTypeCountOrderByAggregateInputSchema).optional(),
    _avg: zod_1.z.lazy(() => exports.ResidenceTypeAvgOrderByAggregateInputSchema).optional(),
    _max: zod_1.z.lazy(() => exports.ResidenceTypeMaxOrderByAggregateInputSchema).optional(),
    _min: zod_1.z.lazy(() => exports.ResidenceTypeMinOrderByAggregateInputSchema).optional(),
    _sum: zod_1.z.lazy(() => exports.ResidenceTypeSumOrderByAggregateInputSchema).optional()
}).strict();
exports.ResidenceTypeScalarWhereWithAggregatesInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeScalarWhereWithAggregatesInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ResidenceTypeScalarWhereWithAggregatesInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeScalarWhereWithAggregatesInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.IntWithAggregatesFilterSchema), zod_1.z.number()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    community_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
}).strict();
exports.ProviderWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderWhereInputSchema), zod_1.z.lazy(() => exports.ProviderWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ProviderWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderWhereInputSchema), zod_1.z.lazy(() => exports.ProviderWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    contactName: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    phone: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    email: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableFilterSchema), zod_1.z.string()]).optional().nullable(),
    address: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableFilterSchema), zod_1.z.string()]).optional().nullable(),
    website: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableFilterSchema), zod_1.z.string()]).optional().nullable(),
    active: zod_1.z.union([zod_1.z.lazy(() => exports.BoolFilterSchema), zod_1.z.boolean()]).optional(),
    community_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    Community: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityRelationFilterSchema), zod_1.z.lazy(() => exports.CommunityWhereInputSchema)]).optional(),
    Cashout: zod_1.z.lazy(() => exports.CashoutListRelationFilterSchema).optional()
}).strict();
exports.ProviderOrderByWithRelationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    contactName: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    phone: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    email: zod_1.z.union([zod_1.z.lazy(() => exports.SortOrderSchema), zod_1.z.lazy(() => exports.SortOrderInputSchema)]).optional(),
    address: zod_1.z.union([zod_1.z.lazy(() => exports.SortOrderSchema), zod_1.z.lazy(() => exports.SortOrderInputSchema)]).optional(),
    website: zod_1.z.union([zod_1.z.lazy(() => exports.SortOrderSchema), zod_1.z.lazy(() => exports.SortOrderInputSchema)]).optional(),
    active: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityOrderByWithRelationInputSchema).optional(),
    Cashout: zod_1.z.lazy(() => exports.CashoutOrderByRelationAggregateInputSchema).optional()
}).strict();
exports.ProviderWhereUniqueInputSchema = zod_1.z.object({
    id: zod_1.z.string()
})
    .and(zod_1.z.object({
    id: zod_1.z.string().optional(),
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderWhereInputSchema), zod_1.z.lazy(() => exports.ProviderWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ProviderWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderWhereInputSchema), zod_1.z.lazy(() => exports.ProviderWhereInputSchema).array()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    contactName: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    phone: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    email: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableFilterSchema), zod_1.z.string()]).optional().nullable(),
    address: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableFilterSchema), zod_1.z.string()]).optional().nullable(),
    website: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableFilterSchema), zod_1.z.string()]).optional().nullable(),
    active: zod_1.z.union([zod_1.z.lazy(() => exports.BoolFilterSchema), zod_1.z.boolean()]).optional(),
    community_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    Community: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityRelationFilterSchema), zod_1.z.lazy(() => exports.CommunityWhereInputSchema)]).optional(),
    Cashout: zod_1.z.lazy(() => exports.CashoutListRelationFilterSchema).optional()
}).strict());
exports.ProviderOrderByWithAggregationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    contactName: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    phone: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    email: zod_1.z.union([zod_1.z.lazy(() => exports.SortOrderSchema), zod_1.z.lazy(() => exports.SortOrderInputSchema)]).optional(),
    address: zod_1.z.union([zod_1.z.lazy(() => exports.SortOrderSchema), zod_1.z.lazy(() => exports.SortOrderInputSchema)]).optional(),
    website: zod_1.z.union([zod_1.z.lazy(() => exports.SortOrderSchema), zod_1.z.lazy(() => exports.SortOrderInputSchema)]).optional(),
    active: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    _count: zod_1.z.lazy(() => exports.ProviderCountOrderByAggregateInputSchema).optional(),
    _max: zod_1.z.lazy(() => exports.ProviderMaxOrderByAggregateInputSchema).optional(),
    _min: zod_1.z.lazy(() => exports.ProviderMinOrderByAggregateInputSchema).optional()
}).strict();
exports.ProviderScalarWhereWithAggregatesInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.ProviderScalarWhereWithAggregatesInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ProviderScalarWhereWithAggregatesInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.ProviderScalarWhereWithAggregatesInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    contactName: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    phone: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    email: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableWithAggregatesFilterSchema), zod_1.z.string()]).optional().nullable(),
    address: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableWithAggregatesFilterSchema), zod_1.z.string()]).optional().nullable(),
    website: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableWithAggregatesFilterSchema), zod_1.z.string()]).optional().nullable(),
    active: zod_1.z.union([zod_1.z.lazy(() => exports.BoolWithAggregatesFilterSchema), zod_1.z.boolean()]).optional(),
    community_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
}).strict();
exports.RoleWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.RoleWhereInputSchema), zod_1.z.lazy(() => exports.RoleWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.RoleWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.RoleWhereInputSchema), zod_1.z.lazy(() => exports.RoleWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    modules: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    User: zod_1.z.lazy(() => exports.UserListRelationFilterSchema).optional()
}).strict();
exports.RoleOrderByWithRelationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    modules: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserOrderByRelationAggregateInputSchema).optional()
}).strict();
exports.RoleWhereUniqueInputSchema = zod_1.z.object({
    id: zod_1.z.number().int()
})
    .and(zod_1.z.object({
    id: zod_1.z.number().int().optional(),
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.RoleWhereInputSchema), zod_1.z.lazy(() => exports.RoleWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.RoleWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.RoleWhereInputSchema), zod_1.z.lazy(() => exports.RoleWhereInputSchema).array()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    modules: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    User: zod_1.z.lazy(() => exports.UserListRelationFilterSchema).optional()
}).strict());
exports.RoleOrderByWithAggregationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    modules: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    _count: zod_1.z.lazy(() => exports.RoleCountOrderByAggregateInputSchema).optional(),
    _avg: zod_1.z.lazy(() => exports.RoleAvgOrderByAggregateInputSchema).optional(),
    _max: zod_1.z.lazy(() => exports.RoleMaxOrderByAggregateInputSchema).optional(),
    _min: zod_1.z.lazy(() => exports.RoleMinOrderByAggregateInputSchema).optional(),
    _sum: zod_1.z.lazy(() => exports.RoleSumOrderByAggregateInputSchema).optional()
}).strict();
exports.RoleScalarWhereWithAggregatesInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.RoleScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.RoleScalarWhereWithAggregatesInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.RoleScalarWhereWithAggregatesInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.RoleScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.RoleScalarWhereWithAggregatesInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.IntWithAggregatesFilterSchema), zod_1.z.number()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    modules: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
}).strict();
exports.ExpenseWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ExpenseWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    residence_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    emitingDate: zod_1.z.union([zod_1.z.lazy(() => exports.DateTimeFilterSchema), zod_1.z.coerce.date()]).optional(),
    expireDate: zod_1.z.union([zod_1.z.lazy(() => exports.DateTimeFilterSchema), zod_1.z.coerce.date()]).optional(),
    status: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    expenseType_id: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number()]).optional(),
    payment_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    Residence: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceRelationFilterSchema), zod_1.z.lazy(() => exports.ResidenceWhereInputSchema)]).optional(),
    ExpenseType: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeRelationFilterSchema), zod_1.z.lazy(() => exports.ExpenseTypeWhereInputSchema)]).optional(),
    Payment: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentRelationFilterSchema), zod_1.z.lazy(() => exports.PaymentWhereInputSchema)]).optional(),
}).strict();
exports.ExpenseOrderByWithRelationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residence_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    emitingDate: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    expireDate: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    status: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    expenseType_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    payment_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceOrderByWithRelationInputSchema).optional(),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeOrderByWithRelationInputSchema).optional(),
    Payment: zod_1.z.lazy(() => exports.PaymentOrderByWithRelationInputSchema).optional()
}).strict();
exports.ExpenseWhereUniqueInputSchema = zod_1.z.object({
    id: zod_1.z.string()
})
    .and(zod_1.z.object({
    id: zod_1.z.string().optional(),
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ExpenseWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereInputSchema).array()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    residence_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    emitingDate: zod_1.z.union([zod_1.z.lazy(() => exports.DateTimeFilterSchema), zod_1.z.coerce.date()]).optional(),
    expireDate: zod_1.z.union([zod_1.z.lazy(() => exports.DateTimeFilterSchema), zod_1.z.coerce.date()]).optional(),
    status: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    expenseType_id: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number().int()]).optional(),
    payment_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    Residence: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceRelationFilterSchema), zod_1.z.lazy(() => exports.ResidenceWhereInputSchema)]).optional(),
    ExpenseType: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeRelationFilterSchema), zod_1.z.lazy(() => exports.ExpenseTypeWhereInputSchema)]).optional(),
    Payment: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentRelationFilterSchema), zod_1.z.lazy(() => exports.PaymentWhereInputSchema)]).optional(),
}).strict());
exports.ExpenseOrderByWithAggregationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residence_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    emitingDate: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    expireDate: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    status: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    expenseType_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    payment_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    _count: zod_1.z.lazy(() => exports.ExpenseCountOrderByAggregateInputSchema).optional(),
    _avg: zod_1.z.lazy(() => exports.ExpenseAvgOrderByAggregateInputSchema).optional(),
    _max: zod_1.z.lazy(() => exports.ExpenseMaxOrderByAggregateInputSchema).optional(),
    _min: zod_1.z.lazy(() => exports.ExpenseMinOrderByAggregateInputSchema).optional(),
    _sum: zod_1.z.lazy(() => exports.ExpenseSumOrderByAggregateInputSchema).optional()
}).strict();
exports.ExpenseScalarWhereWithAggregatesInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.ExpenseScalarWhereWithAggregatesInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ExpenseScalarWhereWithAggregatesInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.ExpenseScalarWhereWithAggregatesInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    residence_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    emitingDate: zod_1.z.union([zod_1.z.lazy(() => exports.DateTimeWithAggregatesFilterSchema), zod_1.z.coerce.date()]).optional(),
    expireDate: zod_1.z.union([zod_1.z.lazy(() => exports.DateTimeWithAggregatesFilterSchema), zod_1.z.coerce.date()]).optional(),
    status: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    expenseType_id: zod_1.z.union([zod_1.z.lazy(() => exports.IntWithAggregatesFilterSchema), zod_1.z.number()]).optional(),
    payment_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
}).strict();
exports.PaymentWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereInputSchema), zod_1.z.lazy(() => exports.PaymentWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.PaymentWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereInputSchema), zod_1.z.lazy(() => exports.PaymentWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    registerDate: zod_1.z.union([zod_1.z.lazy(() => exports.DateTimeFilterSchema), zod_1.z.coerce.date()]).optional(),
    amount: zod_1.z.union([zod_1.z.lazy(() => exports.DecimalFilterSchema), zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' })]).optional(),
    owner_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    voucherImage: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    isEmailSend: zod_1.z.union([zod_1.z.lazy(() => exports.BoolFilterSchema), zod_1.z.boolean()]).optional(),
    account_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    created_by: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseListRelationFilterSchema).optional(),
    User: zod_1.z.union([zod_1.z.lazy(() => exports.UserRelationFilterSchema), zod_1.z.lazy(() => exports.UserWhereInputSchema)]).optional(),
    Account: zod_1.z.union([zod_1.z.lazy(() => exports.AccountRelationFilterSchema), zod_1.z.lazy(() => exports.AccountWhereInputSchema)]).optional(),
    Admin: zod_1.z.union([zod_1.z.lazy(() => exports.UserRelationFilterSchema), zod_1.z.lazy(() => exports.UserWhereInputSchema)]).optional(),
}).strict();
exports.PaymentOrderByWithRelationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    registerDate: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    amount: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    owner_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    voucherImage: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    isEmailSend: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    account_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    created_by: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseOrderByRelationAggregateInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserOrderByWithRelationInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountOrderByWithRelationInputSchema).optional(),
    Admin: zod_1.z.lazy(() => exports.UserOrderByWithRelationInputSchema).optional()
}).strict();
exports.PaymentWhereUniqueInputSchema = zod_1.z.object({
    id: zod_1.z.string()
})
    .and(zod_1.z.object({
    id: zod_1.z.string().optional(),
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereInputSchema), zod_1.z.lazy(() => exports.PaymentWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.PaymentWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereInputSchema), zod_1.z.lazy(() => exports.PaymentWhereInputSchema).array()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    registerDate: zod_1.z.union([zod_1.z.lazy(() => exports.DateTimeFilterSchema), zod_1.z.coerce.date()]).optional(),
    amount: zod_1.z.union([zod_1.z.lazy(() => exports.DecimalFilterSchema), zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' })]).optional(),
    owner_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    voucherImage: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    isEmailSend: zod_1.z.union([zod_1.z.lazy(() => exports.BoolFilterSchema), zod_1.z.boolean()]).optional(),
    account_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    created_by: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseListRelationFilterSchema).optional(),
    User: zod_1.z.union([zod_1.z.lazy(() => exports.UserRelationFilterSchema), zod_1.z.lazy(() => exports.UserWhereInputSchema)]).optional(),
    Account: zod_1.z.union([zod_1.z.lazy(() => exports.AccountRelationFilterSchema), zod_1.z.lazy(() => exports.AccountWhereInputSchema)]).optional(),
    Admin: zod_1.z.union([zod_1.z.lazy(() => exports.UserRelationFilterSchema), zod_1.z.lazy(() => exports.UserWhereInputSchema)]).optional(),
}).strict());
exports.PaymentOrderByWithAggregationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    registerDate: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    amount: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    owner_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    voucherImage: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    isEmailSend: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    account_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    created_by: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    _count: zod_1.z.lazy(() => exports.PaymentCountOrderByAggregateInputSchema).optional(),
    _avg: zod_1.z.lazy(() => exports.PaymentAvgOrderByAggregateInputSchema).optional(),
    _max: zod_1.z.lazy(() => exports.PaymentMaxOrderByAggregateInputSchema).optional(),
    _min: zod_1.z.lazy(() => exports.PaymentMinOrderByAggregateInputSchema).optional(),
    _sum: zod_1.z.lazy(() => exports.PaymentSumOrderByAggregateInputSchema).optional()
}).strict();
exports.PaymentScalarWhereWithAggregatesInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.PaymentScalarWhereWithAggregatesInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.PaymentScalarWhereWithAggregatesInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.PaymentScalarWhereWithAggregatesInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    registerDate: zod_1.z.union([zod_1.z.lazy(() => exports.DateTimeWithAggregatesFilterSchema), zod_1.z.coerce.date()]).optional(),
    amount: zod_1.z.union([zod_1.z.lazy(() => exports.DecimalWithAggregatesFilterSchema), zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' })]).optional(),
    owner_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    voucherImage: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    isEmailSend: zod_1.z.union([zod_1.z.lazy(() => exports.BoolWithAggregatesFilterSchema), zod_1.z.boolean()]).optional(),
    account_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    created_by: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
}).strict();
exports.CashoutWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereInputSchema), zod_1.z.lazy(() => exports.CashoutWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.CashoutWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereInputSchema), zod_1.z.lazy(() => exports.CashoutWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    provider_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    amount: zod_1.z.union([zod_1.z.lazy(() => exports.DecimalFilterSchema), zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' })]).optional(),
    billImage: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    account_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    status: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    registerDate: zod_1.z.union([zod_1.z.lazy(() => exports.DateTimeFilterSchema), zod_1.z.coerce.date()]).optional(),
    Provider: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderRelationFilterSchema), zod_1.z.lazy(() => exports.ProviderWhereInputSchema)]).optional(),
    Account: zod_1.z.union([zod_1.z.lazy(() => exports.AccountRelationFilterSchema), zod_1.z.lazy(() => exports.AccountWhereInputSchema)]).optional(),
}).strict();
exports.CashoutOrderByWithRelationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    provider_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    amount: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    billImage: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    account_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    status: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    registerDate: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderOrderByWithRelationInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountOrderByWithRelationInputSchema).optional()
}).strict();
exports.CashoutWhereUniqueInputSchema = zod_1.z.object({
    id: zod_1.z.string()
})
    .and(zod_1.z.object({
    id: zod_1.z.string().optional(),
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereInputSchema), zod_1.z.lazy(() => exports.CashoutWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.CashoutWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereInputSchema), zod_1.z.lazy(() => exports.CashoutWhereInputSchema).array()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    provider_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    amount: zod_1.z.union([zod_1.z.lazy(() => exports.DecimalFilterSchema), zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' })]).optional(),
    billImage: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    account_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    status: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    registerDate: zod_1.z.union([zod_1.z.lazy(() => exports.DateTimeFilterSchema), zod_1.z.coerce.date()]).optional(),
    Provider: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderRelationFilterSchema), zod_1.z.lazy(() => exports.ProviderWhereInputSchema)]).optional(),
    Account: zod_1.z.union([zod_1.z.lazy(() => exports.AccountRelationFilterSchema), zod_1.z.lazy(() => exports.AccountWhereInputSchema)]).optional(),
}).strict());
exports.CashoutOrderByWithAggregationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    provider_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    amount: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    billImage: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    account_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    status: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    registerDate: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    _count: zod_1.z.lazy(() => exports.CashoutCountOrderByAggregateInputSchema).optional(),
    _avg: zod_1.z.lazy(() => exports.CashoutAvgOrderByAggregateInputSchema).optional(),
    _max: zod_1.z.lazy(() => exports.CashoutMaxOrderByAggregateInputSchema).optional(),
    _min: zod_1.z.lazy(() => exports.CashoutMinOrderByAggregateInputSchema).optional(),
    _sum: zod_1.z.lazy(() => exports.CashoutSumOrderByAggregateInputSchema).optional()
}).strict();
exports.CashoutScalarWhereWithAggregatesInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.CashoutScalarWhereWithAggregatesInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.CashoutScalarWhereWithAggregatesInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.CashoutScalarWhereWithAggregatesInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    provider_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    amount: zod_1.z.union([zod_1.z.lazy(() => exports.DecimalWithAggregatesFilterSchema), zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' })]).optional(),
    billImage: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    account_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    status: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    registerDate: zod_1.z.union([zod_1.z.lazy(() => exports.DateTimeWithAggregatesFilterSchema), zod_1.z.coerce.date()]).optional(),
}).strict();
exports.ExpenseTypeWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeWhereInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ExpenseTypeWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeWhereInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    value: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number()]).optional(),
    residenceType_id: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number()]).optional(),
    ResidenceType: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeRelationFilterSchema), zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema)]).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseListRelationFilterSchema).optional()
}).strict();
exports.ExpenseTypeOrderByWithRelationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    value: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residenceType_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeOrderByWithRelationInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseOrderByRelationAggregateInputSchema).optional()
}).strict();
exports.ExpenseTypeWhereUniqueInputSchema = zod_1.z.object({
    id: zod_1.z.number().int()
})
    .and(zod_1.z.object({
    id: zod_1.z.number().int().optional(),
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeWhereInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ExpenseTypeWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeWhereInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeWhereInputSchema).array()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    value: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number().int()]).optional(),
    residenceType_id: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number().int()]).optional(),
    ResidenceType: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeRelationFilterSchema), zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema)]).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseListRelationFilterSchema).optional()
}).strict());
exports.ExpenseTypeOrderByWithAggregationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    value: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residenceType_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    _count: zod_1.z.lazy(() => exports.ExpenseTypeCountOrderByAggregateInputSchema).optional(),
    _avg: zod_1.z.lazy(() => exports.ExpenseTypeAvgOrderByAggregateInputSchema).optional(),
    _max: zod_1.z.lazy(() => exports.ExpenseTypeMaxOrderByAggregateInputSchema).optional(),
    _min: zod_1.z.lazy(() => exports.ExpenseTypeMinOrderByAggregateInputSchema).optional(),
    _sum: zod_1.z.lazy(() => exports.ExpenseTypeSumOrderByAggregateInputSchema).optional()
}).strict();
exports.ExpenseTypeScalarWhereWithAggregatesInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeScalarWhereWithAggregatesInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ExpenseTypeScalarWhereWithAggregatesInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeScalarWhereWithAggregatesInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.IntWithAggregatesFilterSchema), zod_1.z.number()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    value: zod_1.z.union([zod_1.z.lazy(() => exports.IntWithAggregatesFilterSchema), zod_1.z.number()]).optional(),
    residenceType_id: zod_1.z.union([zod_1.z.lazy(() => exports.IntWithAggregatesFilterSchema), zod_1.z.number()]).optional(),
}).strict();
exports.AccountWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.AccountWhereInputSchema), zod_1.z.lazy(() => exports.AccountWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.AccountWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.AccountWhereInputSchema), zod_1.z.lazy(() => exports.AccountWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    active: zod_1.z.union([zod_1.z.lazy(() => exports.BoolFilterSchema), zod_1.z.boolean()]).optional(),
    community_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    balance: zod_1.z.union([zod_1.z.lazy(() => exports.BigIntFilterSchema), zod_1.z.bigint()]).optional(),
    Community: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityRelationFilterSchema), zod_1.z.lazy(() => exports.CommunityWhereInputSchema)]).optional(),
    Payment: zod_1.z.lazy(() => exports.PaymentListRelationFilterSchema).optional(),
    Cashout: zod_1.z.lazy(() => exports.CashoutListRelationFilterSchema).optional()
}).strict();
exports.AccountOrderByWithRelationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    active: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    balance: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityOrderByWithRelationInputSchema).optional(),
    Payment: zod_1.z.lazy(() => exports.PaymentOrderByRelationAggregateInputSchema).optional(),
    Cashout: zod_1.z.lazy(() => exports.CashoutOrderByRelationAggregateInputSchema).optional()
}).strict();
exports.AccountWhereUniqueInputSchema = zod_1.z.object({
    id: zod_1.z.string()
})
    .and(zod_1.z.object({
    id: zod_1.z.string().optional(),
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.AccountWhereInputSchema), zod_1.z.lazy(() => exports.AccountWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.AccountWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.AccountWhereInputSchema), zod_1.z.lazy(() => exports.AccountWhereInputSchema).array()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    active: zod_1.z.union([zod_1.z.lazy(() => exports.BoolFilterSchema), zod_1.z.boolean()]).optional(),
    community_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    balance: zod_1.z.union([zod_1.z.lazy(() => exports.BigIntFilterSchema), zod_1.z.bigint()]).optional(),
    Community: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityRelationFilterSchema), zod_1.z.lazy(() => exports.CommunityWhereInputSchema)]).optional(),
    Payment: zod_1.z.lazy(() => exports.PaymentListRelationFilterSchema).optional(),
    Cashout: zod_1.z.lazy(() => exports.CashoutListRelationFilterSchema).optional()
}).strict());
exports.AccountOrderByWithAggregationInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    active: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    balance: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    _count: zod_1.z.lazy(() => exports.AccountCountOrderByAggregateInputSchema).optional(),
    _avg: zod_1.z.lazy(() => exports.AccountAvgOrderByAggregateInputSchema).optional(),
    _max: zod_1.z.lazy(() => exports.AccountMaxOrderByAggregateInputSchema).optional(),
    _min: zod_1.z.lazy(() => exports.AccountMinOrderByAggregateInputSchema).optional(),
    _sum: zod_1.z.lazy(() => exports.AccountSumOrderByAggregateInputSchema).optional()
}).strict();
exports.AccountScalarWhereWithAggregatesInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.AccountScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.AccountScalarWhereWithAggregatesInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.AccountScalarWhereWithAggregatesInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.AccountScalarWhereWithAggregatesInputSchema), zod_1.z.lazy(() => exports.AccountScalarWhereWithAggregatesInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    active: zod_1.z.union([zod_1.z.lazy(() => exports.BoolWithAggregatesFilterSchema), zod_1.z.boolean()]).optional(),
    community_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringWithAggregatesFilterSchema), zod_1.z.string()]).optional(),
    balance: zod_1.z.union([zod_1.z.lazy(() => exports.BigIntWithAggregatesFilterSchema), zod_1.z.bigint()]).optional(),
}).strict();
exports.CommunityCreateInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    address: zod_1.z.string(),
    Residence: zod_1.z.lazy(() => exports.ResidenceCreateNestedManyWithoutCommunityInputSchema).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderCreateNestedManyWithoutCommunityInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserCreateNestedManyWithoutCommunityInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountCreateNestedManyWithoutCommunityInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeCreateNestedManyWithoutCommunityInputSchema).optional()
}).strict();
exports.CommunityUncheckedCreateInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    address: zod_1.z.string(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedCreateNestedManyWithoutCommunityInputSchema).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderUncheckedCreateNestedManyWithoutCommunityInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserUncheckedCreateNestedManyWithoutCommunityInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountUncheckedCreateNestedManyWithoutCommunityInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateNestedManyWithoutCommunityInputSchema).optional()
}).strict();
exports.CommunityUpdateInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUpdateManyWithoutCommunityNestedInputSchema).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderUpdateManyWithoutCommunityNestedInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserUpdateManyWithoutCommunityNestedInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountUpdateManyWithoutCommunityNestedInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUpdateManyWithoutCommunityNestedInputSchema).optional()
}).strict();
exports.CommunityUncheckedUpdateInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional()
}).strict();
exports.CommunityCreateManyInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    address: zod_1.z.string()
}).strict();
exports.CommunityUpdateManyMutationInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.CommunityUncheckedUpdateManyInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.UserCreateInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    userName: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string().optional().nullable(),
    identification: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    phone: zod_1.z.string(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    Community: zod_1.z.lazy(() => exports.CommunityCreateNestedOneWithoutUserInputSchema).optional(),
    Role: zod_1.z.lazy(() => exports.RoleCreateNestedOneWithoutUserInputSchema).optional(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentCreateNestedManyWithoutAdminInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentCreateNestedManyWithoutUserInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceCreateNestedManyWithoutOwnerInputSchema).optional(),
    ResidentIn: zod_1.z.lazy(() => exports.ResidenceCreateNestedOneWithoutResidentInputSchema).optional()
}).strict();
exports.UserUncheckedCreateInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    userName: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string().optional().nullable(),
    identification: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    phone: zod_1.z.string(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    community_id: zod_1.z.string().optional(),
    role_id: zod_1.z.number().int(),
    residence_id: zod_1.z.string().optional().nullable(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentUncheckedCreateNestedManyWithoutAdminInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedCreateNestedManyWithoutOwnerInputSchema).optional()
}).strict();
exports.UserUpdateInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    userName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    password: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    firstName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    lastName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isVerified: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    Community: zod_1.z.lazy(() => exports.CommunityUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
    Role: zod_1.z.lazy(() => exports.RoleUpdateOneWithoutUserNestedInputSchema).optional(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentUpdateManyWithoutAdminNestedInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentUpdateManyWithoutUserNestedInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUpdateManyWithoutOwnerNestedInputSchema).optional(),
    ResidentIn: zod_1.z.lazy(() => exports.ResidenceUpdateOneWithoutResidentNestedInputSchema).optional()
}).strict();
exports.UserUncheckedUpdateInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    userName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    password: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    firstName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    lastName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isVerified: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    role_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    residence_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentUncheckedUpdateManyWithoutAdminNestedInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional()
}).strict();
exports.UserCreateManyInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    userName: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string().optional().nullable(),
    identification: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    phone: zod_1.z.string(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    community_id: zod_1.z.string().optional(),
    role_id: zod_1.z.number().int(),
    residence_id: zod_1.z.string().optional().nullable()
}).strict();
exports.UserUpdateManyMutationInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    userName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    password: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    firstName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    lastName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isVerified: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
}).strict();
exports.UserUncheckedUpdateManyInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    userName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    password: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    firstName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    lastName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isVerified: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    role_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    residence_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
}).strict();
exports.ResidenceCreateInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    Owner: zod_1.z.lazy(() => exports.UserCreateNestedOneWithoutResidenceInputSchema).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityCreateNestedOneWithoutResidenceInputSchema),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeCreateNestedOneWithoutResidenceInputSchema),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotCreateNestedManyWithoutResidenceInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseCreateNestedManyWithoutResidenceInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserCreateNestedManyWithoutResidentInInputSchema).optional()
}).strict();
exports.ResidenceUncheckedCreateInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    owner_id: zod_1.z.string().optional().nullable(),
    community_id: zod_1.z.string(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    residenceType_id: zod_1.z.number().int(),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotUncheckedCreateNestedManyWithoutResidenceInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedCreateNestedManyWithoutResidenceInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserUncheckedCreateNestedManyWithoutResidentInInputSchema).optional()
}).strict();
exports.ResidenceUpdateInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    Owner: zod_1.z.lazy(() => exports.UserUpdateOneWithoutResidenceNestedInputSchema).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityUpdateOneRequiredWithoutResidenceNestedInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUpdateOneRequiredWithoutResidenceNestedInputSchema).optional(),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserUpdateManyWithoutResidentInNestedInputSchema).optional()
}).strict();
exports.ResidenceUncheckedUpdateInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    owner_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    residenceType_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotUncheckedUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserUncheckedUpdateManyWithoutResidentInNestedInputSchema).optional()
}).strict();
exports.ResidenceCreateManyInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    owner_id: zod_1.z.string().optional().nullable(),
    community_id: zod_1.z.string(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    residenceType_id: zod_1.z.number().int()
}).strict();
exports.ResidenceUpdateManyMutationInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
}).strict();
exports.ResidenceUncheckedUpdateManyInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    owner_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    residenceType_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ParkingSlotCreateInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    number: zod_1.z.number().int(),
    Residence: zod_1.z.lazy(() => exports.ResidenceCreateNestedOneWithoutParkingSlotInputSchema)
}).strict();
exports.ParkingSlotUncheckedCreateInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    number: zod_1.z.number().int(),
    residence_id: zod_1.z.string()
}).strict();
exports.ParkingSlotUpdateInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    number: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUpdateOneRequiredWithoutParkingSlotNestedInputSchema).optional()
}).strict();
exports.ParkingSlotUncheckedUpdateInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    number: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    residence_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ParkingSlotCreateManyInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    number: zod_1.z.number().int(),
    residence_id: zod_1.z.string()
}).strict();
exports.ParkingSlotUpdateManyMutationInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    number: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ParkingSlotUncheckedUpdateManyInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    number: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    residence_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ResidenceTypeCreateInputSchema = zod_1.z.object({
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    Residence: zod_1.z.lazy(() => exports.ResidenceCreateNestedManyWithoutResidenceTypeInputSchema).optional(),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeCreateNestedManyWithoutResidenceTypeInputSchema).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityCreateNestedOneWithoutResidenceTypeInputSchema)
}).strict();
exports.ResidenceTypeUncheckedCreateInputSchema = zod_1.z.object({
    id: zod_1.z.number().int().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    community_id: zod_1.z.string(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedCreateNestedManyWithoutResidenceTypeInputSchema).optional(),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeUncheckedCreateNestedManyWithoutResidenceTypeInputSchema).optional()
}).strict();
exports.ResidenceTypeUpdateInputSchema = zod_1.z.object({
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUpdateManyWithoutResidenceTypeNestedInputSchema).optional(),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeUpdateManyWithoutResidenceTypeNestedInputSchema).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityUpdateOneRequiredWithoutResidenceTypeNestedInputSchema).optional()
}).strict();
exports.ResidenceTypeUncheckedUpdateInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateManyWithoutResidenceTypeNestedInputSchema).optional(),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeUncheckedUpdateManyWithoutResidenceTypeNestedInputSchema).optional()
}).strict();
exports.ResidenceTypeCreateManyInputSchema = zod_1.z.object({
    id: zod_1.z.number().int().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    community_id: zod_1.z.string()
}).strict();
exports.ResidenceTypeUpdateManyMutationInputSchema = zod_1.z.object({
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ResidenceTypeUncheckedUpdateManyInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ProviderCreateInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    contactName: zod_1.z.string(),
    description: zod_1.z.string(),
    phone: zod_1.z.string(),
    email: zod_1.z.string().optional().nullable(),
    address: zod_1.z.string().optional().nullable(),
    website: zod_1.z.string().optional().nullable(),
    active: zod_1.z.boolean(),
    Community: zod_1.z.lazy(() => exports.CommunityCreateNestedOneWithoutProviderInputSchema),
    Cashout: zod_1.z.lazy(() => exports.CashoutCreateNestedManyWithoutProviderInputSchema).optional()
}).strict();
exports.ProviderUncheckedCreateInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    contactName: zod_1.z.string(),
    description: zod_1.z.string(),
    phone: zod_1.z.string(),
    email: zod_1.z.string().optional().nullable(),
    address: zod_1.z.string().optional().nullable(),
    website: zod_1.z.string().optional().nullable(),
    active: zod_1.z.boolean(),
    community_id: zod_1.z.string(),
    Cashout: zod_1.z.lazy(() => exports.CashoutUncheckedCreateNestedManyWithoutProviderInputSchema).optional()
}).strict();
exports.ProviderUpdateInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contactName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    website: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    active: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityUpdateOneRequiredWithoutProviderNestedInputSchema).optional(),
    Cashout: zod_1.z.lazy(() => exports.CashoutUpdateManyWithoutProviderNestedInputSchema).optional()
}).strict();
exports.ProviderUncheckedUpdateInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contactName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    website: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    active: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Cashout: zod_1.z.lazy(() => exports.CashoutUncheckedUpdateManyWithoutProviderNestedInputSchema).optional()
}).strict();
exports.ProviderCreateManyInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    contactName: zod_1.z.string(),
    description: zod_1.z.string(),
    phone: zod_1.z.string(),
    email: zod_1.z.string().optional().nullable(),
    address: zod_1.z.string().optional().nullable(),
    website: zod_1.z.string().optional().nullable(),
    active: zod_1.z.boolean(),
    community_id: zod_1.z.string()
}).strict();
exports.ProviderUpdateManyMutationInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contactName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    website: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    active: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ProviderUncheckedUpdateManyInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contactName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    website: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    active: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.RoleCreateInputSchema = zod_1.z.object({
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    modules: zod_1.z.string(),
    User: zod_1.z.lazy(() => exports.UserCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();
exports.RoleUncheckedCreateInputSchema = zod_1.z.object({
    id: zod_1.z.number().int().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    modules: zod_1.z.string(),
    User: zod_1.z.lazy(() => exports.UserUncheckedCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();
exports.RoleUpdateInputSchema = zod_1.z.object({
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    modules: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    User: zod_1.z.lazy(() => exports.UserUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();
exports.RoleUncheckedUpdateInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    modules: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    User: zod_1.z.lazy(() => exports.UserUncheckedUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();
exports.RoleCreateManyInputSchema = zod_1.z.object({
    id: zod_1.z.number().int().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    modules: zod_1.z.string()
}).strict();
exports.RoleUpdateManyMutationInputSchema = zod_1.z.object({
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    modules: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.RoleUncheckedUpdateManyInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    modules: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ExpenseCreateInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    emitingDate: zod_1.z.coerce.date(),
    expireDate: zod_1.z.coerce.date(),
    status: zod_1.z.string(),
    Residence: zod_1.z.lazy(() => exports.ResidenceCreateNestedOneWithoutExpenseInputSchema),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeCreateNestedOneWithoutExpenseInputSchema),
    Payment: zod_1.z.lazy(() => exports.PaymentCreateNestedOneWithoutExpenseInputSchema)
}).strict();
exports.ExpenseUncheckedCreateInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    residence_id: zod_1.z.string(),
    emitingDate: zod_1.z.coerce.date(),
    expireDate: zod_1.z.coerce.date(),
    status: zod_1.z.string(),
    expenseType_id: zod_1.z.number().int(),
    payment_id: zod_1.z.string()
}).strict();
exports.ExpenseUpdateInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    emitingDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    expireDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUpdateOneRequiredWithoutExpenseNestedInputSchema).optional(),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeUpdateOneRequiredWithoutExpenseNestedInputSchema).optional(),
    Payment: zod_1.z.lazy(() => exports.PaymentUpdateOneRequiredWithoutExpenseNestedInputSchema).optional()
}).strict();
exports.ExpenseUncheckedUpdateInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    residence_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    emitingDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    expireDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    expenseType_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    payment_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ExpenseCreateManyInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    residence_id: zod_1.z.string(),
    emitingDate: zod_1.z.coerce.date(),
    expireDate: zod_1.z.coerce.date(),
    status: zod_1.z.string(),
    expenseType_id: zod_1.z.number().int(),
    payment_id: zod_1.z.string()
}).strict();
exports.ExpenseUpdateManyMutationInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    emitingDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    expireDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ExpenseUncheckedUpdateManyInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    residence_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    emitingDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    expireDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    expenseType_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    payment_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.PaymentCreateInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    voucherImage: zod_1.z.string(),
    isEmailSend: zod_1.z.boolean(),
    Expense: zod_1.z.lazy(() => exports.ExpenseCreateNestedManyWithoutPaymentInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserCreateNestedOneWithoutPaymentsMadeInputSchema),
    Account: zod_1.z.lazy(() => exports.AccountCreateNestedOneWithoutPaymentInputSchema),
    Admin: zod_1.z.lazy(() => exports.UserCreateNestedOneWithoutPaymentsCreatedInputSchema)
}).strict();
exports.PaymentUncheckedCreateInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    owner_id: zod_1.z.string(),
    voucherImage: zod_1.z.string(),
    isEmailSend: zod_1.z.boolean(),
    account_id: zod_1.z.string(),
    created_by: zod_1.z.string(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedCreateNestedManyWithoutPaymentInputSchema).optional()
}).strict();
exports.PaymentUpdateInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    voucherImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isEmailSend: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUpdateManyWithoutPaymentNestedInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserUpdateOneRequiredWithoutPaymentsMadeNestedInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountUpdateOneRequiredWithoutPaymentNestedInputSchema).optional(),
    Admin: zod_1.z.lazy(() => exports.UserUpdateOneRequiredWithoutPaymentsCreatedNestedInputSchema).optional()
}).strict();
exports.PaymentUncheckedUpdateInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    owner_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    voucherImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isEmailSend: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    account_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    created_by: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedUpdateManyWithoutPaymentNestedInputSchema).optional()
}).strict();
exports.PaymentCreateManyInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    owner_id: zod_1.z.string(),
    voucherImage: zod_1.z.string(),
    isEmailSend: zod_1.z.boolean(),
    account_id: zod_1.z.string(),
    created_by: zod_1.z.string()
}).strict();
exports.PaymentUpdateManyMutationInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    voucherImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isEmailSend: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.PaymentUncheckedUpdateManyInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    owner_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    voucherImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isEmailSend: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    account_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    created_by: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.CashoutCreateInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    billImage: zod_1.z.string(),
    status: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date(),
    Provider: zod_1.z.lazy(() => exports.ProviderCreateNestedOneWithoutCashoutInputSchema),
    Account: zod_1.z.lazy(() => exports.AccountCreateNestedOneWithoutCashoutInputSchema)
}).strict();
exports.CashoutUncheckedCreateInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    provider_id: zod_1.z.string(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    billImage: zod_1.z.string(),
    account_id: zod_1.z.string(),
    status: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date()
}).strict();
exports.CashoutUpdateInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    billImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderUpdateOneRequiredWithoutCashoutNestedInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountUpdateOneRequiredWithoutCashoutNestedInputSchema).optional()
}).strict();
exports.CashoutUncheckedUpdateInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    provider_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    billImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    account_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.CashoutCreateManyInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    provider_id: zod_1.z.string(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    billImage: zod_1.z.string(),
    account_id: zod_1.z.string(),
    status: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date()
}).strict();
exports.CashoutUpdateManyMutationInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    billImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.CashoutUncheckedUpdateManyInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    provider_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    billImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    account_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ExpenseTypeCreateInputSchema = zod_1.z.object({
    title: zod_1.z.string(),
    value: zod_1.z.number().int(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeCreateNestedOneWithoutExpenseTypeInputSchema),
    Expense: zod_1.z.lazy(() => exports.ExpenseCreateNestedManyWithoutExpenseTypeInputSchema).optional()
}).strict();
exports.ExpenseTypeUncheckedCreateInputSchema = zod_1.z.object({
    id: zod_1.z.number().int().optional(),
    title: zod_1.z.string(),
    value: zod_1.z.number().int(),
    residenceType_id: zod_1.z.number().int(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedCreateNestedManyWithoutExpenseTypeInputSchema).optional()
}).strict();
exports.ExpenseTypeUpdateInputSchema = zod_1.z.object({
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    value: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUpdateOneRequiredWithoutExpenseTypeNestedInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUpdateManyWithoutExpenseTypeNestedInputSchema).optional()
}).strict();
exports.ExpenseTypeUncheckedUpdateInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    value: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    residenceType_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedUpdateManyWithoutExpenseTypeNestedInputSchema).optional()
}).strict();
exports.ExpenseTypeCreateManyInputSchema = zod_1.z.object({
    id: zod_1.z.number().int().optional(),
    title: zod_1.z.string(),
    value: zod_1.z.number().int(),
    residenceType_id: zod_1.z.number().int()
}).strict();
exports.ExpenseTypeUpdateManyMutationInputSchema = zod_1.z.object({
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    value: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ExpenseTypeUncheckedUpdateManyInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    value: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    residenceType_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.AccountCreateInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    active: zod_1.z.boolean(),
    balance: zod_1.z.bigint(),
    Community: zod_1.z.lazy(() => exports.CommunityCreateNestedOneWithoutAccountInputSchema),
    Payment: zod_1.z.lazy(() => exports.PaymentCreateNestedManyWithoutAccountInputSchema).optional(),
    Cashout: zod_1.z.lazy(() => exports.CashoutCreateNestedManyWithoutAccountInputSchema).optional()
}).strict();
exports.AccountUncheckedCreateInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    active: zod_1.z.boolean(),
    community_id: zod_1.z.string(),
    balance: zod_1.z.bigint(),
    Payment: zod_1.z.lazy(() => exports.PaymentUncheckedCreateNestedManyWithoutAccountInputSchema).optional(),
    Cashout: zod_1.z.lazy(() => exports.CashoutUncheckedCreateNestedManyWithoutAccountInputSchema).optional()
}).strict();
exports.AccountUpdateInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    active: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    balance: zod_1.z.union([zod_1.z.bigint(), zod_1.z.lazy(() => exports.BigIntFieldUpdateOperationsInputSchema)]).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityUpdateOneRequiredWithoutAccountNestedInputSchema).optional(),
    Payment: zod_1.z.lazy(() => exports.PaymentUpdateManyWithoutAccountNestedInputSchema).optional(),
    Cashout: zod_1.z.lazy(() => exports.CashoutUpdateManyWithoutAccountNestedInputSchema).optional()
}).strict();
exports.AccountUncheckedUpdateInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    active: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    balance: zod_1.z.union([zod_1.z.bigint(), zod_1.z.lazy(() => exports.BigIntFieldUpdateOperationsInputSchema)]).optional(),
    Payment: zod_1.z.lazy(() => exports.PaymentUncheckedUpdateManyWithoutAccountNestedInputSchema).optional(),
    Cashout: zod_1.z.lazy(() => exports.CashoutUncheckedUpdateManyWithoutAccountNestedInputSchema).optional()
}).strict();
exports.AccountCreateManyInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    active: zod_1.z.boolean(),
    community_id: zod_1.z.string(),
    balance: zod_1.z.bigint()
}).strict();
exports.AccountUpdateManyMutationInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    active: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    balance: zod_1.z.union([zod_1.z.bigint(), zod_1.z.lazy(() => exports.BigIntFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.AccountUncheckedUpdateManyInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    active: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    balance: zod_1.z.union([zod_1.z.bigint(), zod_1.z.lazy(() => exports.BigIntFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.StringFilterSchema = zod_1.z.object({
    equals: zod_1.z.string().optional(),
    in: zod_1.z.string().array().optional(),
    notIn: zod_1.z.string().array().optional(),
    lt: zod_1.z.string().optional(),
    lte: zod_1.z.string().optional(),
    gt: zod_1.z.string().optional(),
    gte: zod_1.z.string().optional(),
    contains: zod_1.z.string().optional(),
    startsWith: zod_1.z.string().optional(),
    endsWith: zod_1.z.string().optional(),
    mode: zod_1.z.lazy(() => exports.QueryModeSchema).optional(),
    not: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NestedStringFilterSchema)]).optional(),
}).strict();
exports.ResidenceListRelationFilterSchema = zod_1.z.object({
    every: zod_1.z.lazy(() => exports.ResidenceWhereInputSchema).optional(),
    some: zod_1.z.lazy(() => exports.ResidenceWhereInputSchema).optional(),
    none: zod_1.z.lazy(() => exports.ResidenceWhereInputSchema).optional()
}).strict();
exports.ProviderListRelationFilterSchema = zod_1.z.object({
    every: zod_1.z.lazy(() => exports.ProviderWhereInputSchema).optional(),
    some: zod_1.z.lazy(() => exports.ProviderWhereInputSchema).optional(),
    none: zod_1.z.lazy(() => exports.ProviderWhereInputSchema).optional()
}).strict();
exports.UserListRelationFilterSchema = zod_1.z.object({
    every: zod_1.z.lazy(() => exports.UserWhereInputSchema).optional(),
    some: zod_1.z.lazy(() => exports.UserWhereInputSchema).optional(),
    none: zod_1.z.lazy(() => exports.UserWhereInputSchema).optional()
}).strict();
exports.AccountListRelationFilterSchema = zod_1.z.object({
    every: zod_1.z.lazy(() => exports.AccountWhereInputSchema).optional(),
    some: zod_1.z.lazy(() => exports.AccountWhereInputSchema).optional(),
    none: zod_1.z.lazy(() => exports.AccountWhereInputSchema).optional()
}).strict();
exports.ResidenceTypeListRelationFilterSchema = zod_1.z.object({
    every: zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema).optional(),
    some: zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema).optional(),
    none: zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema).optional()
}).strict();
exports.ResidenceOrderByRelationAggregateInputSchema = zod_1.z.object({
    _count: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ProviderOrderByRelationAggregateInputSchema = zod_1.z.object({
    _count: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.UserOrderByRelationAggregateInputSchema = zod_1.z.object({
    _count: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.AccountOrderByRelationAggregateInputSchema = zod_1.z.object({
    _count: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ResidenceTypeOrderByRelationAggregateInputSchema = zod_1.z.object({
    _count: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.CommunityCountOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    address: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.CommunityMaxOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    address: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.CommunityMinOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    address: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.StringWithAggregatesFilterSchema = zod_1.z.object({
    equals: zod_1.z.string().optional(),
    in: zod_1.z.string().array().optional(),
    notIn: zod_1.z.string().array().optional(),
    lt: zod_1.z.string().optional(),
    lte: zod_1.z.string().optional(),
    gt: zod_1.z.string().optional(),
    gte: zod_1.z.string().optional(),
    contains: zod_1.z.string().optional(),
    startsWith: zod_1.z.string().optional(),
    endsWith: zod_1.z.string().optional(),
    mode: zod_1.z.lazy(() => exports.QueryModeSchema).optional(),
    not: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NestedStringWithAggregatesFilterSchema)]).optional(),
    _count: zod_1.z.lazy(() => exports.NestedIntFilterSchema).optional(),
    _min: zod_1.z.lazy(() => exports.NestedStringFilterSchema).optional(),
    _max: zod_1.z.lazy(() => exports.NestedStringFilterSchema).optional()
}).strict();
exports.StringNullableFilterSchema = zod_1.z.object({
    equals: zod_1.z.string().optional().nullable(),
    in: zod_1.z.string().array().optional().nullable(),
    notIn: zod_1.z.string().array().optional().nullable(),
    lt: zod_1.z.string().optional(),
    lte: zod_1.z.string().optional(),
    gt: zod_1.z.string().optional(),
    gte: zod_1.z.string().optional(),
    contains: zod_1.z.string().optional(),
    startsWith: zod_1.z.string().optional(),
    endsWith: zod_1.z.string().optional(),
    mode: zod_1.z.lazy(() => exports.QueryModeSchema).optional(),
    not: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NestedStringNullableFilterSchema)]).optional().nullable(),
}).strict();
exports.BoolNullableFilterSchema = zod_1.z.object({
    equals: zod_1.z.boolean().optional().nullable(),
    not: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NestedBoolNullableFilterSchema)]).optional().nullable(),
}).strict();
exports.IntFilterSchema = zod_1.z.object({
    equals: zod_1.z.number().optional(),
    in: zod_1.z.number().array().optional(),
    notIn: zod_1.z.number().array().optional(),
    lt: zod_1.z.number().optional(),
    lte: zod_1.z.number().optional(),
    gt: zod_1.z.number().optional(),
    gte: zod_1.z.number().optional(),
    not: zod_1.z.union([zod_1.z.number(), zod_1.z.lazy(() => exports.NestedIntFilterSchema)]).optional(),
}).strict();
exports.CommunityRelationFilterSchema = zod_1.z.object({
    is: zod_1.z.lazy(() => exports.CommunityWhereInputSchema).optional(),
    isNot: zod_1.z.lazy(() => exports.CommunityWhereInputSchema).optional()
}).strict();
exports.RoleNullableRelationFilterSchema = zod_1.z.object({
    is: zod_1.z.lazy(() => exports.RoleWhereInputSchema).optional().nullable(),
    isNot: zod_1.z.lazy(() => exports.RoleWhereInputSchema).optional().nullable()
}).strict();
exports.PaymentListRelationFilterSchema = zod_1.z.object({
    every: zod_1.z.lazy(() => exports.PaymentWhereInputSchema).optional(),
    some: zod_1.z.lazy(() => exports.PaymentWhereInputSchema).optional(),
    none: zod_1.z.lazy(() => exports.PaymentWhereInputSchema).optional()
}).strict();
exports.ResidenceNullableRelationFilterSchema = zod_1.z.object({
    is: zod_1.z.lazy(() => exports.ResidenceWhereInputSchema).optional().nullable(),
    isNot: zod_1.z.lazy(() => exports.ResidenceWhereInputSchema).optional().nullable()
}).strict();
exports.SortOrderInputSchema = zod_1.z.object({
    sort: zod_1.z.lazy(() => exports.SortOrderSchema),
    nulls: zod_1.z.lazy(() => exports.NullsOrderSchema).optional()
}).strict();
exports.PaymentOrderByRelationAggregateInputSchema = zod_1.z.object({
    _count: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.UserCountOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    userName: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    email: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    password: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    identification: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    firstName: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    lastName: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    phone: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    isVerified: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    isActive: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    role_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residence_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.UserAvgOrderByAggregateInputSchema = zod_1.z.object({
    role_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.UserMaxOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    userName: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    email: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    password: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    identification: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    firstName: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    lastName: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    phone: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    isVerified: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    isActive: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    role_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residence_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.UserMinOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    userName: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    email: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    password: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    identification: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    firstName: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    lastName: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    phone: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    isVerified: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    isActive: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    role_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residence_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.UserSumOrderByAggregateInputSchema = zod_1.z.object({
    role_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.StringNullableWithAggregatesFilterSchema = zod_1.z.object({
    equals: zod_1.z.string().optional().nullable(),
    in: zod_1.z.string().array().optional().nullable(),
    notIn: zod_1.z.string().array().optional().nullable(),
    lt: zod_1.z.string().optional(),
    lte: zod_1.z.string().optional(),
    gt: zod_1.z.string().optional(),
    gte: zod_1.z.string().optional(),
    contains: zod_1.z.string().optional(),
    startsWith: zod_1.z.string().optional(),
    endsWith: zod_1.z.string().optional(),
    mode: zod_1.z.lazy(() => exports.QueryModeSchema).optional(),
    not: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NestedStringNullableWithAggregatesFilterSchema)]).optional().nullable(),
    _count: zod_1.z.lazy(() => exports.NestedIntNullableFilterSchema).optional(),
    _min: zod_1.z.lazy(() => exports.NestedStringNullableFilterSchema).optional(),
    _max: zod_1.z.lazy(() => exports.NestedStringNullableFilterSchema).optional()
}).strict();
exports.BoolNullableWithAggregatesFilterSchema = zod_1.z.object({
    equals: zod_1.z.boolean().optional().nullable(),
    not: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NestedBoolNullableWithAggregatesFilterSchema)]).optional().nullable(),
    _count: zod_1.z.lazy(() => exports.NestedIntNullableFilterSchema).optional(),
    _min: zod_1.z.lazy(() => exports.NestedBoolNullableFilterSchema).optional(),
    _max: zod_1.z.lazy(() => exports.NestedBoolNullableFilterSchema).optional()
}).strict();
exports.IntWithAggregatesFilterSchema = zod_1.z.object({
    equals: zod_1.z.number().optional(),
    in: zod_1.z.number().array().optional(),
    notIn: zod_1.z.number().array().optional(),
    lt: zod_1.z.number().optional(),
    lte: zod_1.z.number().optional(),
    gt: zod_1.z.number().optional(),
    gte: zod_1.z.number().optional(),
    not: zod_1.z.union([zod_1.z.number(), zod_1.z.lazy(() => exports.NestedIntWithAggregatesFilterSchema)]).optional(),
    _count: zod_1.z.lazy(() => exports.NestedIntFilterSchema).optional(),
    _avg: zod_1.z.lazy(() => exports.NestedFloatFilterSchema).optional(),
    _sum: zod_1.z.lazy(() => exports.NestedIntFilterSchema).optional(),
    _min: zod_1.z.lazy(() => exports.NestedIntFilterSchema).optional(),
    _max: zod_1.z.lazy(() => exports.NestedIntFilterSchema).optional()
}).strict();
exports.JsonNullableFilterSchema = zod_1.z.object({
    equals: exports.InputJsonValueSchema.optional(),
    path: zod_1.z.string().array().optional(),
    string_contains: zod_1.z.string().optional(),
    string_starts_with: zod_1.z.string().optional(),
    string_ends_with: zod_1.z.string().optional(),
    array_contains: exports.InputJsonValueSchema.optional().nullable(),
    array_starts_with: exports.InputJsonValueSchema.optional().nullable(),
    array_ends_with: exports.InputJsonValueSchema.optional().nullable(),
    lt: exports.InputJsonValueSchema.optional(),
    lte: exports.InputJsonValueSchema.optional(),
    gt: exports.InputJsonValueSchema.optional(),
    gte: exports.InputJsonValueSchema.optional(),
    not: exports.InputJsonValueSchema.optional()
}).strict();
exports.UserNullableRelationFilterSchema = zod_1.z.object({
    is: zod_1.z.lazy(() => exports.UserWhereInputSchema).optional().nullable(),
    isNot: zod_1.z.lazy(() => exports.UserWhereInputSchema).optional().nullable()
}).strict();
exports.ResidenceTypeRelationFilterSchema = zod_1.z.object({
    is: zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema).optional(),
    isNot: zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema).optional()
}).strict();
exports.ParkingSlotListRelationFilterSchema = zod_1.z.object({
    every: zod_1.z.lazy(() => exports.ParkingSlotWhereInputSchema).optional(),
    some: zod_1.z.lazy(() => exports.ParkingSlotWhereInputSchema).optional(),
    none: zod_1.z.lazy(() => exports.ParkingSlotWhereInputSchema).optional()
}).strict();
exports.ExpenseListRelationFilterSchema = zod_1.z.object({
    every: zod_1.z.lazy(() => exports.ExpenseWhereInputSchema).optional(),
    some: zod_1.z.lazy(() => exports.ExpenseWhereInputSchema).optional(),
    none: zod_1.z.lazy(() => exports.ExpenseWhereInputSchema).optional()
}).strict();
exports.ParkingSlotOrderByRelationAggregateInputSchema = zod_1.z.object({
    _count: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ExpenseOrderByRelationAggregateInputSchema = zod_1.z.object({
    _count: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ResidenceCountOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    owner_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    contacts: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residenceType_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ResidenceAvgOrderByAggregateInputSchema = zod_1.z.object({
    residenceType_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ResidenceMaxOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    owner_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residenceType_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ResidenceMinOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    owner_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residenceType_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ResidenceSumOrderByAggregateInputSchema = zod_1.z.object({
    residenceType_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.JsonNullableWithAggregatesFilterSchema = zod_1.z.object({
    equals: exports.InputJsonValueSchema.optional(),
    path: zod_1.z.string().array().optional(),
    string_contains: zod_1.z.string().optional(),
    string_starts_with: zod_1.z.string().optional(),
    string_ends_with: zod_1.z.string().optional(),
    array_contains: exports.InputJsonValueSchema.optional().nullable(),
    array_starts_with: exports.InputJsonValueSchema.optional().nullable(),
    array_ends_with: exports.InputJsonValueSchema.optional().nullable(),
    lt: exports.InputJsonValueSchema.optional(),
    lte: exports.InputJsonValueSchema.optional(),
    gt: exports.InputJsonValueSchema.optional(),
    gte: exports.InputJsonValueSchema.optional(),
    not: exports.InputJsonValueSchema.optional(),
    _count: zod_1.z.lazy(() => exports.NestedIntNullableFilterSchema).optional(),
    _min: zod_1.z.lazy(() => exports.NestedJsonNullableFilterSchema).optional(),
    _max: zod_1.z.lazy(() => exports.NestedJsonNullableFilterSchema).optional()
}).strict();
exports.ResidenceRelationFilterSchema = zod_1.z.object({
    is: zod_1.z.lazy(() => exports.ResidenceWhereInputSchema).optional(),
    isNot: zod_1.z.lazy(() => exports.ResidenceWhereInputSchema).optional()
}).strict();
exports.ParkingSlotCountOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    number: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residence_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ParkingSlotAvgOrderByAggregateInputSchema = zod_1.z.object({
    number: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ParkingSlotMaxOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    number: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residence_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ParkingSlotMinOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    number: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residence_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ParkingSlotSumOrderByAggregateInputSchema = zod_1.z.object({
    number: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ExpenseTypeListRelationFilterSchema = zod_1.z.object({
    every: zod_1.z.lazy(() => exports.ExpenseTypeWhereInputSchema).optional(),
    some: zod_1.z.lazy(() => exports.ExpenseTypeWhereInputSchema).optional(),
    none: zod_1.z.lazy(() => exports.ExpenseTypeWhereInputSchema).optional()
}).strict();
exports.ExpenseTypeOrderByRelationAggregateInputSchema = zod_1.z.object({
    _count: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ResidenceTypeCountOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ResidenceTypeAvgOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ResidenceTypeMaxOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ResidenceTypeMinOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ResidenceTypeSumOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.BoolFilterSchema = zod_1.z.object({
    equals: zod_1.z.boolean().optional(),
    not: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NestedBoolFilterSchema)]).optional(),
}).strict();
exports.CashoutListRelationFilterSchema = zod_1.z.object({
    every: zod_1.z.lazy(() => exports.CashoutWhereInputSchema).optional(),
    some: zod_1.z.lazy(() => exports.CashoutWhereInputSchema).optional(),
    none: zod_1.z.lazy(() => exports.CashoutWhereInputSchema).optional()
}).strict();
exports.CashoutOrderByRelationAggregateInputSchema = zod_1.z.object({
    _count: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ProviderCountOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    contactName: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    phone: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    email: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    address: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    website: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    active: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ProviderMaxOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    contactName: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    phone: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    email: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    address: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    website: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    active: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ProviderMinOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    contactName: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    phone: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    email: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    address: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    website: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    active: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.BoolWithAggregatesFilterSchema = zod_1.z.object({
    equals: zod_1.z.boolean().optional(),
    not: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NestedBoolWithAggregatesFilterSchema)]).optional(),
    _count: zod_1.z.lazy(() => exports.NestedIntFilterSchema).optional(),
    _min: zod_1.z.lazy(() => exports.NestedBoolFilterSchema).optional(),
    _max: zod_1.z.lazy(() => exports.NestedBoolFilterSchema).optional()
}).strict();
exports.RoleCountOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    modules: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.RoleAvgOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.RoleMaxOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    modules: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.RoleMinOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    modules: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.RoleSumOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.DateTimeFilterSchema = zod_1.z.object({
    equals: zod_1.z.coerce.date().optional(),
    in: zod_1.z.coerce.date().array().optional(),
    notIn: zod_1.z.coerce.date().array().optional(),
    lt: zod_1.z.coerce.date().optional(),
    lte: zod_1.z.coerce.date().optional(),
    gt: zod_1.z.coerce.date().optional(),
    gte: zod_1.z.coerce.date().optional(),
    not: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.NestedDateTimeFilterSchema)]).optional(),
}).strict();
exports.ExpenseTypeRelationFilterSchema = zod_1.z.object({
    is: zod_1.z.lazy(() => exports.ExpenseTypeWhereInputSchema).optional(),
    isNot: zod_1.z.lazy(() => exports.ExpenseTypeWhereInputSchema).optional()
}).strict();
exports.PaymentRelationFilterSchema = zod_1.z.object({
    is: zod_1.z.lazy(() => exports.PaymentWhereInputSchema).optional(),
    isNot: zod_1.z.lazy(() => exports.PaymentWhereInputSchema).optional()
}).strict();
exports.ExpenseCountOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residence_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    emitingDate: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    expireDate: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    status: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    expenseType_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    payment_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ExpenseAvgOrderByAggregateInputSchema = zod_1.z.object({
    expenseType_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ExpenseMaxOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residence_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    emitingDate: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    expireDate: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    status: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    expenseType_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    payment_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ExpenseMinOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residence_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    emitingDate: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    expireDate: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    status: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    expenseType_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    payment_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ExpenseSumOrderByAggregateInputSchema = zod_1.z.object({
    expenseType_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.DateTimeWithAggregatesFilterSchema = zod_1.z.object({
    equals: zod_1.z.coerce.date().optional(),
    in: zod_1.z.coerce.date().array().optional(),
    notIn: zod_1.z.coerce.date().array().optional(),
    lt: zod_1.z.coerce.date().optional(),
    lte: zod_1.z.coerce.date().optional(),
    gt: zod_1.z.coerce.date().optional(),
    gte: zod_1.z.coerce.date().optional(),
    not: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.NestedDateTimeWithAggregatesFilterSchema)]).optional(),
    _count: zod_1.z.lazy(() => exports.NestedIntFilterSchema).optional(),
    _min: zod_1.z.lazy(() => exports.NestedDateTimeFilterSchema).optional(),
    _max: zod_1.z.lazy(() => exports.NestedDateTimeFilterSchema).optional()
}).strict();
exports.DecimalFilterSchema = zod_1.z.object({
    equals: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    in: zod_1.z.union([zod_1.z.number().array(), zod_1.z.string().array(), zod_1.z.instanceof(client_1.Prisma.Decimal).array(), exports.DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && v.every((v) => (0, exports.isValidDecimalInput)(v)), { message: 'Must be a Decimal' }).optional(),
    notIn: zod_1.z.union([zod_1.z.number().array(), zod_1.z.string().array(), zod_1.z.instanceof(client_1.Prisma.Decimal).array(), exports.DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && v.every((v) => (0, exports.isValidDecimalInput)(v)), { message: 'Must be a Decimal' }).optional(),
    lt: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    lte: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    gt: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    gte: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    not: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.NestedDecimalFilterSchema)]).optional(),
}).strict();
exports.UserRelationFilterSchema = zod_1.z.object({
    is: zod_1.z.lazy(() => exports.UserWhereInputSchema).optional(),
    isNot: zod_1.z.lazy(() => exports.UserWhereInputSchema).optional()
}).strict();
exports.AccountRelationFilterSchema = zod_1.z.object({
    is: zod_1.z.lazy(() => exports.AccountWhereInputSchema).optional(),
    isNot: zod_1.z.lazy(() => exports.AccountWhereInputSchema).optional()
}).strict();
exports.PaymentCountOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    registerDate: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    amount: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    owner_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    voucherImage: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    isEmailSend: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    account_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    created_by: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.PaymentAvgOrderByAggregateInputSchema = zod_1.z.object({
    amount: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.PaymentMaxOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    registerDate: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    amount: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    owner_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    voucherImage: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    isEmailSend: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    account_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    created_by: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.PaymentMinOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    registerDate: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    amount: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    owner_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    voucherImage: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    isEmailSend: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    account_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    created_by: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.PaymentSumOrderByAggregateInputSchema = zod_1.z.object({
    amount: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.DecimalWithAggregatesFilterSchema = zod_1.z.object({
    equals: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    in: zod_1.z.union([zod_1.z.number().array(), zod_1.z.string().array(), zod_1.z.instanceof(client_1.Prisma.Decimal).array(), exports.DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && v.every((v) => (0, exports.isValidDecimalInput)(v)), { message: 'Must be a Decimal' }).optional(),
    notIn: zod_1.z.union([zod_1.z.number().array(), zod_1.z.string().array(), zod_1.z.instanceof(client_1.Prisma.Decimal).array(), exports.DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && v.every((v) => (0, exports.isValidDecimalInput)(v)), { message: 'Must be a Decimal' }).optional(),
    lt: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    lte: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    gt: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    gte: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    not: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.NestedDecimalWithAggregatesFilterSchema)]).optional(),
    _count: zod_1.z.lazy(() => exports.NestedIntFilterSchema).optional(),
    _avg: zod_1.z.lazy(() => exports.NestedDecimalFilterSchema).optional(),
    _sum: zod_1.z.lazy(() => exports.NestedDecimalFilterSchema).optional(),
    _min: zod_1.z.lazy(() => exports.NestedDecimalFilterSchema).optional(),
    _max: zod_1.z.lazy(() => exports.NestedDecimalFilterSchema).optional()
}).strict();
exports.ProviderRelationFilterSchema = zod_1.z.object({
    is: zod_1.z.lazy(() => exports.ProviderWhereInputSchema).optional(),
    isNot: zod_1.z.lazy(() => exports.ProviderWhereInputSchema).optional()
}).strict();
exports.CashoutCountOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    provider_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    amount: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    billImage: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    account_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    status: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    registerDate: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.CashoutAvgOrderByAggregateInputSchema = zod_1.z.object({
    amount: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.CashoutMaxOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    provider_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    amount: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    billImage: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    account_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    status: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    registerDate: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.CashoutMinOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    provider_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    amount: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    billImage: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    account_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    status: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    registerDate: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.CashoutSumOrderByAggregateInputSchema = zod_1.z.object({
    amount: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ExpenseTypeCountOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    value: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residenceType_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ExpenseTypeAvgOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    value: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residenceType_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ExpenseTypeMaxOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    value: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residenceType_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ExpenseTypeMinOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    value: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residenceType_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.ExpenseTypeSumOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    value: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    residenceType_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.BigIntFilterSchema = zod_1.z.object({
    equals: zod_1.z.bigint().optional(),
    in: zod_1.z.bigint().array().optional(),
    notIn: zod_1.z.bigint().array().optional(),
    lt: zod_1.z.bigint().optional(),
    lte: zod_1.z.bigint().optional(),
    gt: zod_1.z.bigint().optional(),
    gte: zod_1.z.bigint().optional(),
    not: zod_1.z.union([zod_1.z.bigint(), zod_1.z.lazy(() => exports.NestedBigIntFilterSchema)]).optional(),
}).strict();
exports.AccountCountOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    active: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    balance: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.AccountAvgOrderByAggregateInputSchema = zod_1.z.object({
    balance: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.AccountMaxOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    active: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    balance: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.AccountMinOrderByAggregateInputSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    title: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    description: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    active: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    community_id: zod_1.z.lazy(() => exports.SortOrderSchema).optional(),
    balance: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.AccountSumOrderByAggregateInputSchema = zod_1.z.object({
    balance: zod_1.z.lazy(() => exports.SortOrderSchema).optional()
}).strict();
exports.BigIntWithAggregatesFilterSchema = zod_1.z.object({
    equals: zod_1.z.bigint().optional(),
    in: zod_1.z.bigint().array().optional(),
    notIn: zod_1.z.bigint().array().optional(),
    lt: zod_1.z.bigint().optional(),
    lte: zod_1.z.bigint().optional(),
    gt: zod_1.z.bigint().optional(),
    gte: zod_1.z.bigint().optional(),
    not: zod_1.z.union([zod_1.z.bigint(), zod_1.z.lazy(() => exports.NestedBigIntWithAggregatesFilterSchema)]).optional(),
    _count: zod_1.z.lazy(() => exports.NestedIntFilterSchema).optional(),
    _avg: zod_1.z.lazy(() => exports.NestedFloatFilterSchema).optional(),
    _sum: zod_1.z.lazy(() => exports.NestedBigIntFilterSchema).optional(),
    _min: zod_1.z.lazy(() => exports.NestedBigIntFilterSchema).optional(),
    _max: zod_1.z.lazy(() => exports.NestedBigIntFilterSchema).optional()
}).strict();
exports.ResidenceCreateNestedManyWithoutCommunityInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateWithoutCommunityInputSchema).array(), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutCommunityInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutCommunityInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ResidenceCreateManyCommunityInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.ProviderCreateNestedManyWithoutCommunityInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderCreateWithoutCommunityInputSchema).array(), zod_1.z.lazy(() => exports.ProviderUncheckedCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderUncheckedCreateWithoutCommunityInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderCreateOrConnectWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderCreateOrConnectWithoutCommunityInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ProviderCreateManyCommunityInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.UserCreateNestedManyWithoutCommunityInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserCreateWithoutCommunityInputSchema).array(), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutCommunityInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutCommunityInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.UserCreateManyCommunityInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.AccountCreateNestedManyWithoutCommunityInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.AccountCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountCreateWithoutCommunityInputSchema).array(), zod_1.z.lazy(() => exports.AccountUncheckedCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedCreateWithoutCommunityInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.AccountCreateOrConnectWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountCreateOrConnectWithoutCommunityInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.AccountCreateManyCommunityInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema), zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.ResidenceTypeCreateNestedManyWithoutCommunityInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeCreateWithoutCommunityInputSchema).array(), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateWithoutCommunityInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeCreateOrConnectWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeCreateOrConnectWithoutCommunityInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ResidenceTypeCreateManyCommunityInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.ResidenceUncheckedCreateNestedManyWithoutCommunityInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateWithoutCommunityInputSchema).array(), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutCommunityInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutCommunityInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ResidenceCreateManyCommunityInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.ProviderUncheckedCreateNestedManyWithoutCommunityInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderCreateWithoutCommunityInputSchema).array(), zod_1.z.lazy(() => exports.ProviderUncheckedCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderUncheckedCreateWithoutCommunityInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderCreateOrConnectWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderCreateOrConnectWithoutCommunityInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ProviderCreateManyCommunityInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.UserUncheckedCreateNestedManyWithoutCommunityInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserCreateWithoutCommunityInputSchema).array(), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutCommunityInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutCommunityInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.UserCreateManyCommunityInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.AccountUncheckedCreateNestedManyWithoutCommunityInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.AccountCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountCreateWithoutCommunityInputSchema).array(), zod_1.z.lazy(() => exports.AccountUncheckedCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedCreateWithoutCommunityInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.AccountCreateOrConnectWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountCreateOrConnectWithoutCommunityInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.AccountCreateManyCommunityInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema), zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.ResidenceTypeUncheckedCreateNestedManyWithoutCommunityInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeCreateWithoutCommunityInputSchema).array(), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateWithoutCommunityInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeCreateOrConnectWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeCreateOrConnectWithoutCommunityInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ResidenceTypeCreateManyCommunityInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.StringFieldUpdateOperationsInputSchema = zod_1.z.object({
    set: zod_1.z.string().optional()
}).strict();
exports.ResidenceUpdateManyWithoutCommunityNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateWithoutCommunityInputSchema).array(), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutCommunityInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutCommunityInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpsertWithWhereUniqueWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceUpsertWithWhereUniqueWithoutCommunityInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ResidenceCreateManyCommunityInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateWithWhereUniqueWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceUpdateWithWhereUniqueWithoutCommunityInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateManyWithWhereWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceUpdateManyWithWhereWithoutCommunityInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceScalarWhereInputSchema), zod_1.z.lazy(() => exports.ResidenceScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.ProviderUpdateManyWithoutCommunityNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderCreateWithoutCommunityInputSchema).array(), zod_1.z.lazy(() => exports.ProviderUncheckedCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderUncheckedCreateWithoutCommunityInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderCreateOrConnectWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderCreateOrConnectWithoutCommunityInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderUpsertWithWhereUniqueWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderUpsertWithWhereUniqueWithoutCommunityInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ProviderCreateManyCommunityInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderUpdateWithWhereUniqueWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderUpdateWithWhereUniqueWithoutCommunityInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderUpdateManyWithWhereWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderUpdateManyWithWhereWithoutCommunityInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderScalarWhereInputSchema), zod_1.z.lazy(() => exports.ProviderScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.UserUpdateManyWithoutCommunityNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserCreateWithoutCommunityInputSchema).array(), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutCommunityInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutCommunityInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpsertWithWhereUniqueWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserUpsertWithWhereUniqueWithoutCommunityInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.UserCreateManyCommunityInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateWithWhereUniqueWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserUpdateWithWhereUniqueWithoutCommunityInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateManyWithWhereWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserUpdateManyWithWhereWithoutCommunityInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.UserScalarWhereInputSchema), zod_1.z.lazy(() => exports.UserScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.AccountUpdateManyWithoutCommunityNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.AccountCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountCreateWithoutCommunityInputSchema).array(), zod_1.z.lazy(() => exports.AccountUncheckedCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedCreateWithoutCommunityInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.AccountCreateOrConnectWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountCreateOrConnectWithoutCommunityInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.AccountUpsertWithWhereUniqueWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountUpsertWithWhereUniqueWithoutCommunityInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.AccountCreateManyCommunityInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema), zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema), zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema), zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema), zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.AccountUpdateWithWhereUniqueWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountUpdateWithWhereUniqueWithoutCommunityInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.AccountUpdateManyWithWhereWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountUpdateManyWithWhereWithoutCommunityInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.AccountScalarWhereInputSchema), zod_1.z.lazy(() => exports.AccountScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.ResidenceTypeUpdateManyWithoutCommunityNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeCreateWithoutCommunityInputSchema).array(), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateWithoutCommunityInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeCreateOrConnectWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeCreateOrConnectWithoutCommunityInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeUpsertWithWhereUniqueWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUpsertWithWhereUniqueWithoutCommunityInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ResidenceTypeCreateManyCommunityInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeUpdateWithWhereUniqueWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUpdateWithWhereUniqueWithoutCommunityInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeUpdateManyWithWhereWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUpdateManyWithWhereWithoutCommunityInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeScalarWhereInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.ResidenceUncheckedUpdateManyWithoutCommunityNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateWithoutCommunityInputSchema).array(), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutCommunityInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutCommunityInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpsertWithWhereUniqueWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceUpsertWithWhereUniqueWithoutCommunityInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ResidenceCreateManyCommunityInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateWithWhereUniqueWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceUpdateWithWhereUniqueWithoutCommunityInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateManyWithWhereWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceUpdateManyWithWhereWithoutCommunityInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceScalarWhereInputSchema), zod_1.z.lazy(() => exports.ResidenceScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.ProviderUncheckedUpdateManyWithoutCommunityNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderCreateWithoutCommunityInputSchema).array(), zod_1.z.lazy(() => exports.ProviderUncheckedCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderUncheckedCreateWithoutCommunityInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderCreateOrConnectWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderCreateOrConnectWithoutCommunityInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderUpsertWithWhereUniqueWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderUpsertWithWhereUniqueWithoutCommunityInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ProviderCreateManyCommunityInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderUpdateWithWhereUniqueWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderUpdateWithWhereUniqueWithoutCommunityInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderUpdateManyWithWhereWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderUpdateManyWithWhereWithoutCommunityInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderScalarWhereInputSchema), zod_1.z.lazy(() => exports.ProviderScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.UserUncheckedUpdateManyWithoutCommunityNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserCreateWithoutCommunityInputSchema).array(), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutCommunityInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutCommunityInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpsertWithWhereUniqueWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserUpsertWithWhereUniqueWithoutCommunityInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.UserCreateManyCommunityInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateWithWhereUniqueWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserUpdateWithWhereUniqueWithoutCommunityInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateManyWithWhereWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserUpdateManyWithWhereWithoutCommunityInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.UserScalarWhereInputSchema), zod_1.z.lazy(() => exports.UserScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.AccountUncheckedUpdateManyWithoutCommunityNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.AccountCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountCreateWithoutCommunityInputSchema).array(), zod_1.z.lazy(() => exports.AccountUncheckedCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedCreateWithoutCommunityInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.AccountCreateOrConnectWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountCreateOrConnectWithoutCommunityInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.AccountUpsertWithWhereUniqueWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountUpsertWithWhereUniqueWithoutCommunityInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.AccountCreateManyCommunityInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema), zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema), zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema), zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema), zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.AccountUpdateWithWhereUniqueWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountUpdateWithWhereUniqueWithoutCommunityInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.AccountUpdateManyWithWhereWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountUpdateManyWithWhereWithoutCommunityInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.AccountScalarWhereInputSchema), zod_1.z.lazy(() => exports.AccountScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.ResidenceTypeUncheckedUpdateManyWithoutCommunityNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeCreateWithoutCommunityInputSchema).array(), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateWithoutCommunityInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeCreateOrConnectWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeCreateOrConnectWithoutCommunityInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeUpsertWithWhereUniqueWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUpsertWithWhereUniqueWithoutCommunityInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ResidenceTypeCreateManyCommunityInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeUpdateWithWhereUniqueWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUpdateWithWhereUniqueWithoutCommunityInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeUpdateManyWithWhereWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUpdateManyWithWhereWithoutCommunityInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeScalarWhereInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.CommunityCreateNestedOneWithoutUserInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityCreateWithoutUserInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedCreateWithoutUserInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.CommunityCreateOrConnectWithoutUserInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.CommunityWhereUniqueInputSchema).optional()
}).strict();
exports.RoleCreateNestedOneWithoutUserInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.RoleCreateWithoutUserInputSchema), zod_1.z.lazy(() => exports.RoleUncheckedCreateWithoutUserInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.RoleCreateOrConnectWithoutUserInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.RoleWhereUniqueInputSchema).optional()
}).strict();
exports.PaymentCreateNestedManyWithoutAdminInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentCreateWithoutAdminInputSchema).array(), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutAdminInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutAdminInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.PaymentCreateManyAdminInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.PaymentCreateNestedManyWithoutUserInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentCreateWithoutUserInputSchema).array(), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutUserInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutUserInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.PaymentCreateManyUserInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.ResidenceCreateNestedManyWithoutOwnerInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateWithoutOwnerInputSchema).array(), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutOwnerInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutOwnerInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ResidenceCreateManyOwnerInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.ResidenceCreateNestedOneWithoutResidentInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutResidentInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutResidentInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutResidentInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).optional()
}).strict();
exports.PaymentUncheckedCreateNestedManyWithoutAdminInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentCreateWithoutAdminInputSchema).array(), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutAdminInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutAdminInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.PaymentCreateManyAdminInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.PaymentUncheckedCreateNestedManyWithoutUserInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentCreateWithoutUserInputSchema).array(), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutUserInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutUserInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.PaymentCreateManyUserInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.ResidenceUncheckedCreateNestedManyWithoutOwnerInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateWithoutOwnerInputSchema).array(), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutOwnerInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutOwnerInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ResidenceCreateManyOwnerInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.NullableStringFieldUpdateOperationsInputSchema = zod_1.z.object({
    set: zod_1.z.string().optional().nullable()
}).strict();
exports.NullableBoolFieldUpdateOperationsInputSchema = zod_1.z.object({
    set: zod_1.z.boolean().optional().nullable()
}).strict();
exports.CommunityUpdateOneRequiredWithoutUserNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityCreateWithoutUserInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedCreateWithoutUserInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.CommunityCreateOrConnectWithoutUserInputSchema).optional(),
    upsert: zod_1.z.lazy(() => exports.CommunityUpsertWithoutUserInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.CommunityWhereUniqueInputSchema).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityUpdateToOneWithWhereWithoutUserInputSchema), zod_1.z.lazy(() => exports.CommunityUpdateWithoutUserInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedUpdateWithoutUserInputSchema)]).optional(),
}).strict();
exports.RoleUpdateOneWithoutUserNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.RoleCreateWithoutUserInputSchema), zod_1.z.lazy(() => exports.RoleUncheckedCreateWithoutUserInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.RoleCreateOrConnectWithoutUserInputSchema).optional(),
    upsert: zod_1.z.lazy(() => exports.RoleUpsertWithoutUserInputSchema).optional(),
    disconnect: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.RoleWhereInputSchema)]).optional(),
    delete: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.RoleWhereInputSchema)]).optional(),
    connect: zod_1.z.lazy(() => exports.RoleWhereUniqueInputSchema).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.RoleUpdateToOneWithWhereWithoutUserInputSchema), zod_1.z.lazy(() => exports.RoleUpdateWithoutUserInputSchema), zod_1.z.lazy(() => exports.RoleUncheckedUpdateWithoutUserInputSchema)]).optional(),
}).strict();
exports.PaymentUpdateManyWithoutAdminNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentCreateWithoutAdminInputSchema).array(), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutAdminInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutAdminInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpsertWithWhereUniqueWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentUpsertWithWhereUniqueWithoutAdminInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.PaymentCreateManyAdminInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateWithWhereUniqueWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentUpdateWithWhereUniqueWithoutAdminInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateManyWithWhereWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentUpdateManyWithWhereWithoutAdminInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentScalarWhereInputSchema), zod_1.z.lazy(() => exports.PaymentScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.PaymentUpdateManyWithoutUserNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentCreateWithoutUserInputSchema).array(), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutUserInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutUserInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpsertWithWhereUniqueWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.PaymentCreateManyUserInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateWithWhereUniqueWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateManyWithWhereWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentScalarWhereInputSchema), zod_1.z.lazy(() => exports.PaymentScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.ResidenceUpdateManyWithoutOwnerNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateWithoutOwnerInputSchema).array(), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutOwnerInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutOwnerInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpsertWithWhereUniqueWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceUpsertWithWhereUniqueWithoutOwnerInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ResidenceCreateManyOwnerInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateWithWhereUniqueWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceUpdateWithWhereUniqueWithoutOwnerInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateManyWithWhereWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceUpdateManyWithWhereWithoutOwnerInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceScalarWhereInputSchema), zod_1.z.lazy(() => exports.ResidenceScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.ResidenceUpdateOneWithoutResidentNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutResidentInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutResidentInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutResidentInputSchema).optional(),
    upsert: zod_1.z.lazy(() => exports.ResidenceUpsertWithoutResidentInputSchema).optional(),
    disconnect: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceWhereInputSchema)]).optional(),
    delete: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.ResidenceWhereInputSchema)]).optional(),
    connect: zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateToOneWithWhereWithoutResidentInputSchema), zod_1.z.lazy(() => exports.ResidenceUpdateWithoutResidentInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateWithoutResidentInputSchema)]).optional(),
}).strict();
exports.IntFieldUpdateOperationsInputSchema = zod_1.z.object({
    set: zod_1.z.number().optional(),
    increment: zod_1.z.number().optional(),
    decrement: zod_1.z.number().optional(),
    multiply: zod_1.z.number().optional(),
    divide: zod_1.z.number().optional()
}).strict();
exports.PaymentUncheckedUpdateManyWithoutAdminNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentCreateWithoutAdminInputSchema).array(), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutAdminInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutAdminInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpsertWithWhereUniqueWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentUpsertWithWhereUniqueWithoutAdminInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.PaymentCreateManyAdminInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateWithWhereUniqueWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentUpdateWithWhereUniqueWithoutAdminInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateManyWithWhereWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentUpdateManyWithWhereWithoutAdminInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentScalarWhereInputSchema), zod_1.z.lazy(() => exports.PaymentScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.PaymentUncheckedUpdateManyWithoutUserNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentCreateWithoutUserInputSchema).array(), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutUserInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutUserInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpsertWithWhereUniqueWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.PaymentCreateManyUserInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateWithWhereUniqueWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateManyWithWhereWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentScalarWhereInputSchema), zod_1.z.lazy(() => exports.PaymentScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.ResidenceUncheckedUpdateManyWithoutOwnerNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateWithoutOwnerInputSchema).array(), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutOwnerInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutOwnerInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpsertWithWhereUniqueWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceUpsertWithWhereUniqueWithoutOwnerInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ResidenceCreateManyOwnerInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateWithWhereUniqueWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceUpdateWithWhereUniqueWithoutOwnerInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateManyWithWhereWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceUpdateManyWithWhereWithoutOwnerInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceScalarWhereInputSchema), zod_1.z.lazy(() => exports.ResidenceScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.UserCreateNestedOneWithoutResidenceInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutResidenceInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutResidenceInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).optional()
}).strict();
exports.CommunityCreateNestedOneWithoutResidenceInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedCreateWithoutResidenceInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.CommunityCreateOrConnectWithoutResidenceInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.CommunityWhereUniqueInputSchema).optional()
}).strict();
exports.ResidenceTypeCreateNestedOneWithoutResidenceInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateWithoutResidenceInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.ResidenceTypeCreateOrConnectWithoutResidenceInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema).optional()
}).strict();
exports.ParkingSlotCreateNestedManyWithoutResidenceInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotCreateWithoutResidenceInputSchema).array(), zod_1.z.lazy(() => exports.ParkingSlotUncheckedCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotUncheckedCreateWithoutResidenceInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotCreateOrConnectWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotCreateOrConnectWithoutResidenceInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ParkingSlotCreateManyResidenceInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.ExpenseCreateNestedManyWithoutResidenceInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateWithoutResidenceInputSchema).array(), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutResidenceInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutResidenceInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ExpenseCreateManyResidenceInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.UserCreateNestedManyWithoutResidentInInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserCreateWithoutResidentInInputSchema).array(), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutResidentInInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutResidentInInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.UserCreateManyResidentInInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.ParkingSlotUncheckedCreateNestedManyWithoutResidenceInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotCreateWithoutResidenceInputSchema).array(), zod_1.z.lazy(() => exports.ParkingSlotUncheckedCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotUncheckedCreateWithoutResidenceInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotCreateOrConnectWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotCreateOrConnectWithoutResidenceInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ParkingSlotCreateManyResidenceInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.ExpenseUncheckedCreateNestedManyWithoutResidenceInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateWithoutResidenceInputSchema).array(), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutResidenceInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutResidenceInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ExpenseCreateManyResidenceInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.UserUncheckedCreateNestedManyWithoutResidentInInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserCreateWithoutResidentInInputSchema).array(), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutResidentInInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutResidentInInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.UserCreateManyResidentInInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.UserUpdateOneWithoutResidenceNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutResidenceInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutResidenceInputSchema).optional(),
    upsert: zod_1.z.lazy(() => exports.UserUpsertWithoutResidenceInputSchema).optional(),
    disconnect: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.UserWhereInputSchema)]).optional(),
    delete: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.UserWhereInputSchema)]).optional(),
    connect: zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateToOneWithWhereWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.UserUpdateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.UserUncheckedUpdateWithoutResidenceInputSchema)]).optional(),
}).strict();
exports.CommunityUpdateOneRequiredWithoutResidenceNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedCreateWithoutResidenceInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.CommunityCreateOrConnectWithoutResidenceInputSchema).optional(),
    upsert: zod_1.z.lazy(() => exports.CommunityUpsertWithoutResidenceInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.CommunityWhereUniqueInputSchema).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityUpdateToOneWithWhereWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.CommunityUpdateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedUpdateWithoutResidenceInputSchema)]).optional(),
}).strict();
exports.ResidenceTypeUpdateOneRequiredWithoutResidenceNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateWithoutResidenceInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.ResidenceTypeCreateOrConnectWithoutResidenceInputSchema).optional(),
    upsert: zod_1.z.lazy(() => exports.ResidenceTypeUpsertWithoutResidenceInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeUpdateToOneWithWhereWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUpdateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedUpdateWithoutResidenceInputSchema)]).optional(),
}).strict();
exports.ParkingSlotUpdateManyWithoutResidenceNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotCreateWithoutResidenceInputSchema).array(), zod_1.z.lazy(() => exports.ParkingSlotUncheckedCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotUncheckedCreateWithoutResidenceInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotCreateOrConnectWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotCreateOrConnectWithoutResidenceInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotUpsertWithWhereUniqueWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotUpsertWithWhereUniqueWithoutResidenceInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ParkingSlotCreateManyResidenceInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotUpdateWithWhereUniqueWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotUpdateWithWhereUniqueWithoutResidenceInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotUpdateManyWithWhereWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotUpdateManyWithWhereWithoutResidenceInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotScalarWhereInputSchema), zod_1.z.lazy(() => exports.ParkingSlotScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.ExpenseUpdateManyWithoutResidenceNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateWithoutResidenceInputSchema).array(), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutResidenceInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutResidenceInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpsertWithWhereUniqueWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseUpsertWithWhereUniqueWithoutResidenceInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ExpenseCreateManyResidenceInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpdateWithWhereUniqueWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseUpdateWithWhereUniqueWithoutResidenceInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpdateManyWithWhereWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseUpdateManyWithWhereWithoutResidenceInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseScalarWhereInputSchema), zod_1.z.lazy(() => exports.ExpenseScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.UserUpdateManyWithoutResidentInNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserCreateWithoutResidentInInputSchema).array(), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutResidentInInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutResidentInInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpsertWithWhereUniqueWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserUpsertWithWhereUniqueWithoutResidentInInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.UserCreateManyResidentInInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateWithWhereUniqueWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserUpdateWithWhereUniqueWithoutResidentInInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateManyWithWhereWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserUpdateManyWithWhereWithoutResidentInInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.UserScalarWhereInputSchema), zod_1.z.lazy(() => exports.UserScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.ParkingSlotUncheckedUpdateManyWithoutResidenceNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotCreateWithoutResidenceInputSchema).array(), zod_1.z.lazy(() => exports.ParkingSlotUncheckedCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotUncheckedCreateWithoutResidenceInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotCreateOrConnectWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotCreateOrConnectWithoutResidenceInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotUpsertWithWhereUniqueWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotUpsertWithWhereUniqueWithoutResidenceInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ParkingSlotCreateManyResidenceInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotUpdateWithWhereUniqueWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotUpdateWithWhereUniqueWithoutResidenceInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotUpdateManyWithWhereWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotUpdateManyWithWhereWithoutResidenceInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotScalarWhereInputSchema), zod_1.z.lazy(() => exports.ParkingSlotScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.ExpenseUncheckedUpdateManyWithoutResidenceNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateWithoutResidenceInputSchema).array(), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutResidenceInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutResidenceInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpsertWithWhereUniqueWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseUpsertWithWhereUniqueWithoutResidenceInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ExpenseCreateManyResidenceInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpdateWithWhereUniqueWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseUpdateWithWhereUniqueWithoutResidenceInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpdateManyWithWhereWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseUpdateManyWithWhereWithoutResidenceInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseScalarWhereInputSchema), zod_1.z.lazy(() => exports.ExpenseScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.UserUncheckedUpdateManyWithoutResidentInNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserCreateWithoutResidentInInputSchema).array(), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutResidentInInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutResidentInInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpsertWithWhereUniqueWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserUpsertWithWhereUniqueWithoutResidentInInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.UserCreateManyResidentInInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateWithWhereUniqueWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserUpdateWithWhereUniqueWithoutResidentInInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateManyWithWhereWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserUpdateManyWithWhereWithoutResidentInInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.UserScalarWhereInputSchema), zod_1.z.lazy(() => exports.UserScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.ResidenceCreateNestedOneWithoutParkingSlotInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutParkingSlotInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutParkingSlotInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutParkingSlotInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).optional()
}).strict();
exports.ResidenceUpdateOneRequiredWithoutParkingSlotNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutParkingSlotInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutParkingSlotInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutParkingSlotInputSchema).optional(),
    upsert: zod_1.z.lazy(() => exports.ResidenceUpsertWithoutParkingSlotInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateToOneWithWhereWithoutParkingSlotInputSchema), zod_1.z.lazy(() => exports.ResidenceUpdateWithoutParkingSlotInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateWithoutParkingSlotInputSchema)]).optional(),
}).strict();
exports.ResidenceCreateNestedManyWithoutResidenceTypeInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateWithoutResidenceTypeInputSchema).array(), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutResidenceTypeInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutResidenceTypeInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ResidenceCreateManyResidenceTypeInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.ExpenseTypeCreateNestedManyWithoutResidenceTypeInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeCreateWithoutResidenceTypeInputSchema).array(), zod_1.z.lazy(() => exports.ExpenseTypeUncheckedCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUncheckedCreateWithoutResidenceTypeInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeCreateOrConnectWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeCreateOrConnectWithoutResidenceTypeInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ExpenseTypeCreateManyResidenceTypeInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.CommunityCreateNestedOneWithoutResidenceTypeInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedCreateWithoutResidenceTypeInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.CommunityCreateOrConnectWithoutResidenceTypeInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.CommunityWhereUniqueInputSchema).optional()
}).strict();
exports.ResidenceUncheckedCreateNestedManyWithoutResidenceTypeInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateWithoutResidenceTypeInputSchema).array(), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutResidenceTypeInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutResidenceTypeInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ResidenceCreateManyResidenceTypeInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.ExpenseTypeUncheckedCreateNestedManyWithoutResidenceTypeInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeCreateWithoutResidenceTypeInputSchema).array(), zod_1.z.lazy(() => exports.ExpenseTypeUncheckedCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUncheckedCreateWithoutResidenceTypeInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeCreateOrConnectWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeCreateOrConnectWithoutResidenceTypeInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ExpenseTypeCreateManyResidenceTypeInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.ResidenceUpdateManyWithoutResidenceTypeNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateWithoutResidenceTypeInputSchema).array(), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutResidenceTypeInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutResidenceTypeInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpsertWithWhereUniqueWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceUpsertWithWhereUniqueWithoutResidenceTypeInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ResidenceCreateManyResidenceTypeInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateWithWhereUniqueWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceUpdateWithWhereUniqueWithoutResidenceTypeInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateManyWithWhereWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceUpdateManyWithWhereWithoutResidenceTypeInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceScalarWhereInputSchema), zod_1.z.lazy(() => exports.ResidenceScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.ExpenseTypeUpdateManyWithoutResidenceTypeNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeCreateWithoutResidenceTypeInputSchema).array(), zod_1.z.lazy(() => exports.ExpenseTypeUncheckedCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUncheckedCreateWithoutResidenceTypeInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeCreateOrConnectWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeCreateOrConnectWithoutResidenceTypeInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeUpsertWithWhereUniqueWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUpsertWithWhereUniqueWithoutResidenceTypeInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ExpenseTypeCreateManyResidenceTypeInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeUpdateWithWhereUniqueWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUpdateWithWhereUniqueWithoutResidenceTypeInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeUpdateManyWithWhereWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUpdateManyWithWhereWithoutResidenceTypeInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeScalarWhereInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.CommunityUpdateOneRequiredWithoutResidenceTypeNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedCreateWithoutResidenceTypeInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.CommunityCreateOrConnectWithoutResidenceTypeInputSchema).optional(),
    upsert: zod_1.z.lazy(() => exports.CommunityUpsertWithoutResidenceTypeInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.CommunityWhereUniqueInputSchema).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityUpdateToOneWithWhereWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.CommunityUpdateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedUpdateWithoutResidenceTypeInputSchema)]).optional(),
}).strict();
exports.ResidenceUncheckedUpdateManyWithoutResidenceTypeNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateWithoutResidenceTypeInputSchema).array(), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutResidenceTypeInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutResidenceTypeInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpsertWithWhereUniqueWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceUpsertWithWhereUniqueWithoutResidenceTypeInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ResidenceCreateManyResidenceTypeInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateWithWhereUniqueWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceUpdateWithWhereUniqueWithoutResidenceTypeInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateManyWithWhereWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceUpdateManyWithWhereWithoutResidenceTypeInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceScalarWhereInputSchema), zod_1.z.lazy(() => exports.ResidenceScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.ExpenseTypeUncheckedUpdateManyWithoutResidenceTypeNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeCreateWithoutResidenceTypeInputSchema).array(), zod_1.z.lazy(() => exports.ExpenseTypeUncheckedCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUncheckedCreateWithoutResidenceTypeInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeCreateOrConnectWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeCreateOrConnectWithoutResidenceTypeInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeUpsertWithWhereUniqueWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUpsertWithWhereUniqueWithoutResidenceTypeInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ExpenseTypeCreateManyResidenceTypeInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeUpdateWithWhereUniqueWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUpdateWithWhereUniqueWithoutResidenceTypeInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeUpdateManyWithWhereWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUpdateManyWithWhereWithoutResidenceTypeInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeScalarWhereInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.CommunityCreateNestedOneWithoutProviderInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityCreateWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedCreateWithoutProviderInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.CommunityCreateOrConnectWithoutProviderInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.CommunityWhereUniqueInputSchema).optional()
}).strict();
exports.CashoutCreateNestedManyWithoutProviderInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutCreateWithoutProviderInputSchema).array(), zod_1.z.lazy(() => exports.CashoutUncheckedCreateWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutUncheckedCreateWithoutProviderInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateOrConnectWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutCreateOrConnectWithoutProviderInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.CashoutCreateManyProviderInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema), zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.CashoutUncheckedCreateNestedManyWithoutProviderInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutCreateWithoutProviderInputSchema).array(), zod_1.z.lazy(() => exports.CashoutUncheckedCreateWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutUncheckedCreateWithoutProviderInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateOrConnectWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutCreateOrConnectWithoutProviderInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.CashoutCreateManyProviderInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema), zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.BoolFieldUpdateOperationsInputSchema = zod_1.z.object({
    set: zod_1.z.boolean().optional()
}).strict();
exports.CommunityUpdateOneRequiredWithoutProviderNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityCreateWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedCreateWithoutProviderInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.CommunityCreateOrConnectWithoutProviderInputSchema).optional(),
    upsert: zod_1.z.lazy(() => exports.CommunityUpsertWithoutProviderInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.CommunityWhereUniqueInputSchema).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityUpdateToOneWithWhereWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CommunityUpdateWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedUpdateWithoutProviderInputSchema)]).optional(),
}).strict();
exports.CashoutUpdateManyWithoutProviderNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutCreateWithoutProviderInputSchema).array(), zod_1.z.lazy(() => exports.CashoutUncheckedCreateWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutUncheckedCreateWithoutProviderInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateOrConnectWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutCreateOrConnectWithoutProviderInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutUpsertWithWhereUniqueWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutUpsertWithWhereUniqueWithoutProviderInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.CashoutCreateManyProviderInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema), zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema), zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema), zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema), zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutUpdateWithWhereUniqueWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutUpdateWithWhereUniqueWithoutProviderInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutUpdateManyWithWhereWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutUpdateManyWithWhereWithoutProviderInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutScalarWhereInputSchema), zod_1.z.lazy(() => exports.CashoutScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.CashoutUncheckedUpdateManyWithoutProviderNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutCreateWithoutProviderInputSchema).array(), zod_1.z.lazy(() => exports.CashoutUncheckedCreateWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutUncheckedCreateWithoutProviderInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateOrConnectWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutCreateOrConnectWithoutProviderInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutUpsertWithWhereUniqueWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutUpsertWithWhereUniqueWithoutProviderInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.CashoutCreateManyProviderInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema), zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema), zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema), zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema), zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutUpdateWithWhereUniqueWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutUpdateWithWhereUniqueWithoutProviderInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutUpdateManyWithWhereWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutUpdateManyWithWhereWithoutProviderInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutScalarWhereInputSchema), zod_1.z.lazy(() => exports.CashoutScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.UserCreateNestedManyWithoutRoleInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserCreateWithoutRoleInputSchema).array(), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutRoleInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutRoleInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.UserCreateManyRoleInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.UserUncheckedCreateNestedManyWithoutRoleInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserCreateWithoutRoleInputSchema).array(), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutRoleInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutRoleInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.UserCreateManyRoleInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.UserUpdateManyWithoutRoleNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserCreateWithoutRoleInputSchema).array(), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutRoleInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutRoleInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpsertWithWhereUniqueWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserUpsertWithWhereUniqueWithoutRoleInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.UserCreateManyRoleInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateWithWhereUniqueWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserUpdateWithWhereUniqueWithoutRoleInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateManyWithWhereWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserUpdateManyWithWhereWithoutRoleInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.UserScalarWhereInputSchema), zod_1.z.lazy(() => exports.UserScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.UserUncheckedUpdateManyWithoutRoleNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserCreateWithoutRoleInputSchema).array(), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutRoleInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutRoleInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpsertWithWhereUniqueWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserUpsertWithWhereUniqueWithoutRoleInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.UserCreateManyRoleInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema), zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateWithWhereUniqueWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserUpdateWithWhereUniqueWithoutRoleInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateManyWithWhereWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserUpdateManyWithWhereWithoutRoleInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.UserScalarWhereInputSchema), zod_1.z.lazy(() => exports.UserScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.ResidenceCreateNestedOneWithoutExpenseInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutExpenseInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutExpenseInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).optional()
}).strict();
exports.ExpenseTypeCreateNestedOneWithoutExpenseInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeCreateWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUncheckedCreateWithoutExpenseInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.ExpenseTypeCreateOrConnectWithoutExpenseInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema).optional()
}).strict();
exports.PaymentCreateNestedOneWithoutExpenseInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutExpenseInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutExpenseInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).optional()
}).strict();
exports.DateTimeFieldUpdateOperationsInputSchema = zod_1.z.object({
    set: zod_1.z.coerce.date().optional()
}).strict();
exports.ResidenceUpdateOneRequiredWithoutExpenseNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutExpenseInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.ResidenceCreateOrConnectWithoutExpenseInputSchema).optional(),
    upsert: zod_1.z.lazy(() => exports.ResidenceUpsertWithoutExpenseInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateToOneWithWhereWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.ResidenceUpdateWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateWithoutExpenseInputSchema)]).optional(),
}).strict();
exports.ExpenseTypeUpdateOneRequiredWithoutExpenseNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeCreateWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUncheckedCreateWithoutExpenseInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.ExpenseTypeCreateOrConnectWithoutExpenseInputSchema).optional(),
    upsert: zod_1.z.lazy(() => exports.ExpenseTypeUpsertWithoutExpenseInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeUpdateToOneWithWhereWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUpdateWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUncheckedUpdateWithoutExpenseInputSchema)]).optional(),
}).strict();
exports.PaymentUpdateOneRequiredWithoutExpenseNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutExpenseInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutExpenseInputSchema).optional(),
    upsert: zod_1.z.lazy(() => exports.PaymentUpsertWithoutExpenseInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateToOneWithWhereWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.PaymentUpdateWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedUpdateWithoutExpenseInputSchema)]).optional(),
}).strict();
exports.ExpenseCreateNestedManyWithoutPaymentInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateWithoutPaymentInputSchema).array(), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutPaymentInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutPaymentInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ExpenseCreateManyPaymentInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.UserCreateNestedOneWithoutPaymentsMadeInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutPaymentsMadeInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutPaymentsMadeInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutPaymentsMadeInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).optional()
}).strict();
exports.AccountCreateNestedOneWithoutPaymentInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.AccountCreateWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedCreateWithoutPaymentInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.AccountCreateOrConnectWithoutPaymentInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema).optional()
}).strict();
exports.UserCreateNestedOneWithoutPaymentsCreatedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutPaymentsCreatedInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutPaymentsCreatedInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutPaymentsCreatedInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).optional()
}).strict();
exports.ExpenseUncheckedCreateNestedManyWithoutPaymentInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateWithoutPaymentInputSchema).array(), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutPaymentInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutPaymentInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ExpenseCreateManyPaymentInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.DecimalFieldUpdateOperationsInputSchema = zod_1.z.object({
    set: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    increment: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    decrement: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    multiply: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    divide: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional()
}).strict();
exports.ExpenseUpdateManyWithoutPaymentNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateWithoutPaymentInputSchema).array(), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutPaymentInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutPaymentInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpsertWithWhereUniqueWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseUpsertWithWhereUniqueWithoutPaymentInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ExpenseCreateManyPaymentInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpdateWithWhereUniqueWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseUpdateWithWhereUniqueWithoutPaymentInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpdateManyWithWhereWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseUpdateManyWithWhereWithoutPaymentInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseScalarWhereInputSchema), zod_1.z.lazy(() => exports.ExpenseScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.UserUpdateOneRequiredWithoutPaymentsMadeNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutPaymentsMadeInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutPaymentsMadeInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutPaymentsMadeInputSchema).optional(),
    upsert: zod_1.z.lazy(() => exports.UserUpsertWithoutPaymentsMadeInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateToOneWithWhereWithoutPaymentsMadeInputSchema), zod_1.z.lazy(() => exports.UserUpdateWithoutPaymentsMadeInputSchema), zod_1.z.lazy(() => exports.UserUncheckedUpdateWithoutPaymentsMadeInputSchema)]).optional(),
}).strict();
exports.AccountUpdateOneRequiredWithoutPaymentNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.AccountCreateWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedCreateWithoutPaymentInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.AccountCreateOrConnectWithoutPaymentInputSchema).optional(),
    upsert: zod_1.z.lazy(() => exports.AccountUpsertWithoutPaymentInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.AccountUpdateToOneWithWhereWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.AccountUpdateWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedUpdateWithoutPaymentInputSchema)]).optional(),
}).strict();
exports.UserUpdateOneRequiredWithoutPaymentsCreatedNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutPaymentsCreatedInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutPaymentsCreatedInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.UserCreateOrConnectWithoutPaymentsCreatedInputSchema).optional(),
    upsert: zod_1.z.lazy(() => exports.UserUpsertWithoutPaymentsCreatedInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateToOneWithWhereWithoutPaymentsCreatedInputSchema), zod_1.z.lazy(() => exports.UserUpdateWithoutPaymentsCreatedInputSchema), zod_1.z.lazy(() => exports.UserUncheckedUpdateWithoutPaymentsCreatedInputSchema)]).optional(),
}).strict();
exports.ExpenseUncheckedUpdateManyWithoutPaymentNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateWithoutPaymentInputSchema).array(), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutPaymentInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutPaymentInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpsertWithWhereUniqueWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseUpsertWithWhereUniqueWithoutPaymentInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ExpenseCreateManyPaymentInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpdateWithWhereUniqueWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseUpdateWithWhereUniqueWithoutPaymentInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpdateManyWithWhereWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseUpdateManyWithWhereWithoutPaymentInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseScalarWhereInputSchema), zod_1.z.lazy(() => exports.ExpenseScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.ProviderCreateNestedOneWithoutCashoutInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderCreateWithoutCashoutInputSchema), zod_1.z.lazy(() => exports.ProviderUncheckedCreateWithoutCashoutInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.ProviderCreateOrConnectWithoutCashoutInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema).optional()
}).strict();
exports.AccountCreateNestedOneWithoutCashoutInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.AccountCreateWithoutCashoutInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedCreateWithoutCashoutInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.AccountCreateOrConnectWithoutCashoutInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema).optional()
}).strict();
exports.ProviderUpdateOneRequiredWithoutCashoutNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderCreateWithoutCashoutInputSchema), zod_1.z.lazy(() => exports.ProviderUncheckedCreateWithoutCashoutInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.ProviderCreateOrConnectWithoutCashoutInputSchema).optional(),
    upsert: zod_1.z.lazy(() => exports.ProviderUpsertWithoutCashoutInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderUpdateToOneWithWhereWithoutCashoutInputSchema), zod_1.z.lazy(() => exports.ProviderUpdateWithoutCashoutInputSchema), zod_1.z.lazy(() => exports.ProviderUncheckedUpdateWithoutCashoutInputSchema)]).optional(),
}).strict();
exports.AccountUpdateOneRequiredWithoutCashoutNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.AccountCreateWithoutCashoutInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedCreateWithoutCashoutInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.AccountCreateOrConnectWithoutCashoutInputSchema).optional(),
    upsert: zod_1.z.lazy(() => exports.AccountUpsertWithoutCashoutInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.AccountUpdateToOneWithWhereWithoutCashoutInputSchema), zod_1.z.lazy(() => exports.AccountUpdateWithoutCashoutInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedUpdateWithoutCashoutInputSchema)]).optional(),
}).strict();
exports.ResidenceTypeCreateNestedOneWithoutExpenseTypeInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeCreateWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateWithoutExpenseTypeInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.ResidenceTypeCreateOrConnectWithoutExpenseTypeInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema).optional()
}).strict();
exports.ExpenseCreateNestedManyWithoutExpenseTypeInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateWithoutExpenseTypeInputSchema).array(), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutExpenseTypeInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutExpenseTypeInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ExpenseCreateManyExpenseTypeInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.ExpenseUncheckedCreateNestedManyWithoutExpenseTypeInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateWithoutExpenseTypeInputSchema).array(), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutExpenseTypeInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutExpenseTypeInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ExpenseCreateManyExpenseTypeInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.ResidenceTypeUpdateOneRequiredWithoutExpenseTypeNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeCreateWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateWithoutExpenseTypeInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.ResidenceTypeCreateOrConnectWithoutExpenseTypeInputSchema).optional(),
    upsert: zod_1.z.lazy(() => exports.ResidenceTypeUpsertWithoutExpenseTypeInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeUpdateToOneWithWhereWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUpdateWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedUpdateWithoutExpenseTypeInputSchema)]).optional(),
}).strict();
exports.ExpenseUpdateManyWithoutExpenseTypeNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateWithoutExpenseTypeInputSchema).array(), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutExpenseTypeInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutExpenseTypeInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpsertWithWhereUniqueWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseUpsertWithWhereUniqueWithoutExpenseTypeInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ExpenseCreateManyExpenseTypeInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpdateWithWhereUniqueWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseUpdateWithWhereUniqueWithoutExpenseTypeInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpdateManyWithWhereWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseUpdateManyWithWhereWithoutExpenseTypeInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseScalarWhereInputSchema), zod_1.z.lazy(() => exports.ExpenseScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.ExpenseUncheckedUpdateManyWithoutExpenseTypeNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateWithoutExpenseTypeInputSchema).array(), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutExpenseTypeInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateOrConnectWithoutExpenseTypeInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpsertWithWhereUniqueWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseUpsertWithWhereUniqueWithoutExpenseTypeInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.ExpenseCreateManyExpenseTypeInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema), zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpdateWithWhereUniqueWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseUpdateWithWhereUniqueWithoutExpenseTypeInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpdateManyWithWhereWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseUpdateManyWithWhereWithoutExpenseTypeInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseScalarWhereInputSchema), zod_1.z.lazy(() => exports.ExpenseScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.CommunityCreateNestedOneWithoutAccountInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedCreateWithoutAccountInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.CommunityCreateOrConnectWithoutAccountInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.CommunityWhereUniqueInputSchema).optional()
}).strict();
exports.PaymentCreateNestedManyWithoutAccountInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentCreateWithoutAccountInputSchema).array(), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutAccountInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutAccountInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.PaymentCreateManyAccountInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.CashoutCreateNestedManyWithoutAccountInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutCreateWithoutAccountInputSchema).array(), zod_1.z.lazy(() => exports.CashoutUncheckedCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutUncheckedCreateWithoutAccountInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateOrConnectWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutCreateOrConnectWithoutAccountInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.CashoutCreateManyAccountInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema), zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.PaymentUncheckedCreateNestedManyWithoutAccountInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentCreateWithoutAccountInputSchema).array(), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutAccountInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutAccountInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.PaymentCreateManyAccountInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.CashoutUncheckedCreateNestedManyWithoutAccountInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutCreateWithoutAccountInputSchema).array(), zod_1.z.lazy(() => exports.CashoutUncheckedCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutUncheckedCreateWithoutAccountInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateOrConnectWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutCreateOrConnectWithoutAccountInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.CashoutCreateManyAccountInputEnvelopeSchema).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema), zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema).array()]).optional(),
}).strict();
exports.BigIntFieldUpdateOperationsInputSchema = zod_1.z.object({
    set: zod_1.z.bigint().optional(),
    increment: zod_1.z.bigint().optional(),
    decrement: zod_1.z.bigint().optional(),
    multiply: zod_1.z.bigint().optional(),
    divide: zod_1.z.bigint().optional()
}).strict();
exports.CommunityUpdateOneRequiredWithoutAccountNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedCreateWithoutAccountInputSchema)]).optional(),
    connectOrCreate: zod_1.z.lazy(() => exports.CommunityCreateOrConnectWithoutAccountInputSchema).optional(),
    upsert: zod_1.z.lazy(() => exports.CommunityUpsertWithoutAccountInputSchema).optional(),
    connect: zod_1.z.lazy(() => exports.CommunityWhereUniqueInputSchema).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityUpdateToOneWithWhereWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CommunityUpdateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedUpdateWithoutAccountInputSchema)]).optional(),
}).strict();
exports.PaymentUpdateManyWithoutAccountNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentCreateWithoutAccountInputSchema).array(), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutAccountInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutAccountInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpsertWithWhereUniqueWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentUpsertWithWhereUniqueWithoutAccountInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.PaymentCreateManyAccountInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateWithWhereUniqueWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentUpdateWithWhereUniqueWithoutAccountInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateManyWithWhereWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentUpdateManyWithWhereWithoutAccountInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentScalarWhereInputSchema), zod_1.z.lazy(() => exports.PaymentScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.CashoutUpdateManyWithoutAccountNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutCreateWithoutAccountInputSchema).array(), zod_1.z.lazy(() => exports.CashoutUncheckedCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutUncheckedCreateWithoutAccountInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateOrConnectWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutCreateOrConnectWithoutAccountInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutUpsertWithWhereUniqueWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutUpsertWithWhereUniqueWithoutAccountInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.CashoutCreateManyAccountInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema), zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema), zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema), zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema), zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutUpdateWithWhereUniqueWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutUpdateWithWhereUniqueWithoutAccountInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutUpdateManyWithWhereWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutUpdateManyWithWhereWithoutAccountInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutScalarWhereInputSchema), zod_1.z.lazy(() => exports.CashoutScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.PaymentUncheckedUpdateManyWithoutAccountNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentCreateWithoutAccountInputSchema).array(), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutAccountInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentCreateOrConnectWithoutAccountInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpsertWithWhereUniqueWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentUpsertWithWhereUniqueWithoutAccountInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.PaymentCreateManyAccountInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema), zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateWithWhereUniqueWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentUpdateWithWhereUniqueWithoutAccountInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateManyWithWhereWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentUpdateManyWithWhereWithoutAccountInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentScalarWhereInputSchema), zod_1.z.lazy(() => exports.PaymentScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.CashoutUncheckedUpdateManyWithoutAccountNestedInputSchema = zod_1.z.object({
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutCreateWithoutAccountInputSchema).array(), zod_1.z.lazy(() => exports.CashoutUncheckedCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutUncheckedCreateWithoutAccountInputSchema).array()]).optional(),
    connectOrCreate: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateOrConnectWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutCreateOrConnectWithoutAccountInputSchema).array()]).optional(),
    upsert: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutUpsertWithWhereUniqueWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutUpsertWithWhereUniqueWithoutAccountInputSchema).array()]).optional(),
    createMany: zod_1.z.lazy(() => exports.CashoutCreateManyAccountInputEnvelopeSchema).optional(),
    set: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema), zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema).array()]).optional(),
    disconnect: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema), zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema).array()]).optional(),
    delete: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema), zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema).array()]).optional(),
    connect: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema), zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema).array()]).optional(),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutUpdateWithWhereUniqueWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutUpdateWithWhereUniqueWithoutAccountInputSchema).array()]).optional(),
    updateMany: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutUpdateManyWithWhereWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutUpdateManyWithWhereWithoutAccountInputSchema).array()]).optional(),
    deleteMany: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutScalarWhereInputSchema), zod_1.z.lazy(() => exports.CashoutScalarWhereInputSchema).array()]).optional(),
}).strict();
exports.NestedStringFilterSchema = zod_1.z.object({
    equals: zod_1.z.string().optional(),
    in: zod_1.z.string().array().optional(),
    notIn: zod_1.z.string().array().optional(),
    lt: zod_1.z.string().optional(),
    lte: zod_1.z.string().optional(),
    gt: zod_1.z.string().optional(),
    gte: zod_1.z.string().optional(),
    contains: zod_1.z.string().optional(),
    startsWith: zod_1.z.string().optional(),
    endsWith: zod_1.z.string().optional(),
    not: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NestedStringFilterSchema)]).optional(),
}).strict();
exports.NestedStringWithAggregatesFilterSchema = zod_1.z.object({
    equals: zod_1.z.string().optional(),
    in: zod_1.z.string().array().optional(),
    notIn: zod_1.z.string().array().optional(),
    lt: zod_1.z.string().optional(),
    lte: zod_1.z.string().optional(),
    gt: zod_1.z.string().optional(),
    gte: zod_1.z.string().optional(),
    contains: zod_1.z.string().optional(),
    startsWith: zod_1.z.string().optional(),
    endsWith: zod_1.z.string().optional(),
    not: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NestedStringWithAggregatesFilterSchema)]).optional(),
    _count: zod_1.z.lazy(() => exports.NestedIntFilterSchema).optional(),
    _min: zod_1.z.lazy(() => exports.NestedStringFilterSchema).optional(),
    _max: zod_1.z.lazy(() => exports.NestedStringFilterSchema).optional()
}).strict();
exports.NestedIntFilterSchema = zod_1.z.object({
    equals: zod_1.z.number().optional(),
    in: zod_1.z.number().array().optional(),
    notIn: zod_1.z.number().array().optional(),
    lt: zod_1.z.number().optional(),
    lte: zod_1.z.number().optional(),
    gt: zod_1.z.number().optional(),
    gte: zod_1.z.number().optional(),
    not: zod_1.z.union([zod_1.z.number(), zod_1.z.lazy(() => exports.NestedIntFilterSchema)]).optional(),
}).strict();
exports.NestedStringNullableFilterSchema = zod_1.z.object({
    equals: zod_1.z.string().optional().nullable(),
    in: zod_1.z.string().array().optional().nullable(),
    notIn: zod_1.z.string().array().optional().nullable(),
    lt: zod_1.z.string().optional(),
    lte: zod_1.z.string().optional(),
    gt: zod_1.z.string().optional(),
    gte: zod_1.z.string().optional(),
    contains: zod_1.z.string().optional(),
    startsWith: zod_1.z.string().optional(),
    endsWith: zod_1.z.string().optional(),
    not: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NestedStringNullableFilterSchema)]).optional().nullable(),
}).strict();
exports.NestedBoolNullableFilterSchema = zod_1.z.object({
    equals: zod_1.z.boolean().optional().nullable(),
    not: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NestedBoolNullableFilterSchema)]).optional().nullable(),
}).strict();
exports.NestedStringNullableWithAggregatesFilterSchema = zod_1.z.object({
    equals: zod_1.z.string().optional().nullable(),
    in: zod_1.z.string().array().optional().nullable(),
    notIn: zod_1.z.string().array().optional().nullable(),
    lt: zod_1.z.string().optional(),
    lte: zod_1.z.string().optional(),
    gt: zod_1.z.string().optional(),
    gte: zod_1.z.string().optional(),
    contains: zod_1.z.string().optional(),
    startsWith: zod_1.z.string().optional(),
    endsWith: zod_1.z.string().optional(),
    not: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NestedStringNullableWithAggregatesFilterSchema)]).optional().nullable(),
    _count: zod_1.z.lazy(() => exports.NestedIntNullableFilterSchema).optional(),
    _min: zod_1.z.lazy(() => exports.NestedStringNullableFilterSchema).optional(),
    _max: zod_1.z.lazy(() => exports.NestedStringNullableFilterSchema).optional()
}).strict();
exports.NestedIntNullableFilterSchema = zod_1.z.object({
    equals: zod_1.z.number().optional().nullable(),
    in: zod_1.z.number().array().optional().nullable(),
    notIn: zod_1.z.number().array().optional().nullable(),
    lt: zod_1.z.number().optional(),
    lte: zod_1.z.number().optional(),
    gt: zod_1.z.number().optional(),
    gte: zod_1.z.number().optional(),
    not: zod_1.z.union([zod_1.z.number(), zod_1.z.lazy(() => exports.NestedIntNullableFilterSchema)]).optional().nullable(),
}).strict();
exports.NestedBoolNullableWithAggregatesFilterSchema = zod_1.z.object({
    equals: zod_1.z.boolean().optional().nullable(),
    not: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NestedBoolNullableWithAggregatesFilterSchema)]).optional().nullable(),
    _count: zod_1.z.lazy(() => exports.NestedIntNullableFilterSchema).optional(),
    _min: zod_1.z.lazy(() => exports.NestedBoolNullableFilterSchema).optional(),
    _max: zod_1.z.lazy(() => exports.NestedBoolNullableFilterSchema).optional()
}).strict();
exports.NestedIntWithAggregatesFilterSchema = zod_1.z.object({
    equals: zod_1.z.number().optional(),
    in: zod_1.z.number().array().optional(),
    notIn: zod_1.z.number().array().optional(),
    lt: zod_1.z.number().optional(),
    lte: zod_1.z.number().optional(),
    gt: zod_1.z.number().optional(),
    gte: zod_1.z.number().optional(),
    not: zod_1.z.union([zod_1.z.number(), zod_1.z.lazy(() => exports.NestedIntWithAggregatesFilterSchema)]).optional(),
    _count: zod_1.z.lazy(() => exports.NestedIntFilterSchema).optional(),
    _avg: zod_1.z.lazy(() => exports.NestedFloatFilterSchema).optional(),
    _sum: zod_1.z.lazy(() => exports.NestedIntFilterSchema).optional(),
    _min: zod_1.z.lazy(() => exports.NestedIntFilterSchema).optional(),
    _max: zod_1.z.lazy(() => exports.NestedIntFilterSchema).optional()
}).strict();
exports.NestedFloatFilterSchema = zod_1.z.object({
    equals: zod_1.z.number().optional(),
    in: zod_1.z.number().array().optional(),
    notIn: zod_1.z.number().array().optional(),
    lt: zod_1.z.number().optional(),
    lte: zod_1.z.number().optional(),
    gt: zod_1.z.number().optional(),
    gte: zod_1.z.number().optional(),
    not: zod_1.z.union([zod_1.z.number(), zod_1.z.lazy(() => exports.NestedFloatFilterSchema)]).optional(),
}).strict();
exports.NestedJsonNullableFilterSchema = zod_1.z.object({
    equals: exports.InputJsonValueSchema.optional(),
    path: zod_1.z.string().array().optional(),
    string_contains: zod_1.z.string().optional(),
    string_starts_with: zod_1.z.string().optional(),
    string_ends_with: zod_1.z.string().optional(),
    array_contains: exports.InputJsonValueSchema.optional().nullable(),
    array_starts_with: exports.InputJsonValueSchema.optional().nullable(),
    array_ends_with: exports.InputJsonValueSchema.optional().nullable(),
    lt: exports.InputJsonValueSchema.optional(),
    lte: exports.InputJsonValueSchema.optional(),
    gt: exports.InputJsonValueSchema.optional(),
    gte: exports.InputJsonValueSchema.optional(),
    not: exports.InputJsonValueSchema.optional()
}).strict();
exports.NestedBoolFilterSchema = zod_1.z.object({
    equals: zod_1.z.boolean().optional(),
    not: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NestedBoolFilterSchema)]).optional(),
}).strict();
exports.NestedBoolWithAggregatesFilterSchema = zod_1.z.object({
    equals: zod_1.z.boolean().optional(),
    not: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NestedBoolWithAggregatesFilterSchema)]).optional(),
    _count: zod_1.z.lazy(() => exports.NestedIntFilterSchema).optional(),
    _min: zod_1.z.lazy(() => exports.NestedBoolFilterSchema).optional(),
    _max: zod_1.z.lazy(() => exports.NestedBoolFilterSchema).optional()
}).strict();
exports.NestedDateTimeFilterSchema = zod_1.z.object({
    equals: zod_1.z.coerce.date().optional(),
    in: zod_1.z.coerce.date().array().optional(),
    notIn: zod_1.z.coerce.date().array().optional(),
    lt: zod_1.z.coerce.date().optional(),
    lte: zod_1.z.coerce.date().optional(),
    gt: zod_1.z.coerce.date().optional(),
    gte: zod_1.z.coerce.date().optional(),
    not: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.NestedDateTimeFilterSchema)]).optional(),
}).strict();
exports.NestedDateTimeWithAggregatesFilterSchema = zod_1.z.object({
    equals: zod_1.z.coerce.date().optional(),
    in: zod_1.z.coerce.date().array().optional(),
    notIn: zod_1.z.coerce.date().array().optional(),
    lt: zod_1.z.coerce.date().optional(),
    lte: zod_1.z.coerce.date().optional(),
    gt: zod_1.z.coerce.date().optional(),
    gte: zod_1.z.coerce.date().optional(),
    not: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.NestedDateTimeWithAggregatesFilterSchema)]).optional(),
    _count: zod_1.z.lazy(() => exports.NestedIntFilterSchema).optional(),
    _min: zod_1.z.lazy(() => exports.NestedDateTimeFilterSchema).optional(),
    _max: zod_1.z.lazy(() => exports.NestedDateTimeFilterSchema).optional()
}).strict();
exports.NestedDecimalFilterSchema = zod_1.z.object({
    equals: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    in: zod_1.z.union([zod_1.z.number().array(), zod_1.z.string().array(), zod_1.z.instanceof(client_1.Prisma.Decimal).array(), exports.DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && v.every((v) => (0, exports.isValidDecimalInput)(v)), { message: 'Must be a Decimal' }).optional(),
    notIn: zod_1.z.union([zod_1.z.number().array(), zod_1.z.string().array(), zod_1.z.instanceof(client_1.Prisma.Decimal).array(), exports.DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && v.every((v) => (0, exports.isValidDecimalInput)(v)), { message: 'Must be a Decimal' }).optional(),
    lt: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    lte: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    gt: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    gte: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    not: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.NestedDecimalFilterSchema)]).optional(),
}).strict();
exports.NestedDecimalWithAggregatesFilterSchema = zod_1.z.object({
    equals: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    in: zod_1.z.union([zod_1.z.number().array(), zod_1.z.string().array(), zod_1.z.instanceof(client_1.Prisma.Decimal).array(), exports.DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && v.every((v) => (0, exports.isValidDecimalInput)(v)), { message: 'Must be a Decimal' }).optional(),
    notIn: zod_1.z.union([zod_1.z.number().array(), zod_1.z.string().array(), zod_1.z.instanceof(client_1.Prisma.Decimal).array(), exports.DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && v.every((v) => (0, exports.isValidDecimalInput)(v)), { message: 'Must be a Decimal' }).optional(),
    lt: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    lte: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    gt: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    gte: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }).optional(),
    not: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.NestedDecimalWithAggregatesFilterSchema)]).optional(),
    _count: zod_1.z.lazy(() => exports.NestedIntFilterSchema).optional(),
    _avg: zod_1.z.lazy(() => exports.NestedDecimalFilterSchema).optional(),
    _sum: zod_1.z.lazy(() => exports.NestedDecimalFilterSchema).optional(),
    _min: zod_1.z.lazy(() => exports.NestedDecimalFilterSchema).optional(),
    _max: zod_1.z.lazy(() => exports.NestedDecimalFilterSchema).optional()
}).strict();
exports.NestedBigIntFilterSchema = zod_1.z.object({
    equals: zod_1.z.bigint().optional(),
    in: zod_1.z.bigint().array().optional(),
    notIn: zod_1.z.bigint().array().optional(),
    lt: zod_1.z.bigint().optional(),
    lte: zod_1.z.bigint().optional(),
    gt: zod_1.z.bigint().optional(),
    gte: zod_1.z.bigint().optional(),
    not: zod_1.z.union([zod_1.z.bigint(), zod_1.z.lazy(() => exports.NestedBigIntFilterSchema)]).optional(),
}).strict();
exports.NestedBigIntWithAggregatesFilterSchema = zod_1.z.object({
    equals: zod_1.z.bigint().optional(),
    in: zod_1.z.bigint().array().optional(),
    notIn: zod_1.z.bigint().array().optional(),
    lt: zod_1.z.bigint().optional(),
    lte: zod_1.z.bigint().optional(),
    gt: zod_1.z.bigint().optional(),
    gte: zod_1.z.bigint().optional(),
    not: zod_1.z.union([zod_1.z.bigint(), zod_1.z.lazy(() => exports.NestedBigIntWithAggregatesFilterSchema)]).optional(),
    _count: zod_1.z.lazy(() => exports.NestedIntFilterSchema).optional(),
    _avg: zod_1.z.lazy(() => exports.NestedFloatFilterSchema).optional(),
    _sum: zod_1.z.lazy(() => exports.NestedBigIntFilterSchema).optional(),
    _min: zod_1.z.lazy(() => exports.NestedBigIntFilterSchema).optional(),
    _max: zod_1.z.lazy(() => exports.NestedBigIntFilterSchema).optional()
}).strict();
exports.ResidenceCreateWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    Owner: zod_1.z.lazy(() => exports.UserCreateNestedOneWithoutResidenceInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeCreateNestedOneWithoutResidenceInputSchema),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotCreateNestedManyWithoutResidenceInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseCreateNestedManyWithoutResidenceInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserCreateNestedManyWithoutResidentInInputSchema).optional()
}).strict();
exports.ResidenceUncheckedCreateWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    owner_id: zod_1.z.string().optional().nullable(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    residenceType_id: zod_1.z.number().int(),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotUncheckedCreateNestedManyWithoutResidenceInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedCreateNestedManyWithoutResidenceInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserUncheckedCreateNestedManyWithoutResidentInInputSchema).optional()
}).strict();
exports.ResidenceCreateOrConnectWithoutCommunityInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutCommunityInputSchema)]),
}).strict();
exports.ResidenceCreateManyCommunityInputEnvelopeSchema = zod_1.z.object({
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateManyCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateManyCommunityInputSchema).array()]),
    skipDuplicates: zod_1.z.boolean().optional()
}).strict();
exports.ProviderCreateWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    contactName: zod_1.z.string(),
    description: zod_1.z.string(),
    phone: zod_1.z.string(),
    email: zod_1.z.string().optional().nullable(),
    address: zod_1.z.string().optional().nullable(),
    website: zod_1.z.string().optional().nullable(),
    active: zod_1.z.boolean(),
    Cashout: zod_1.z.lazy(() => exports.CashoutCreateNestedManyWithoutProviderInputSchema).optional()
}).strict();
exports.ProviderUncheckedCreateWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    contactName: zod_1.z.string(),
    description: zod_1.z.string(),
    phone: zod_1.z.string(),
    email: zod_1.z.string().optional().nullable(),
    address: zod_1.z.string().optional().nullable(),
    website: zod_1.z.string().optional().nullable(),
    active: zod_1.z.boolean(),
    Cashout: zod_1.z.lazy(() => exports.CashoutUncheckedCreateNestedManyWithoutProviderInputSchema).optional()
}).strict();
exports.ProviderCreateOrConnectWithoutCommunityInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderUncheckedCreateWithoutCommunityInputSchema)]),
}).strict();
exports.ProviderCreateManyCommunityInputEnvelopeSchema = zod_1.z.object({
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderCreateManyCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderCreateManyCommunityInputSchema).array()]),
    skipDuplicates: zod_1.z.boolean().optional()
}).strict();
exports.UserCreateWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    userName: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string().optional().nullable(),
    identification: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    phone: zod_1.z.string(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    Role: zod_1.z.lazy(() => exports.RoleCreateNestedOneWithoutUserInputSchema).optional(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentCreateNestedManyWithoutAdminInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentCreateNestedManyWithoutUserInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceCreateNestedManyWithoutOwnerInputSchema).optional(),
    ResidentIn: zod_1.z.lazy(() => exports.ResidenceCreateNestedOneWithoutResidentInputSchema).optional()
}).strict();
exports.UserUncheckedCreateWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    userName: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string().optional().nullable(),
    identification: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    phone: zod_1.z.string(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    role_id: zod_1.z.number().int(),
    residence_id: zod_1.z.string().optional().nullable(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentUncheckedCreateNestedManyWithoutAdminInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedCreateNestedManyWithoutOwnerInputSchema).optional()
}).strict();
exports.UserCreateOrConnectWithoutCommunityInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutCommunityInputSchema)]),
}).strict();
exports.UserCreateManyCommunityInputEnvelopeSchema = zod_1.z.object({
    data: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateManyCommunityInputSchema), zod_1.z.lazy(() => exports.UserCreateManyCommunityInputSchema).array()]),
    skipDuplicates: zod_1.z.boolean().optional()
}).strict();
exports.AccountCreateWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    active: zod_1.z.boolean(),
    balance: zod_1.z.bigint(),
    Payment: zod_1.z.lazy(() => exports.PaymentCreateNestedManyWithoutAccountInputSchema).optional(),
    Cashout: zod_1.z.lazy(() => exports.CashoutCreateNestedManyWithoutAccountInputSchema).optional()
}).strict();
exports.AccountUncheckedCreateWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    active: zod_1.z.boolean(),
    balance: zod_1.z.bigint(),
    Payment: zod_1.z.lazy(() => exports.PaymentUncheckedCreateNestedManyWithoutAccountInputSchema).optional(),
    Cashout: zod_1.z.lazy(() => exports.CashoutUncheckedCreateNestedManyWithoutAccountInputSchema).optional()
}).strict();
exports.AccountCreateOrConnectWithoutCommunityInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.AccountCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedCreateWithoutCommunityInputSchema)]),
}).strict();
exports.AccountCreateManyCommunityInputEnvelopeSchema = zod_1.z.object({
    data: zod_1.z.union([zod_1.z.lazy(() => exports.AccountCreateManyCommunityInputSchema), zod_1.z.lazy(() => exports.AccountCreateManyCommunityInputSchema).array()]),
    skipDuplicates: zod_1.z.boolean().optional()
}).strict();
exports.ResidenceTypeCreateWithoutCommunityInputSchema = zod_1.z.object({
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    Residence: zod_1.z.lazy(() => exports.ResidenceCreateNestedManyWithoutResidenceTypeInputSchema).optional(),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeCreateNestedManyWithoutResidenceTypeInputSchema).optional()
}).strict();
exports.ResidenceTypeUncheckedCreateWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.number().int().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedCreateNestedManyWithoutResidenceTypeInputSchema).optional(),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeUncheckedCreateNestedManyWithoutResidenceTypeInputSchema).optional()
}).strict();
exports.ResidenceTypeCreateOrConnectWithoutCommunityInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateWithoutCommunityInputSchema)]),
}).strict();
exports.ResidenceTypeCreateManyCommunityInputEnvelopeSchema = zod_1.z.object({
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeCreateManyCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeCreateManyCommunityInputSchema).array()]),
    skipDuplicates: zod_1.z.boolean().optional()
}).strict();
exports.ResidenceUpsertWithWhereUniqueWithoutCommunityInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateWithoutCommunityInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutCommunityInputSchema)]),
}).strict();
exports.ResidenceUpdateWithWhereUniqueWithoutCommunityInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateWithoutCommunityInputSchema)]),
}).strict();
exports.ResidenceUpdateManyWithWhereWithoutCommunityInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceScalarWhereInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateManyMutationInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateManyWithoutCommunityInputSchema)]),
}).strict();
exports.ResidenceScalarWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceScalarWhereInputSchema), zod_1.z.lazy(() => exports.ResidenceScalarWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ResidenceScalarWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceScalarWhereInputSchema), zod_1.z.lazy(() => exports.ResidenceScalarWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    owner_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableFilterSchema), zod_1.z.string()]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    contacts: zod_1.z.lazy(() => exports.JsonNullableFilterSchema).optional(),
    residenceType_id: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number()]).optional(),
}).strict();
exports.ProviderUpsertWithWhereUniqueWithoutCommunityInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderUpdateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderUncheckedUpdateWithoutCommunityInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderUncheckedCreateWithoutCommunityInputSchema)]),
}).strict();
exports.ProviderUpdateWithWhereUniqueWithoutCommunityInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderUpdateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ProviderUncheckedUpdateWithoutCommunityInputSchema)]),
}).strict();
exports.ProviderUpdateManyWithWhereWithoutCommunityInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ProviderScalarWhereInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderUpdateManyMutationInputSchema), zod_1.z.lazy(() => exports.ProviderUncheckedUpdateManyWithoutCommunityInputSchema)]),
}).strict();
exports.ProviderScalarWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderScalarWhereInputSchema), zod_1.z.lazy(() => exports.ProviderScalarWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ProviderScalarWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderScalarWhereInputSchema), zod_1.z.lazy(() => exports.ProviderScalarWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    contactName: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    phone: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    email: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableFilterSchema), zod_1.z.string()]).optional().nullable(),
    address: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableFilterSchema), zod_1.z.string()]).optional().nullable(),
    website: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableFilterSchema), zod_1.z.string()]).optional().nullable(),
    active: zod_1.z.union([zod_1.z.lazy(() => exports.BoolFilterSchema), zod_1.z.boolean()]).optional(),
    community_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
}).strict();
exports.UserUpsertWithWhereUniqueWithoutCommunityInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserUncheckedUpdateWithoutCommunityInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutCommunityInputSchema)]),
}).strict();
exports.UserUpdateWithWhereUniqueWithoutCommunityInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.UserUncheckedUpdateWithoutCommunityInputSchema)]),
}).strict();
exports.UserUpdateManyWithWhereWithoutCommunityInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.UserScalarWhereInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateManyMutationInputSchema), zod_1.z.lazy(() => exports.UserUncheckedUpdateManyWithoutCommunityInputSchema)]),
}).strict();
exports.UserScalarWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.UserScalarWhereInputSchema), zod_1.z.lazy(() => exports.UserScalarWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.UserScalarWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.UserScalarWhereInputSchema), zod_1.z.lazy(() => exports.UserScalarWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    userName: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    email: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    password: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableFilterSchema), zod_1.z.string()]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    firstName: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    lastName: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    phone: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    isVerified: zod_1.z.union([zod_1.z.lazy(() => exports.BoolNullableFilterSchema), zod_1.z.boolean()]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.lazy(() => exports.BoolNullableFilterSchema), zod_1.z.boolean()]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    role_id: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number()]).optional(),
    residence_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringNullableFilterSchema), zod_1.z.string()]).optional().nullable(),
}).strict();
exports.AccountUpsertWithWhereUniqueWithoutCommunityInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.AccountUpdateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedUpdateWithoutCommunityInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.AccountCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedCreateWithoutCommunityInputSchema)]),
}).strict();
exports.AccountUpdateWithWhereUniqueWithoutCommunityInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.AccountUpdateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedUpdateWithoutCommunityInputSchema)]),
}).strict();
exports.AccountUpdateManyWithWhereWithoutCommunityInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.AccountScalarWhereInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.AccountUpdateManyMutationInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedUpdateManyWithoutCommunityInputSchema)]),
}).strict();
exports.AccountScalarWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.AccountScalarWhereInputSchema), zod_1.z.lazy(() => exports.AccountScalarWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.AccountScalarWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.AccountScalarWhereInputSchema), zod_1.z.lazy(() => exports.AccountScalarWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    active: zod_1.z.union([zod_1.z.lazy(() => exports.BoolFilterSchema), zod_1.z.boolean()]).optional(),
    community_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    balance: zod_1.z.union([zod_1.z.lazy(() => exports.BigIntFilterSchema), zod_1.z.bigint()]).optional(),
}).strict();
exports.ResidenceTypeUpsertWithWhereUniqueWithoutCommunityInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeUpdateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedUpdateWithoutCommunityInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeCreateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateWithoutCommunityInputSchema)]),
}).strict();
exports.ResidenceTypeUpdateWithWhereUniqueWithoutCommunityInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeUpdateWithoutCommunityInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedUpdateWithoutCommunityInputSchema)]),
}).strict();
exports.ResidenceTypeUpdateManyWithWhereWithoutCommunityInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceTypeScalarWhereInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeUpdateManyMutationInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedUpdateManyWithoutCommunityInputSchema)]),
}).strict();
exports.ResidenceTypeScalarWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeScalarWhereInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeScalarWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ResidenceTypeScalarWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeScalarWhereInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeScalarWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    community_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
}).strict();
exports.CommunityCreateWithoutUserInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    address: zod_1.z.string(),
    Residence: zod_1.z.lazy(() => exports.ResidenceCreateNestedManyWithoutCommunityInputSchema).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderCreateNestedManyWithoutCommunityInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountCreateNestedManyWithoutCommunityInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeCreateNestedManyWithoutCommunityInputSchema).optional()
}).strict();
exports.CommunityUncheckedCreateWithoutUserInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    address: zod_1.z.string(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedCreateNestedManyWithoutCommunityInputSchema).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderUncheckedCreateNestedManyWithoutCommunityInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountUncheckedCreateNestedManyWithoutCommunityInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateNestedManyWithoutCommunityInputSchema).optional()
}).strict();
exports.CommunityCreateOrConnectWithoutUserInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.CommunityWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityCreateWithoutUserInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedCreateWithoutUserInputSchema)]),
}).strict();
exports.RoleCreateWithoutUserInputSchema = zod_1.z.object({
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    modules: zod_1.z.string()
}).strict();
exports.RoleUncheckedCreateWithoutUserInputSchema = zod_1.z.object({
    id: zod_1.z.number().int().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    modules: zod_1.z.string()
}).strict();
exports.RoleCreateOrConnectWithoutUserInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.RoleWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.RoleCreateWithoutUserInputSchema), zod_1.z.lazy(() => exports.RoleUncheckedCreateWithoutUserInputSchema)]),
}).strict();
exports.PaymentCreateWithoutAdminInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    voucherImage: zod_1.z.string(),
    isEmailSend: zod_1.z.boolean(),
    Expense: zod_1.z.lazy(() => exports.ExpenseCreateNestedManyWithoutPaymentInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserCreateNestedOneWithoutPaymentsMadeInputSchema),
    Account: zod_1.z.lazy(() => exports.AccountCreateNestedOneWithoutPaymentInputSchema)
}).strict();
exports.PaymentUncheckedCreateWithoutAdminInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    owner_id: zod_1.z.string(),
    voucherImage: zod_1.z.string(),
    isEmailSend: zod_1.z.boolean(),
    account_id: zod_1.z.string(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedCreateNestedManyWithoutPaymentInputSchema).optional()
}).strict();
exports.PaymentCreateOrConnectWithoutAdminInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutAdminInputSchema)]),
}).strict();
exports.PaymentCreateManyAdminInputEnvelopeSchema = zod_1.z.object({
    data: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateManyAdminInputSchema), zod_1.z.lazy(() => exports.PaymentCreateManyAdminInputSchema).array()]),
    skipDuplicates: zod_1.z.boolean().optional()
}).strict();
exports.PaymentCreateWithoutUserInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    voucherImage: zod_1.z.string(),
    isEmailSend: zod_1.z.boolean(),
    Expense: zod_1.z.lazy(() => exports.ExpenseCreateNestedManyWithoutPaymentInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountCreateNestedOneWithoutPaymentInputSchema),
    Admin: zod_1.z.lazy(() => exports.UserCreateNestedOneWithoutPaymentsCreatedInputSchema)
}).strict();
exports.PaymentUncheckedCreateWithoutUserInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    voucherImage: zod_1.z.string(),
    isEmailSend: zod_1.z.boolean(),
    account_id: zod_1.z.string(),
    created_by: zod_1.z.string(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedCreateNestedManyWithoutPaymentInputSchema).optional()
}).strict();
exports.PaymentCreateOrConnectWithoutUserInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutUserInputSchema)]),
}).strict();
exports.PaymentCreateManyUserInputEnvelopeSchema = zod_1.z.object({
    data: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateManyUserInputSchema), zod_1.z.lazy(() => exports.PaymentCreateManyUserInputSchema).array()]),
    skipDuplicates: zod_1.z.boolean().optional()
}).strict();
exports.ResidenceCreateWithoutOwnerInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityCreateNestedOneWithoutResidenceInputSchema),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeCreateNestedOneWithoutResidenceInputSchema),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotCreateNestedManyWithoutResidenceInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseCreateNestedManyWithoutResidenceInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserCreateNestedManyWithoutResidentInInputSchema).optional()
}).strict();
exports.ResidenceUncheckedCreateWithoutOwnerInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    community_id: zod_1.z.string(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    residenceType_id: zod_1.z.number().int(),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotUncheckedCreateNestedManyWithoutResidenceInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedCreateNestedManyWithoutResidenceInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserUncheckedCreateNestedManyWithoutResidentInInputSchema).optional()
}).strict();
exports.ResidenceCreateOrConnectWithoutOwnerInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutOwnerInputSchema)]),
}).strict();
exports.ResidenceCreateManyOwnerInputEnvelopeSchema = zod_1.z.object({
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateManyOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateManyOwnerInputSchema).array()]),
    skipDuplicates: zod_1.z.boolean().optional()
}).strict();
exports.ResidenceCreateWithoutResidentInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    Owner: zod_1.z.lazy(() => exports.UserCreateNestedOneWithoutResidenceInputSchema).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityCreateNestedOneWithoutResidenceInputSchema),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeCreateNestedOneWithoutResidenceInputSchema),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotCreateNestedManyWithoutResidenceInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseCreateNestedManyWithoutResidenceInputSchema).optional()
}).strict();
exports.ResidenceUncheckedCreateWithoutResidentInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    owner_id: zod_1.z.string().optional().nullable(),
    community_id: zod_1.z.string(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    residenceType_id: zod_1.z.number().int(),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotUncheckedCreateNestedManyWithoutResidenceInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedCreateNestedManyWithoutResidenceInputSchema).optional()
}).strict();
exports.ResidenceCreateOrConnectWithoutResidentInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutResidentInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutResidentInputSchema)]),
}).strict();
exports.CommunityUpsertWithoutUserInputSchema = zod_1.z.object({
    update: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityUpdateWithoutUserInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedUpdateWithoutUserInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityCreateWithoutUserInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedCreateWithoutUserInputSchema)]),
    where: zod_1.z.lazy(() => exports.CommunityWhereInputSchema).optional()
}).strict();
exports.CommunityUpdateToOneWithWhereWithoutUserInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.CommunityWhereInputSchema).optional(),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityUpdateWithoutUserInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedUpdateWithoutUserInputSchema)]),
}).strict();
exports.CommunityUpdateWithoutUserInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUpdateManyWithoutCommunityNestedInputSchema).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderUpdateManyWithoutCommunityNestedInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountUpdateManyWithoutCommunityNestedInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUpdateManyWithoutCommunityNestedInputSchema).optional()
}).strict();
exports.CommunityUncheckedUpdateWithoutUserInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional()
}).strict();
exports.RoleUpsertWithoutUserInputSchema = zod_1.z.object({
    update: zod_1.z.union([zod_1.z.lazy(() => exports.RoleUpdateWithoutUserInputSchema), zod_1.z.lazy(() => exports.RoleUncheckedUpdateWithoutUserInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.RoleCreateWithoutUserInputSchema), zod_1.z.lazy(() => exports.RoleUncheckedCreateWithoutUserInputSchema)]),
    where: zod_1.z.lazy(() => exports.RoleWhereInputSchema).optional()
}).strict();
exports.RoleUpdateToOneWithWhereWithoutUserInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.RoleWhereInputSchema).optional(),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.RoleUpdateWithoutUserInputSchema), zod_1.z.lazy(() => exports.RoleUncheckedUpdateWithoutUserInputSchema)]),
}).strict();
exports.RoleUpdateWithoutUserInputSchema = zod_1.z.object({
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    modules: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.RoleUncheckedUpdateWithoutUserInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    modules: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.PaymentUpsertWithWhereUniqueWithoutAdminInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedUpdateWithoutAdminInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutAdminInputSchema)]),
}).strict();
exports.PaymentUpdateWithWhereUniqueWithoutAdminInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateWithoutAdminInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedUpdateWithoutAdminInputSchema)]),
}).strict();
exports.PaymentUpdateManyWithWhereWithoutAdminInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.PaymentScalarWhereInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateManyMutationInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedUpdateManyWithoutAdminInputSchema)]),
}).strict();
exports.PaymentScalarWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentScalarWhereInputSchema), zod_1.z.lazy(() => exports.PaymentScalarWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.PaymentScalarWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentScalarWhereInputSchema), zod_1.z.lazy(() => exports.PaymentScalarWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    registerDate: zod_1.z.union([zod_1.z.lazy(() => exports.DateTimeFilterSchema), zod_1.z.coerce.date()]).optional(),
    amount: zod_1.z.union([zod_1.z.lazy(() => exports.DecimalFilterSchema), zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' })]).optional(),
    owner_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    voucherImage: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    isEmailSend: zod_1.z.union([zod_1.z.lazy(() => exports.BoolFilterSchema), zod_1.z.boolean()]).optional(),
    account_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    created_by: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
}).strict();
exports.PaymentUpsertWithWhereUniqueWithoutUserInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedUpdateWithoutUserInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutUserInputSchema)]),
}).strict();
exports.PaymentUpdateWithWhereUniqueWithoutUserInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateWithoutUserInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedUpdateWithoutUserInputSchema)]),
}).strict();
exports.PaymentUpdateManyWithWhereWithoutUserInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.PaymentScalarWhereInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateManyMutationInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedUpdateManyWithoutUserInputSchema)]),
}).strict();
exports.ResidenceUpsertWithWhereUniqueWithoutOwnerInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateWithoutOwnerInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutOwnerInputSchema)]),
}).strict();
exports.ResidenceUpdateWithWhereUniqueWithoutOwnerInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateWithoutOwnerInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateWithoutOwnerInputSchema)]),
}).strict();
exports.ResidenceUpdateManyWithWhereWithoutOwnerInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceScalarWhereInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateManyMutationInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateManyWithoutOwnerInputSchema)]),
}).strict();
exports.ResidenceUpsertWithoutResidentInputSchema = zod_1.z.object({
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateWithoutResidentInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateWithoutResidentInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutResidentInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutResidentInputSchema)]),
    where: zod_1.z.lazy(() => exports.ResidenceWhereInputSchema).optional()
}).strict();
exports.ResidenceUpdateToOneWithWhereWithoutResidentInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceWhereInputSchema).optional(),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateWithoutResidentInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateWithoutResidentInputSchema)]),
}).strict();
exports.ResidenceUpdateWithoutResidentInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    Owner: zod_1.z.lazy(() => exports.UserUpdateOneWithoutResidenceNestedInputSchema).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityUpdateOneRequiredWithoutResidenceNestedInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUpdateOneRequiredWithoutResidenceNestedInputSchema).optional(),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUpdateManyWithoutResidenceNestedInputSchema).optional()
}).strict();
exports.ResidenceUncheckedUpdateWithoutResidentInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    owner_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    residenceType_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotUncheckedUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedUpdateManyWithoutResidenceNestedInputSchema).optional()
}).strict();
exports.UserCreateWithoutResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    userName: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string().optional().nullable(),
    identification: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    phone: zod_1.z.string(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    Community: zod_1.z.lazy(() => exports.CommunityCreateNestedOneWithoutUserInputSchema).optional(),
    Role: zod_1.z.lazy(() => exports.RoleCreateNestedOneWithoutUserInputSchema).optional(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentCreateNestedManyWithoutAdminInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentCreateNestedManyWithoutUserInputSchema).optional(),
    ResidentIn: zod_1.z.lazy(() => exports.ResidenceCreateNestedOneWithoutResidentInputSchema).optional()
}).strict();
exports.UserUncheckedCreateWithoutResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    userName: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string().optional().nullable(),
    identification: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    phone: zod_1.z.string(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    community_id: zod_1.z.string().optional(),
    role_id: zod_1.z.number().int(),
    residence_id: zod_1.z.string().optional().nullable(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentUncheckedCreateNestedManyWithoutAdminInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();
exports.UserCreateOrConnectWithoutResidenceInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutResidenceInputSchema)]),
}).strict();
exports.CommunityCreateWithoutResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    address: zod_1.z.string(),
    Provider: zod_1.z.lazy(() => exports.ProviderCreateNestedManyWithoutCommunityInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserCreateNestedManyWithoutCommunityInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountCreateNestedManyWithoutCommunityInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeCreateNestedManyWithoutCommunityInputSchema).optional()
}).strict();
exports.CommunityUncheckedCreateWithoutResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    address: zod_1.z.string(),
    Provider: zod_1.z.lazy(() => exports.ProviderUncheckedCreateNestedManyWithoutCommunityInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserUncheckedCreateNestedManyWithoutCommunityInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountUncheckedCreateNestedManyWithoutCommunityInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateNestedManyWithoutCommunityInputSchema).optional()
}).strict();
exports.CommunityCreateOrConnectWithoutResidenceInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.CommunityWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedCreateWithoutResidenceInputSchema)]),
}).strict();
exports.ResidenceTypeCreateWithoutResidenceInputSchema = zod_1.z.object({
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeCreateNestedManyWithoutResidenceTypeInputSchema).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityCreateNestedOneWithoutResidenceTypeInputSchema)
}).strict();
exports.ResidenceTypeUncheckedCreateWithoutResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.number().int().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    community_id: zod_1.z.string(),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeUncheckedCreateNestedManyWithoutResidenceTypeInputSchema).optional()
}).strict();
exports.ResidenceTypeCreateOrConnectWithoutResidenceInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateWithoutResidenceInputSchema)]),
}).strict();
exports.ParkingSlotCreateWithoutResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    number: zod_1.z.number().int()
}).strict();
exports.ParkingSlotUncheckedCreateWithoutResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    number: zod_1.z.number().int()
}).strict();
exports.ParkingSlotCreateOrConnectWithoutResidenceInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotUncheckedCreateWithoutResidenceInputSchema)]),
}).strict();
exports.ParkingSlotCreateManyResidenceInputEnvelopeSchema = zod_1.z.object({
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotCreateManyResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotCreateManyResidenceInputSchema).array()]),
    skipDuplicates: zod_1.z.boolean().optional()
}).strict();
exports.ExpenseCreateWithoutResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    emitingDate: zod_1.z.coerce.date(),
    expireDate: zod_1.z.coerce.date(),
    status: zod_1.z.string(),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeCreateNestedOneWithoutExpenseInputSchema),
    Payment: zod_1.z.lazy(() => exports.PaymentCreateNestedOneWithoutExpenseInputSchema)
}).strict();
exports.ExpenseUncheckedCreateWithoutResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    emitingDate: zod_1.z.coerce.date(),
    expireDate: zod_1.z.coerce.date(),
    status: zod_1.z.string(),
    expenseType_id: zod_1.z.number().int(),
    payment_id: zod_1.z.string()
}).strict();
exports.ExpenseCreateOrConnectWithoutResidenceInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutResidenceInputSchema)]),
}).strict();
exports.ExpenseCreateManyResidenceInputEnvelopeSchema = zod_1.z.object({
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateManyResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateManyResidenceInputSchema).array()]),
    skipDuplicates: zod_1.z.boolean().optional()
}).strict();
exports.UserCreateWithoutResidentInInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    userName: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string().optional().nullable(),
    identification: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    phone: zod_1.z.string(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    Community: zod_1.z.lazy(() => exports.CommunityCreateNestedOneWithoutUserInputSchema).optional(),
    Role: zod_1.z.lazy(() => exports.RoleCreateNestedOneWithoutUserInputSchema).optional(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentCreateNestedManyWithoutAdminInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentCreateNestedManyWithoutUserInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceCreateNestedManyWithoutOwnerInputSchema).optional()
}).strict();
exports.UserUncheckedCreateWithoutResidentInInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    userName: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string().optional().nullable(),
    identification: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    phone: zod_1.z.string(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    community_id: zod_1.z.string().optional(),
    role_id: zod_1.z.number().int(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentUncheckedCreateNestedManyWithoutAdminInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedCreateNestedManyWithoutOwnerInputSchema).optional()
}).strict();
exports.UserCreateOrConnectWithoutResidentInInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutResidentInInputSchema)]),
}).strict();
exports.UserCreateManyResidentInInputEnvelopeSchema = zod_1.z.object({
    data: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateManyResidentInInputSchema), zod_1.z.lazy(() => exports.UserCreateManyResidentInInputSchema).array()]),
    skipDuplicates: zod_1.z.boolean().optional()
}).strict();
exports.UserUpsertWithoutResidenceInputSchema = zod_1.z.object({
    update: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.UserUncheckedUpdateWithoutResidenceInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutResidenceInputSchema)]),
    where: zod_1.z.lazy(() => exports.UserWhereInputSchema).optional()
}).strict();
exports.UserUpdateToOneWithWhereWithoutResidenceInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.UserWhereInputSchema).optional(),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.UserUncheckedUpdateWithoutResidenceInputSchema)]),
}).strict();
exports.UserUpdateWithoutResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    userName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    password: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    firstName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    lastName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isVerified: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    Community: zod_1.z.lazy(() => exports.CommunityUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
    Role: zod_1.z.lazy(() => exports.RoleUpdateOneWithoutUserNestedInputSchema).optional(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentUpdateManyWithoutAdminNestedInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentUpdateManyWithoutUserNestedInputSchema).optional(),
    ResidentIn: zod_1.z.lazy(() => exports.ResidenceUpdateOneWithoutResidentNestedInputSchema).optional()
}).strict();
exports.UserUncheckedUpdateWithoutResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    userName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    password: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    firstName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    lastName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isVerified: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    role_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    residence_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentUncheckedUpdateManyWithoutAdminNestedInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();
exports.CommunityUpsertWithoutResidenceInputSchema = zod_1.z.object({
    update: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityUpdateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedUpdateWithoutResidenceInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedCreateWithoutResidenceInputSchema)]),
    where: zod_1.z.lazy(() => exports.CommunityWhereInputSchema).optional()
}).strict();
exports.CommunityUpdateToOneWithWhereWithoutResidenceInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.CommunityWhereInputSchema).optional(),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityUpdateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedUpdateWithoutResidenceInputSchema)]),
}).strict();
exports.CommunityUpdateWithoutResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderUpdateManyWithoutCommunityNestedInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserUpdateManyWithoutCommunityNestedInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountUpdateManyWithoutCommunityNestedInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUpdateManyWithoutCommunityNestedInputSchema).optional()
}).strict();
exports.CommunityUncheckedUpdateWithoutResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional()
}).strict();
exports.ResidenceTypeUpsertWithoutResidenceInputSchema = zod_1.z.object({
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeUpdateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedUpdateWithoutResidenceInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateWithoutResidenceInputSchema)]),
    where: zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema).optional()
}).strict();
exports.ResidenceTypeUpdateToOneWithWhereWithoutResidenceInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema).optional(),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeUpdateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedUpdateWithoutResidenceInputSchema)]),
}).strict();
exports.ResidenceTypeUpdateWithoutResidenceInputSchema = zod_1.z.object({
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeUpdateManyWithoutResidenceTypeNestedInputSchema).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityUpdateOneRequiredWithoutResidenceTypeNestedInputSchema).optional()
}).strict();
exports.ResidenceTypeUncheckedUpdateWithoutResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeUncheckedUpdateManyWithoutResidenceTypeNestedInputSchema).optional()
}).strict();
exports.ParkingSlotUpsertWithWhereUniqueWithoutResidenceInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotUpdateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotUncheckedUpdateWithoutResidenceInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotUncheckedCreateWithoutResidenceInputSchema)]),
}).strict();
exports.ParkingSlotUpdateWithWhereUniqueWithoutResidenceInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ParkingSlotWhereUniqueInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotUpdateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ParkingSlotUncheckedUpdateWithoutResidenceInputSchema)]),
}).strict();
exports.ParkingSlotUpdateManyWithWhereWithoutResidenceInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ParkingSlotScalarWhereInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotUpdateManyMutationInputSchema), zod_1.z.lazy(() => exports.ParkingSlotUncheckedUpdateManyWithoutResidenceInputSchema)]),
}).strict();
exports.ParkingSlotScalarWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotScalarWhereInputSchema), zod_1.z.lazy(() => exports.ParkingSlotScalarWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ParkingSlotScalarWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ParkingSlotScalarWhereInputSchema), zod_1.z.lazy(() => exports.ParkingSlotScalarWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    number: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number()]).optional(),
    residence_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
}).strict();
exports.ExpenseUpsertWithWhereUniqueWithoutResidenceInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpdateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedUpdateWithoutResidenceInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutResidenceInputSchema)]),
}).strict();
exports.ExpenseUpdateWithWhereUniqueWithoutResidenceInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpdateWithoutResidenceInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedUpdateWithoutResidenceInputSchema)]),
}).strict();
exports.ExpenseUpdateManyWithWhereWithoutResidenceInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ExpenseScalarWhereInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpdateManyMutationInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedUpdateManyWithoutResidenceInputSchema)]),
}).strict();
exports.ExpenseScalarWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseScalarWhereInputSchema), zod_1.z.lazy(() => exports.ExpenseScalarWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ExpenseScalarWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseScalarWhereInputSchema), zod_1.z.lazy(() => exports.ExpenseScalarWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    residence_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    emitingDate: zod_1.z.union([zod_1.z.lazy(() => exports.DateTimeFilterSchema), zod_1.z.coerce.date()]).optional(),
    expireDate: zod_1.z.union([zod_1.z.lazy(() => exports.DateTimeFilterSchema), zod_1.z.coerce.date()]).optional(),
    status: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    expenseType_id: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number()]).optional(),
    payment_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
}).strict();
exports.UserUpsertWithWhereUniqueWithoutResidentInInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserUncheckedUpdateWithoutResidentInInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutResidentInInputSchema)]),
}).strict();
exports.UserUpdateWithWhereUniqueWithoutResidentInInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateWithoutResidentInInputSchema), zod_1.z.lazy(() => exports.UserUncheckedUpdateWithoutResidentInInputSchema)]),
}).strict();
exports.UserUpdateManyWithWhereWithoutResidentInInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.UserScalarWhereInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateManyMutationInputSchema), zod_1.z.lazy(() => exports.UserUncheckedUpdateManyWithoutResidentInInputSchema)]),
}).strict();
exports.ResidenceCreateWithoutParkingSlotInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    Owner: zod_1.z.lazy(() => exports.UserCreateNestedOneWithoutResidenceInputSchema).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityCreateNestedOneWithoutResidenceInputSchema),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeCreateNestedOneWithoutResidenceInputSchema),
    Expense: zod_1.z.lazy(() => exports.ExpenseCreateNestedManyWithoutResidenceInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserCreateNestedManyWithoutResidentInInputSchema).optional()
}).strict();
exports.ResidenceUncheckedCreateWithoutParkingSlotInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    owner_id: zod_1.z.string().optional().nullable(),
    community_id: zod_1.z.string(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    residenceType_id: zod_1.z.number().int(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedCreateNestedManyWithoutResidenceInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserUncheckedCreateNestedManyWithoutResidentInInputSchema).optional()
}).strict();
exports.ResidenceCreateOrConnectWithoutParkingSlotInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutParkingSlotInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutParkingSlotInputSchema)]),
}).strict();
exports.ResidenceUpsertWithoutParkingSlotInputSchema = zod_1.z.object({
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateWithoutParkingSlotInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateWithoutParkingSlotInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutParkingSlotInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutParkingSlotInputSchema)]),
    where: zod_1.z.lazy(() => exports.ResidenceWhereInputSchema).optional()
}).strict();
exports.ResidenceUpdateToOneWithWhereWithoutParkingSlotInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceWhereInputSchema).optional(),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateWithoutParkingSlotInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateWithoutParkingSlotInputSchema)]),
}).strict();
exports.ResidenceUpdateWithoutParkingSlotInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    Owner: zod_1.z.lazy(() => exports.UserUpdateOneWithoutResidenceNestedInputSchema).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityUpdateOneRequiredWithoutResidenceNestedInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUpdateOneRequiredWithoutResidenceNestedInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserUpdateManyWithoutResidentInNestedInputSchema).optional()
}).strict();
exports.ResidenceUncheckedUpdateWithoutParkingSlotInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    owner_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    residenceType_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserUncheckedUpdateManyWithoutResidentInNestedInputSchema).optional()
}).strict();
exports.ResidenceCreateWithoutResidenceTypeInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    Owner: zod_1.z.lazy(() => exports.UserCreateNestedOneWithoutResidenceInputSchema).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityCreateNestedOneWithoutResidenceInputSchema),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotCreateNestedManyWithoutResidenceInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseCreateNestedManyWithoutResidenceInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserCreateNestedManyWithoutResidentInInputSchema).optional()
}).strict();
exports.ResidenceUncheckedCreateWithoutResidenceTypeInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    owner_id: zod_1.z.string().optional().nullable(),
    community_id: zod_1.z.string(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotUncheckedCreateNestedManyWithoutResidenceInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedCreateNestedManyWithoutResidenceInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserUncheckedCreateNestedManyWithoutResidentInInputSchema).optional()
}).strict();
exports.ResidenceCreateOrConnectWithoutResidenceTypeInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutResidenceTypeInputSchema)]),
}).strict();
exports.ResidenceCreateManyResidenceTypeInputEnvelopeSchema = zod_1.z.object({
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateManyResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceCreateManyResidenceTypeInputSchema).array()]),
    skipDuplicates: zod_1.z.boolean().optional()
}).strict();
exports.ExpenseTypeCreateWithoutResidenceTypeInputSchema = zod_1.z.object({
    title: zod_1.z.string(),
    value: zod_1.z.number().int(),
    Expense: zod_1.z.lazy(() => exports.ExpenseCreateNestedManyWithoutExpenseTypeInputSchema).optional()
}).strict();
exports.ExpenseTypeUncheckedCreateWithoutResidenceTypeInputSchema = zod_1.z.object({
    id: zod_1.z.number().int().optional(),
    title: zod_1.z.string(),
    value: zod_1.z.number().int(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedCreateNestedManyWithoutExpenseTypeInputSchema).optional()
}).strict();
exports.ExpenseTypeCreateOrConnectWithoutResidenceTypeInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUncheckedCreateWithoutResidenceTypeInputSchema)]),
}).strict();
exports.ExpenseTypeCreateManyResidenceTypeInputEnvelopeSchema = zod_1.z.object({
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeCreateManyResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeCreateManyResidenceTypeInputSchema).array()]),
    skipDuplicates: zod_1.z.boolean().optional()
}).strict();
exports.CommunityCreateWithoutResidenceTypeInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    address: zod_1.z.string(),
    Residence: zod_1.z.lazy(() => exports.ResidenceCreateNestedManyWithoutCommunityInputSchema).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderCreateNestedManyWithoutCommunityInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserCreateNestedManyWithoutCommunityInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountCreateNestedManyWithoutCommunityInputSchema).optional()
}).strict();
exports.CommunityUncheckedCreateWithoutResidenceTypeInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    address: zod_1.z.string(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedCreateNestedManyWithoutCommunityInputSchema).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderUncheckedCreateNestedManyWithoutCommunityInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserUncheckedCreateNestedManyWithoutCommunityInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountUncheckedCreateNestedManyWithoutCommunityInputSchema).optional()
}).strict();
exports.CommunityCreateOrConnectWithoutResidenceTypeInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.CommunityWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedCreateWithoutResidenceTypeInputSchema)]),
}).strict();
exports.ResidenceUpsertWithWhereUniqueWithoutResidenceTypeInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateWithoutResidenceTypeInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutResidenceTypeInputSchema)]),
}).strict();
exports.ResidenceUpdateWithWhereUniqueWithoutResidenceTypeInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateWithoutResidenceTypeInputSchema)]),
}).strict();
exports.ResidenceUpdateManyWithWhereWithoutResidenceTypeInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceScalarWhereInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateManyMutationInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateManyWithoutResidenceTypeInputSchema)]),
}).strict();
exports.ExpenseTypeUpsertWithWhereUniqueWithoutResidenceTypeInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeUpdateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUncheckedUpdateWithoutResidenceTypeInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUncheckedCreateWithoutResidenceTypeInputSchema)]),
}).strict();
exports.ExpenseTypeUpdateWithWhereUniqueWithoutResidenceTypeInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeUpdateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUncheckedUpdateWithoutResidenceTypeInputSchema)]),
}).strict();
exports.ExpenseTypeUpdateManyWithWhereWithoutResidenceTypeInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ExpenseTypeScalarWhereInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeUpdateManyMutationInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUncheckedUpdateManyWithoutResidenceTypeInputSchema)]),
}).strict();
exports.ExpenseTypeScalarWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeScalarWhereInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeScalarWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.ExpenseTypeScalarWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeScalarWhereInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeScalarWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    value: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number()]).optional(),
    residenceType_id: zod_1.z.union([zod_1.z.lazy(() => exports.IntFilterSchema), zod_1.z.number()]).optional(),
}).strict();
exports.CommunityUpsertWithoutResidenceTypeInputSchema = zod_1.z.object({
    update: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityUpdateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedUpdateWithoutResidenceTypeInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityCreateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedCreateWithoutResidenceTypeInputSchema)]),
    where: zod_1.z.lazy(() => exports.CommunityWhereInputSchema).optional()
}).strict();
exports.CommunityUpdateToOneWithWhereWithoutResidenceTypeInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.CommunityWhereInputSchema).optional(),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityUpdateWithoutResidenceTypeInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedUpdateWithoutResidenceTypeInputSchema)]),
}).strict();
exports.CommunityUpdateWithoutResidenceTypeInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUpdateManyWithoutCommunityNestedInputSchema).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderUpdateManyWithoutCommunityNestedInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserUpdateManyWithoutCommunityNestedInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountUpdateManyWithoutCommunityNestedInputSchema).optional()
}).strict();
exports.CommunityUncheckedUpdateWithoutResidenceTypeInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional()
}).strict();
exports.CommunityCreateWithoutProviderInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    address: zod_1.z.string(),
    Residence: zod_1.z.lazy(() => exports.ResidenceCreateNestedManyWithoutCommunityInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserCreateNestedManyWithoutCommunityInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountCreateNestedManyWithoutCommunityInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeCreateNestedManyWithoutCommunityInputSchema).optional()
}).strict();
exports.CommunityUncheckedCreateWithoutProviderInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    address: zod_1.z.string(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedCreateNestedManyWithoutCommunityInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserUncheckedCreateNestedManyWithoutCommunityInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountUncheckedCreateNestedManyWithoutCommunityInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateNestedManyWithoutCommunityInputSchema).optional()
}).strict();
exports.CommunityCreateOrConnectWithoutProviderInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.CommunityWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityCreateWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedCreateWithoutProviderInputSchema)]),
}).strict();
exports.CashoutCreateWithoutProviderInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    billImage: zod_1.z.string(),
    status: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date(),
    Account: zod_1.z.lazy(() => exports.AccountCreateNestedOneWithoutCashoutInputSchema)
}).strict();
exports.CashoutUncheckedCreateWithoutProviderInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    billImage: zod_1.z.string(),
    account_id: zod_1.z.string(),
    status: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date()
}).strict();
exports.CashoutCreateOrConnectWithoutProviderInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutUncheckedCreateWithoutProviderInputSchema)]),
}).strict();
exports.CashoutCreateManyProviderInputEnvelopeSchema = zod_1.z.object({
    data: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateManyProviderInputSchema), zod_1.z.lazy(() => exports.CashoutCreateManyProviderInputSchema).array()]),
    skipDuplicates: zod_1.z.boolean().optional()
}).strict();
exports.CommunityUpsertWithoutProviderInputSchema = zod_1.z.object({
    update: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityUpdateWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedUpdateWithoutProviderInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityCreateWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedCreateWithoutProviderInputSchema)]),
    where: zod_1.z.lazy(() => exports.CommunityWhereInputSchema).optional()
}).strict();
exports.CommunityUpdateToOneWithWhereWithoutProviderInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.CommunityWhereInputSchema).optional(),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityUpdateWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedUpdateWithoutProviderInputSchema)]),
}).strict();
exports.CommunityUpdateWithoutProviderInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUpdateManyWithoutCommunityNestedInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserUpdateManyWithoutCommunityNestedInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountUpdateManyWithoutCommunityNestedInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUpdateManyWithoutCommunityNestedInputSchema).optional()
}).strict();
exports.CommunityUncheckedUpdateWithoutProviderInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional()
}).strict();
exports.CashoutUpsertWithWhereUniqueWithoutProviderInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutUpdateWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutUncheckedUpdateWithoutProviderInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutUncheckedCreateWithoutProviderInputSchema)]),
}).strict();
exports.CashoutUpdateWithWhereUniqueWithoutProviderInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutUpdateWithoutProviderInputSchema), zod_1.z.lazy(() => exports.CashoutUncheckedUpdateWithoutProviderInputSchema)]),
}).strict();
exports.CashoutUpdateManyWithWhereWithoutProviderInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.CashoutScalarWhereInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutUpdateManyMutationInputSchema), zod_1.z.lazy(() => exports.CashoutUncheckedUpdateManyWithoutProviderInputSchema)]),
}).strict();
exports.CashoutScalarWhereInputSchema = zod_1.z.object({
    AND: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutScalarWhereInputSchema), zod_1.z.lazy(() => exports.CashoutScalarWhereInputSchema).array()]).optional(),
    OR: zod_1.z.lazy(() => exports.CashoutScalarWhereInputSchema).array().optional(),
    NOT: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutScalarWhereInputSchema), zod_1.z.lazy(() => exports.CashoutScalarWhereInputSchema).array()]).optional(),
    id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    title: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    description: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    provider_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    amount: zod_1.z.union([zod_1.z.lazy(() => exports.DecimalFilterSchema), zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' })]).optional(),
    billImage: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    account_id: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    status: zod_1.z.union([zod_1.z.lazy(() => exports.StringFilterSchema), zod_1.z.string()]).optional(),
    registerDate: zod_1.z.union([zod_1.z.lazy(() => exports.DateTimeFilterSchema), zod_1.z.coerce.date()]).optional(),
}).strict();
exports.UserCreateWithoutRoleInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    userName: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string().optional().nullable(),
    identification: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    phone: zod_1.z.string(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    Community: zod_1.z.lazy(() => exports.CommunityCreateNestedOneWithoutUserInputSchema).optional(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentCreateNestedManyWithoutAdminInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentCreateNestedManyWithoutUserInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceCreateNestedManyWithoutOwnerInputSchema).optional(),
    ResidentIn: zod_1.z.lazy(() => exports.ResidenceCreateNestedOneWithoutResidentInputSchema).optional()
}).strict();
exports.UserUncheckedCreateWithoutRoleInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    userName: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string().optional().nullable(),
    identification: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    phone: zod_1.z.string(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    community_id: zod_1.z.string().optional(),
    residence_id: zod_1.z.string().optional().nullable(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentUncheckedCreateNestedManyWithoutAdminInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedCreateNestedManyWithoutOwnerInputSchema).optional()
}).strict();
exports.UserCreateOrConnectWithoutRoleInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutRoleInputSchema)]),
}).strict();
exports.UserCreateManyRoleInputEnvelopeSchema = zod_1.z.object({
    data: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateManyRoleInputSchema), zod_1.z.lazy(() => exports.UserCreateManyRoleInputSchema).array()]),
    skipDuplicates: zod_1.z.boolean().optional()
}).strict();
exports.UserUpsertWithWhereUniqueWithoutRoleInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserUncheckedUpdateWithoutRoleInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutRoleInputSchema)]),
}).strict();
exports.UserUpdateWithWhereUniqueWithoutRoleInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateWithoutRoleInputSchema), zod_1.z.lazy(() => exports.UserUncheckedUpdateWithoutRoleInputSchema)]),
}).strict();
exports.UserUpdateManyWithWhereWithoutRoleInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.UserScalarWhereInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateManyMutationInputSchema), zod_1.z.lazy(() => exports.UserUncheckedUpdateManyWithoutRoleInputSchema)]),
}).strict();
exports.ResidenceCreateWithoutExpenseInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    Owner: zod_1.z.lazy(() => exports.UserCreateNestedOneWithoutResidenceInputSchema).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityCreateNestedOneWithoutResidenceInputSchema),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeCreateNestedOneWithoutResidenceInputSchema),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotCreateNestedManyWithoutResidenceInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserCreateNestedManyWithoutResidentInInputSchema).optional()
}).strict();
exports.ResidenceUncheckedCreateWithoutExpenseInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    owner_id: zod_1.z.string().optional().nullable(),
    community_id: zod_1.z.string(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    residenceType_id: zod_1.z.number().int(),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotUncheckedCreateNestedManyWithoutResidenceInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserUncheckedCreateNestedManyWithoutResidentInInputSchema).optional()
}).strict();
exports.ResidenceCreateOrConnectWithoutExpenseInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutExpenseInputSchema)]),
}).strict();
exports.ExpenseTypeCreateWithoutExpenseInputSchema = zod_1.z.object({
    title: zod_1.z.string(),
    value: zod_1.z.number().int(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeCreateNestedOneWithoutExpenseTypeInputSchema)
}).strict();
exports.ExpenseTypeUncheckedCreateWithoutExpenseInputSchema = zod_1.z.object({
    id: zod_1.z.number().int().optional(),
    title: zod_1.z.string(),
    value: zod_1.z.number().int(),
    residenceType_id: zod_1.z.number().int()
}).strict();
exports.ExpenseTypeCreateOrConnectWithoutExpenseInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ExpenseTypeWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeCreateWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUncheckedCreateWithoutExpenseInputSchema)]),
}).strict();
exports.PaymentCreateWithoutExpenseInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    voucherImage: zod_1.z.string(),
    isEmailSend: zod_1.z.boolean(),
    User: zod_1.z.lazy(() => exports.UserCreateNestedOneWithoutPaymentsMadeInputSchema),
    Account: zod_1.z.lazy(() => exports.AccountCreateNestedOneWithoutPaymentInputSchema),
    Admin: zod_1.z.lazy(() => exports.UserCreateNestedOneWithoutPaymentsCreatedInputSchema)
}).strict();
exports.PaymentUncheckedCreateWithoutExpenseInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    owner_id: zod_1.z.string(),
    voucherImage: zod_1.z.string(),
    isEmailSend: zod_1.z.boolean(),
    account_id: zod_1.z.string(),
    created_by: zod_1.z.string()
}).strict();
exports.PaymentCreateOrConnectWithoutExpenseInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutExpenseInputSchema)]),
}).strict();
exports.ResidenceUpsertWithoutExpenseInputSchema = zod_1.z.object({
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateWithoutExpenseInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceCreateWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedCreateWithoutExpenseInputSchema)]),
    where: zod_1.z.lazy(() => exports.ResidenceWhereInputSchema).optional()
}).strict();
exports.ResidenceUpdateToOneWithWhereWithoutExpenseInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceWhereInputSchema).optional(),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceUpdateWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateWithoutExpenseInputSchema)]),
}).strict();
exports.ResidenceUpdateWithoutExpenseInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    Owner: zod_1.z.lazy(() => exports.UserUpdateOneWithoutResidenceNestedInputSchema).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityUpdateOneRequiredWithoutResidenceNestedInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUpdateOneRequiredWithoutResidenceNestedInputSchema).optional(),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserUpdateManyWithoutResidentInNestedInputSchema).optional()
}).strict();
exports.ResidenceUncheckedUpdateWithoutExpenseInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    owner_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    residenceType_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotUncheckedUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserUncheckedUpdateManyWithoutResidentInNestedInputSchema).optional()
}).strict();
exports.ExpenseTypeUpsertWithoutExpenseInputSchema = zod_1.z.object({
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeUpdateWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUncheckedUpdateWithoutExpenseInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeCreateWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUncheckedCreateWithoutExpenseInputSchema)]),
    where: zod_1.z.lazy(() => exports.ExpenseTypeWhereInputSchema).optional()
}).strict();
exports.ExpenseTypeUpdateToOneWithWhereWithoutExpenseInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ExpenseTypeWhereInputSchema).optional(),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseTypeUpdateWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.ExpenseTypeUncheckedUpdateWithoutExpenseInputSchema)]),
}).strict();
exports.ExpenseTypeUpdateWithoutExpenseInputSchema = zod_1.z.object({
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    value: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUpdateOneRequiredWithoutExpenseTypeNestedInputSchema).optional()
}).strict();
exports.ExpenseTypeUncheckedUpdateWithoutExpenseInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    value: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    residenceType_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.PaymentUpsertWithoutExpenseInputSchema = zod_1.z.object({
    update: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedUpdateWithoutExpenseInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutExpenseInputSchema)]),
    where: zod_1.z.lazy(() => exports.PaymentWhereInputSchema).optional()
}).strict();
exports.PaymentUpdateToOneWithWhereWithoutExpenseInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.PaymentWhereInputSchema).optional(),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateWithoutExpenseInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedUpdateWithoutExpenseInputSchema)]),
}).strict();
exports.PaymentUpdateWithoutExpenseInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    voucherImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isEmailSend: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    User: zod_1.z.lazy(() => exports.UserUpdateOneRequiredWithoutPaymentsMadeNestedInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountUpdateOneRequiredWithoutPaymentNestedInputSchema).optional(),
    Admin: zod_1.z.lazy(() => exports.UserUpdateOneRequiredWithoutPaymentsCreatedNestedInputSchema).optional()
}).strict();
exports.PaymentUncheckedUpdateWithoutExpenseInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    owner_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    voucherImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isEmailSend: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    account_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    created_by: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ExpenseCreateWithoutPaymentInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    emitingDate: zod_1.z.coerce.date(),
    expireDate: zod_1.z.coerce.date(),
    status: zod_1.z.string(),
    Residence: zod_1.z.lazy(() => exports.ResidenceCreateNestedOneWithoutExpenseInputSchema),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeCreateNestedOneWithoutExpenseInputSchema)
}).strict();
exports.ExpenseUncheckedCreateWithoutPaymentInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    residence_id: zod_1.z.string(),
    emitingDate: zod_1.z.coerce.date(),
    expireDate: zod_1.z.coerce.date(),
    status: zod_1.z.string(),
    expenseType_id: zod_1.z.number().int()
}).strict();
exports.ExpenseCreateOrConnectWithoutPaymentInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutPaymentInputSchema)]),
}).strict();
exports.ExpenseCreateManyPaymentInputEnvelopeSchema = zod_1.z.object({
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateManyPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateManyPaymentInputSchema).array()]),
    skipDuplicates: zod_1.z.boolean().optional()
}).strict();
exports.UserCreateWithoutPaymentsMadeInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    userName: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string().optional().nullable(),
    identification: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    phone: zod_1.z.string(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    Community: zod_1.z.lazy(() => exports.CommunityCreateNestedOneWithoutUserInputSchema).optional(),
    Role: zod_1.z.lazy(() => exports.RoleCreateNestedOneWithoutUserInputSchema).optional(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentCreateNestedManyWithoutAdminInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceCreateNestedManyWithoutOwnerInputSchema).optional(),
    ResidentIn: zod_1.z.lazy(() => exports.ResidenceCreateNestedOneWithoutResidentInputSchema).optional()
}).strict();
exports.UserUncheckedCreateWithoutPaymentsMadeInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    userName: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string().optional().nullable(),
    identification: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    phone: zod_1.z.string(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    community_id: zod_1.z.string().optional(),
    role_id: zod_1.z.number().int(),
    residence_id: zod_1.z.string().optional().nullable(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentUncheckedCreateNestedManyWithoutAdminInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedCreateNestedManyWithoutOwnerInputSchema).optional()
}).strict();
exports.UserCreateOrConnectWithoutPaymentsMadeInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutPaymentsMadeInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutPaymentsMadeInputSchema)]),
}).strict();
exports.AccountCreateWithoutPaymentInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    active: zod_1.z.boolean(),
    balance: zod_1.z.bigint(),
    Community: zod_1.z.lazy(() => exports.CommunityCreateNestedOneWithoutAccountInputSchema),
    Cashout: zod_1.z.lazy(() => exports.CashoutCreateNestedManyWithoutAccountInputSchema).optional()
}).strict();
exports.AccountUncheckedCreateWithoutPaymentInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    active: zod_1.z.boolean(),
    community_id: zod_1.z.string(),
    balance: zod_1.z.bigint(),
    Cashout: zod_1.z.lazy(() => exports.CashoutUncheckedCreateNestedManyWithoutAccountInputSchema).optional()
}).strict();
exports.AccountCreateOrConnectWithoutPaymentInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.AccountCreateWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedCreateWithoutPaymentInputSchema)]),
}).strict();
exports.UserCreateWithoutPaymentsCreatedInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    userName: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string().optional().nullable(),
    identification: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    phone: zod_1.z.string(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    Community: zod_1.z.lazy(() => exports.CommunityCreateNestedOneWithoutUserInputSchema).optional(),
    Role: zod_1.z.lazy(() => exports.RoleCreateNestedOneWithoutUserInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentCreateNestedManyWithoutUserInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceCreateNestedManyWithoutOwnerInputSchema).optional(),
    ResidentIn: zod_1.z.lazy(() => exports.ResidenceCreateNestedOneWithoutResidentInputSchema).optional()
}).strict();
exports.UserUncheckedCreateWithoutPaymentsCreatedInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    userName: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string().optional().nullable(),
    identification: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    phone: zod_1.z.string(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    community_id: zod_1.z.string().optional(),
    role_id: zod_1.z.number().int(),
    residence_id: zod_1.z.string().optional().nullable(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedCreateNestedManyWithoutOwnerInputSchema).optional()
}).strict();
exports.UserCreateOrConnectWithoutPaymentsCreatedInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.UserWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutPaymentsCreatedInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutPaymentsCreatedInputSchema)]),
}).strict();
exports.ExpenseUpsertWithWhereUniqueWithoutPaymentInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpdateWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedUpdateWithoutPaymentInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutPaymentInputSchema)]),
}).strict();
exports.ExpenseUpdateWithWhereUniqueWithoutPaymentInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpdateWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedUpdateWithoutPaymentInputSchema)]),
}).strict();
exports.ExpenseUpdateManyWithWhereWithoutPaymentInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ExpenseScalarWhereInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpdateManyMutationInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedUpdateManyWithoutPaymentInputSchema)]),
}).strict();
exports.UserUpsertWithoutPaymentsMadeInputSchema = zod_1.z.object({
    update: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateWithoutPaymentsMadeInputSchema), zod_1.z.lazy(() => exports.UserUncheckedUpdateWithoutPaymentsMadeInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutPaymentsMadeInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutPaymentsMadeInputSchema)]),
    where: zod_1.z.lazy(() => exports.UserWhereInputSchema).optional()
}).strict();
exports.UserUpdateToOneWithWhereWithoutPaymentsMadeInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.UserWhereInputSchema).optional(),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateWithoutPaymentsMadeInputSchema), zod_1.z.lazy(() => exports.UserUncheckedUpdateWithoutPaymentsMadeInputSchema)]),
}).strict();
exports.UserUpdateWithoutPaymentsMadeInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    userName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    password: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    firstName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    lastName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isVerified: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    Community: zod_1.z.lazy(() => exports.CommunityUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
    Role: zod_1.z.lazy(() => exports.RoleUpdateOneWithoutUserNestedInputSchema).optional(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentUpdateManyWithoutAdminNestedInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUpdateManyWithoutOwnerNestedInputSchema).optional(),
    ResidentIn: zod_1.z.lazy(() => exports.ResidenceUpdateOneWithoutResidentNestedInputSchema).optional()
}).strict();
exports.UserUncheckedUpdateWithoutPaymentsMadeInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    userName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    password: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    firstName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    lastName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isVerified: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    role_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    residence_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentUncheckedUpdateManyWithoutAdminNestedInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional()
}).strict();
exports.AccountUpsertWithoutPaymentInputSchema = zod_1.z.object({
    update: zod_1.z.union([zod_1.z.lazy(() => exports.AccountUpdateWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedUpdateWithoutPaymentInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.AccountCreateWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedCreateWithoutPaymentInputSchema)]),
    where: zod_1.z.lazy(() => exports.AccountWhereInputSchema).optional()
}).strict();
exports.AccountUpdateToOneWithWhereWithoutPaymentInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.AccountWhereInputSchema).optional(),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.AccountUpdateWithoutPaymentInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedUpdateWithoutPaymentInputSchema)]),
}).strict();
exports.AccountUpdateWithoutPaymentInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    active: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    balance: zod_1.z.union([zod_1.z.bigint(), zod_1.z.lazy(() => exports.BigIntFieldUpdateOperationsInputSchema)]).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityUpdateOneRequiredWithoutAccountNestedInputSchema).optional(),
    Cashout: zod_1.z.lazy(() => exports.CashoutUpdateManyWithoutAccountNestedInputSchema).optional()
}).strict();
exports.AccountUncheckedUpdateWithoutPaymentInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    active: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    balance: zod_1.z.union([zod_1.z.bigint(), zod_1.z.lazy(() => exports.BigIntFieldUpdateOperationsInputSchema)]).optional(),
    Cashout: zod_1.z.lazy(() => exports.CashoutUncheckedUpdateManyWithoutAccountNestedInputSchema).optional()
}).strict();
exports.UserUpsertWithoutPaymentsCreatedInputSchema = zod_1.z.object({
    update: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateWithoutPaymentsCreatedInputSchema), zod_1.z.lazy(() => exports.UserUncheckedUpdateWithoutPaymentsCreatedInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.UserCreateWithoutPaymentsCreatedInputSchema), zod_1.z.lazy(() => exports.UserUncheckedCreateWithoutPaymentsCreatedInputSchema)]),
    where: zod_1.z.lazy(() => exports.UserWhereInputSchema).optional()
}).strict();
exports.UserUpdateToOneWithWhereWithoutPaymentsCreatedInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.UserWhereInputSchema).optional(),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.UserUpdateWithoutPaymentsCreatedInputSchema), zod_1.z.lazy(() => exports.UserUncheckedUpdateWithoutPaymentsCreatedInputSchema)]),
}).strict();
exports.UserUpdateWithoutPaymentsCreatedInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    userName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    password: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    firstName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    lastName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isVerified: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    Community: zod_1.z.lazy(() => exports.CommunityUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
    Role: zod_1.z.lazy(() => exports.RoleUpdateOneWithoutUserNestedInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentUpdateManyWithoutUserNestedInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUpdateManyWithoutOwnerNestedInputSchema).optional(),
    ResidentIn: zod_1.z.lazy(() => exports.ResidenceUpdateOneWithoutResidentNestedInputSchema).optional()
}).strict();
exports.UserUncheckedUpdateWithoutPaymentsCreatedInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    userName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    password: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    firstName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    lastName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isVerified: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    role_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    residence_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional()
}).strict();
exports.ProviderCreateWithoutCashoutInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    contactName: zod_1.z.string(),
    description: zod_1.z.string(),
    phone: zod_1.z.string(),
    email: zod_1.z.string().optional().nullable(),
    address: zod_1.z.string().optional().nullable(),
    website: zod_1.z.string().optional().nullable(),
    active: zod_1.z.boolean(),
    Community: zod_1.z.lazy(() => exports.CommunityCreateNestedOneWithoutProviderInputSchema)
}).strict();
exports.ProviderUncheckedCreateWithoutCashoutInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    contactName: zod_1.z.string(),
    description: zod_1.z.string(),
    phone: zod_1.z.string(),
    email: zod_1.z.string().optional().nullable(),
    address: zod_1.z.string().optional().nullable(),
    website: zod_1.z.string().optional().nullable(),
    active: zod_1.z.boolean(),
    community_id: zod_1.z.string()
}).strict();
exports.ProviderCreateOrConnectWithoutCashoutInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ProviderWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderCreateWithoutCashoutInputSchema), zod_1.z.lazy(() => exports.ProviderUncheckedCreateWithoutCashoutInputSchema)]),
}).strict();
exports.AccountCreateWithoutCashoutInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    active: zod_1.z.boolean(),
    balance: zod_1.z.bigint(),
    Community: zod_1.z.lazy(() => exports.CommunityCreateNestedOneWithoutAccountInputSchema),
    Payment: zod_1.z.lazy(() => exports.PaymentCreateNestedManyWithoutAccountInputSchema).optional()
}).strict();
exports.AccountUncheckedCreateWithoutCashoutInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    active: zod_1.z.boolean(),
    community_id: zod_1.z.string(),
    balance: zod_1.z.bigint(),
    Payment: zod_1.z.lazy(() => exports.PaymentUncheckedCreateNestedManyWithoutAccountInputSchema).optional()
}).strict();
exports.AccountCreateOrConnectWithoutCashoutInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.AccountWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.AccountCreateWithoutCashoutInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedCreateWithoutCashoutInputSchema)]),
}).strict();
exports.ProviderUpsertWithoutCashoutInputSchema = zod_1.z.object({
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderUpdateWithoutCashoutInputSchema), zod_1.z.lazy(() => exports.ProviderUncheckedUpdateWithoutCashoutInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderCreateWithoutCashoutInputSchema), zod_1.z.lazy(() => exports.ProviderUncheckedCreateWithoutCashoutInputSchema)]),
    where: zod_1.z.lazy(() => exports.ProviderWhereInputSchema).optional()
}).strict();
exports.ProviderUpdateToOneWithWhereWithoutCashoutInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ProviderWhereInputSchema).optional(),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ProviderUpdateWithoutCashoutInputSchema), zod_1.z.lazy(() => exports.ProviderUncheckedUpdateWithoutCashoutInputSchema)]),
}).strict();
exports.ProviderUpdateWithoutCashoutInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contactName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    website: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    active: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityUpdateOneRequiredWithoutProviderNestedInputSchema).optional()
}).strict();
exports.ProviderUncheckedUpdateWithoutCashoutInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contactName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    website: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    active: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.AccountUpsertWithoutCashoutInputSchema = zod_1.z.object({
    update: zod_1.z.union([zod_1.z.lazy(() => exports.AccountUpdateWithoutCashoutInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedUpdateWithoutCashoutInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.AccountCreateWithoutCashoutInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedCreateWithoutCashoutInputSchema)]),
    where: zod_1.z.lazy(() => exports.AccountWhereInputSchema).optional()
}).strict();
exports.AccountUpdateToOneWithWhereWithoutCashoutInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.AccountWhereInputSchema).optional(),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.AccountUpdateWithoutCashoutInputSchema), zod_1.z.lazy(() => exports.AccountUncheckedUpdateWithoutCashoutInputSchema)]),
}).strict();
exports.AccountUpdateWithoutCashoutInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    active: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    balance: zod_1.z.union([zod_1.z.bigint(), zod_1.z.lazy(() => exports.BigIntFieldUpdateOperationsInputSchema)]).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityUpdateOneRequiredWithoutAccountNestedInputSchema).optional(),
    Payment: zod_1.z.lazy(() => exports.PaymentUpdateManyWithoutAccountNestedInputSchema).optional()
}).strict();
exports.AccountUncheckedUpdateWithoutCashoutInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    active: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    balance: zod_1.z.union([zod_1.z.bigint(), zod_1.z.lazy(() => exports.BigIntFieldUpdateOperationsInputSchema)]).optional(),
    Payment: zod_1.z.lazy(() => exports.PaymentUncheckedUpdateManyWithoutAccountNestedInputSchema).optional()
}).strict();
exports.ResidenceTypeCreateWithoutExpenseTypeInputSchema = zod_1.z.object({
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    Residence: zod_1.z.lazy(() => exports.ResidenceCreateNestedManyWithoutResidenceTypeInputSchema).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityCreateNestedOneWithoutResidenceTypeInputSchema)
}).strict();
exports.ResidenceTypeUncheckedCreateWithoutExpenseTypeInputSchema = zod_1.z.object({
    id: zod_1.z.number().int().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    community_id: zod_1.z.string(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedCreateNestedManyWithoutResidenceTypeInputSchema).optional()
}).strict();
exports.ResidenceTypeCreateOrConnectWithoutExpenseTypeInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceTypeWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeCreateWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateWithoutExpenseTypeInputSchema)]),
}).strict();
exports.ExpenseCreateWithoutExpenseTypeInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    emitingDate: zod_1.z.coerce.date(),
    expireDate: zod_1.z.coerce.date(),
    status: zod_1.z.string(),
    Residence: zod_1.z.lazy(() => exports.ResidenceCreateNestedOneWithoutExpenseInputSchema),
    Payment: zod_1.z.lazy(() => exports.PaymentCreateNestedOneWithoutExpenseInputSchema)
}).strict();
exports.ExpenseUncheckedCreateWithoutExpenseTypeInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    residence_id: zod_1.z.string(),
    emitingDate: zod_1.z.coerce.date(),
    expireDate: zod_1.z.coerce.date(),
    status: zod_1.z.string(),
    payment_id: zod_1.z.string()
}).strict();
exports.ExpenseCreateOrConnectWithoutExpenseTypeInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutExpenseTypeInputSchema)]),
}).strict();
exports.ExpenseCreateManyExpenseTypeInputEnvelopeSchema = zod_1.z.object({
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateManyExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseCreateManyExpenseTypeInputSchema).array()]),
    skipDuplicates: zod_1.z.boolean().optional()
}).strict();
exports.ResidenceTypeUpsertWithoutExpenseTypeInputSchema = zod_1.z.object({
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeUpdateWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedUpdateWithoutExpenseTypeInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeCreateWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateWithoutExpenseTypeInputSchema)]),
    where: zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema).optional()
}).strict();
exports.ResidenceTypeUpdateToOneWithWhereWithoutExpenseTypeInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ResidenceTypeWhereInputSchema).optional(),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ResidenceTypeUpdateWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ResidenceTypeUncheckedUpdateWithoutExpenseTypeInputSchema)]),
}).strict();
exports.ResidenceTypeUpdateWithoutExpenseTypeInputSchema = zod_1.z.object({
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUpdateManyWithoutResidenceTypeNestedInputSchema).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityUpdateOneRequiredWithoutResidenceTypeNestedInputSchema).optional()
}).strict();
exports.ResidenceTypeUncheckedUpdateWithoutExpenseTypeInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateManyWithoutResidenceTypeNestedInputSchema).optional()
}).strict();
exports.ExpenseUpsertWithWhereUniqueWithoutExpenseTypeInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpdateWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedUpdateWithoutExpenseTypeInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseCreateWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedCreateWithoutExpenseTypeInputSchema)]),
}).strict();
exports.ExpenseUpdateWithWhereUniqueWithoutExpenseTypeInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ExpenseWhereUniqueInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpdateWithoutExpenseTypeInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedUpdateWithoutExpenseTypeInputSchema)]),
}).strict();
exports.ExpenseUpdateManyWithWhereWithoutExpenseTypeInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.ExpenseScalarWhereInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.ExpenseUpdateManyMutationInputSchema), zod_1.z.lazy(() => exports.ExpenseUncheckedUpdateManyWithoutExpenseTypeInputSchema)]),
}).strict();
exports.CommunityCreateWithoutAccountInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    address: zod_1.z.string(),
    Residence: zod_1.z.lazy(() => exports.ResidenceCreateNestedManyWithoutCommunityInputSchema).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderCreateNestedManyWithoutCommunityInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserCreateNestedManyWithoutCommunityInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeCreateNestedManyWithoutCommunityInputSchema).optional()
}).strict();
exports.CommunityUncheckedCreateWithoutAccountInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    address: zod_1.z.string(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedCreateNestedManyWithoutCommunityInputSchema).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderUncheckedCreateNestedManyWithoutCommunityInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserUncheckedCreateNestedManyWithoutCommunityInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUncheckedCreateNestedManyWithoutCommunityInputSchema).optional()
}).strict();
exports.CommunityCreateOrConnectWithoutAccountInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.CommunityWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedCreateWithoutAccountInputSchema)]),
}).strict();
exports.PaymentCreateWithoutAccountInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    voucherImage: zod_1.z.string(),
    isEmailSend: zod_1.z.boolean(),
    Expense: zod_1.z.lazy(() => exports.ExpenseCreateNestedManyWithoutPaymentInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserCreateNestedOneWithoutPaymentsMadeInputSchema),
    Admin: zod_1.z.lazy(() => exports.UserCreateNestedOneWithoutPaymentsCreatedInputSchema)
}).strict();
exports.PaymentUncheckedCreateWithoutAccountInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    owner_id: zod_1.z.string(),
    voucherImage: zod_1.z.string(),
    isEmailSend: zod_1.z.boolean(),
    created_by: zod_1.z.string(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedCreateNestedManyWithoutPaymentInputSchema).optional()
}).strict();
exports.PaymentCreateOrConnectWithoutAccountInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutAccountInputSchema)]),
}).strict();
exports.PaymentCreateManyAccountInputEnvelopeSchema = zod_1.z.object({
    data: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateManyAccountInputSchema), zod_1.z.lazy(() => exports.PaymentCreateManyAccountInputSchema).array()]),
    skipDuplicates: zod_1.z.boolean().optional()
}).strict();
exports.CashoutCreateWithoutAccountInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    billImage: zod_1.z.string(),
    status: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date(),
    Provider: zod_1.z.lazy(() => exports.ProviderCreateNestedOneWithoutCashoutInputSchema)
}).strict();
exports.CashoutUncheckedCreateWithoutAccountInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    provider_id: zod_1.z.string(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    billImage: zod_1.z.string(),
    status: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date()
}).strict();
exports.CashoutCreateOrConnectWithoutAccountInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutUncheckedCreateWithoutAccountInputSchema)]),
}).strict();
exports.CashoutCreateManyAccountInputEnvelopeSchema = zod_1.z.object({
    data: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateManyAccountInputSchema), zod_1.z.lazy(() => exports.CashoutCreateManyAccountInputSchema).array()]),
    skipDuplicates: zod_1.z.boolean().optional()
}).strict();
exports.CommunityUpsertWithoutAccountInputSchema = zod_1.z.object({
    update: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityUpdateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedUpdateWithoutAccountInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedCreateWithoutAccountInputSchema)]),
    where: zod_1.z.lazy(() => exports.CommunityWhereInputSchema).optional()
}).strict();
exports.CommunityUpdateToOneWithWhereWithoutAccountInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.CommunityWhereInputSchema).optional(),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.CommunityUpdateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CommunityUncheckedUpdateWithoutAccountInputSchema)]),
}).strict();
exports.CommunityUpdateWithoutAccountInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUpdateManyWithoutCommunityNestedInputSchema).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderUpdateManyWithoutCommunityNestedInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserUpdateManyWithoutCommunityNestedInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUpdateManyWithoutCommunityNestedInputSchema).optional()
}).strict();
exports.CommunityUncheckedUpdateWithoutAccountInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUncheckedUpdateManyWithoutCommunityNestedInputSchema).optional()
}).strict();
exports.PaymentUpsertWithWhereUniqueWithoutAccountInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedUpdateWithoutAccountInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedCreateWithoutAccountInputSchema)]),
}).strict();
exports.PaymentUpdateWithWhereUniqueWithoutAccountInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.PaymentWhereUniqueInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedUpdateWithoutAccountInputSchema)]),
}).strict();
exports.PaymentUpdateManyWithWhereWithoutAccountInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.PaymentScalarWhereInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.PaymentUpdateManyMutationInputSchema), zod_1.z.lazy(() => exports.PaymentUncheckedUpdateManyWithoutAccountInputSchema)]),
}).strict();
exports.CashoutUpsertWithWhereUniqueWithoutAccountInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema),
    update: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutUpdateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutUncheckedUpdateWithoutAccountInputSchema)]),
    create: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutCreateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutUncheckedCreateWithoutAccountInputSchema)]),
}).strict();
exports.CashoutUpdateWithWhereUniqueWithoutAccountInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.CashoutWhereUniqueInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutUpdateWithoutAccountInputSchema), zod_1.z.lazy(() => exports.CashoutUncheckedUpdateWithoutAccountInputSchema)]),
}).strict();
exports.CashoutUpdateManyWithWhereWithoutAccountInputSchema = zod_1.z.object({
    where: zod_1.z.lazy(() => exports.CashoutScalarWhereInputSchema),
    data: zod_1.z.union([zod_1.z.lazy(() => exports.CashoutUpdateManyMutationInputSchema), zod_1.z.lazy(() => exports.CashoutUncheckedUpdateManyWithoutAccountInputSchema)]),
}).strict();
exports.ResidenceCreateManyCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    owner_id: zod_1.z.string().optional().nullable(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    residenceType_id: zod_1.z.number().int()
}).strict();
exports.ProviderCreateManyCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    contactName: zod_1.z.string(),
    description: zod_1.z.string(),
    phone: zod_1.z.string(),
    email: zod_1.z.string().optional().nullable(),
    address: zod_1.z.string().optional().nullable(),
    website: zod_1.z.string().optional().nullable(),
    active: zod_1.z.boolean()
}).strict();
exports.UserCreateManyCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    userName: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string().optional().nullable(),
    identification: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    phone: zod_1.z.string(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    role_id: zod_1.z.number().int(),
    residence_id: zod_1.z.string().optional().nullable()
}).strict();
exports.AccountCreateManyCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    active: zod_1.z.boolean(),
    balance: zod_1.z.bigint()
}).strict();
exports.ResidenceTypeCreateManyCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.number().int().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string()
}).strict();
exports.ResidenceUpdateWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    Owner: zod_1.z.lazy(() => exports.UserUpdateOneWithoutResidenceNestedInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUpdateOneRequiredWithoutResidenceNestedInputSchema).optional(),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserUpdateManyWithoutResidentInNestedInputSchema).optional()
}).strict();
exports.ResidenceUncheckedUpdateWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    owner_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    residenceType_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotUncheckedUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserUncheckedUpdateManyWithoutResidentInNestedInputSchema).optional()
}).strict();
exports.ResidenceUncheckedUpdateManyWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    owner_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    residenceType_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ProviderUpdateWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contactName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    website: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    active: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    Cashout: zod_1.z.lazy(() => exports.CashoutUpdateManyWithoutProviderNestedInputSchema).optional()
}).strict();
exports.ProviderUncheckedUpdateWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contactName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    website: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    active: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    Cashout: zod_1.z.lazy(() => exports.CashoutUncheckedUpdateManyWithoutProviderNestedInputSchema).optional()
}).strict();
exports.ProviderUncheckedUpdateManyWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contactName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    address: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    website: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    active: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.UserUpdateWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    userName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    password: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    firstName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    lastName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isVerified: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    Role: zod_1.z.lazy(() => exports.RoleUpdateOneWithoutUserNestedInputSchema).optional(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentUpdateManyWithoutAdminNestedInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentUpdateManyWithoutUserNestedInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUpdateManyWithoutOwnerNestedInputSchema).optional(),
    ResidentIn: zod_1.z.lazy(() => exports.ResidenceUpdateOneWithoutResidentNestedInputSchema).optional()
}).strict();
exports.UserUncheckedUpdateWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    userName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    password: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    firstName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    lastName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isVerified: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    role_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    residence_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentUncheckedUpdateManyWithoutAdminNestedInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional()
}).strict();
exports.UserUncheckedUpdateManyWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    userName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    password: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    firstName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    lastName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isVerified: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    role_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    residence_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
}).strict();
exports.AccountUpdateWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    active: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    balance: zod_1.z.union([zod_1.z.bigint(), zod_1.z.lazy(() => exports.BigIntFieldUpdateOperationsInputSchema)]).optional(),
    Payment: zod_1.z.lazy(() => exports.PaymentUpdateManyWithoutAccountNestedInputSchema).optional(),
    Cashout: zod_1.z.lazy(() => exports.CashoutUpdateManyWithoutAccountNestedInputSchema).optional()
}).strict();
exports.AccountUncheckedUpdateWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    active: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    balance: zod_1.z.union([zod_1.z.bigint(), zod_1.z.lazy(() => exports.BigIntFieldUpdateOperationsInputSchema)]).optional(),
    Payment: zod_1.z.lazy(() => exports.PaymentUncheckedUpdateManyWithoutAccountNestedInputSchema).optional(),
    Cashout: zod_1.z.lazy(() => exports.CashoutUncheckedUpdateManyWithoutAccountNestedInputSchema).optional()
}).strict();
exports.AccountUncheckedUpdateManyWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    active: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    balance: zod_1.z.union([zod_1.z.bigint(), zod_1.z.lazy(() => exports.BigIntFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ResidenceTypeUpdateWithoutCommunityInputSchema = zod_1.z.object({
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUpdateManyWithoutResidenceTypeNestedInputSchema).optional(),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeUpdateManyWithoutResidenceTypeNestedInputSchema).optional()
}).strict();
exports.ResidenceTypeUncheckedUpdateWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateManyWithoutResidenceTypeNestedInputSchema).optional(),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeUncheckedUpdateManyWithoutResidenceTypeNestedInputSchema).optional()
}).strict();
exports.ResidenceTypeUncheckedUpdateManyWithoutCommunityInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.PaymentCreateManyAdminInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    owner_id: zod_1.z.string(),
    voucherImage: zod_1.z.string(),
    isEmailSend: zod_1.z.boolean(),
    account_id: zod_1.z.string()
}).strict();
exports.PaymentCreateManyUserInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    voucherImage: zod_1.z.string(),
    isEmailSend: zod_1.z.boolean(),
    account_id: zod_1.z.string(),
    created_by: zod_1.z.string()
}).strict();
exports.ResidenceCreateManyOwnerInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    community_id: zod_1.z.string(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    residenceType_id: zod_1.z.number().int()
}).strict();
exports.PaymentUpdateWithoutAdminInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    voucherImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isEmailSend: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUpdateManyWithoutPaymentNestedInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserUpdateOneRequiredWithoutPaymentsMadeNestedInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountUpdateOneRequiredWithoutPaymentNestedInputSchema).optional()
}).strict();
exports.PaymentUncheckedUpdateWithoutAdminInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    owner_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    voucherImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isEmailSend: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    account_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedUpdateManyWithoutPaymentNestedInputSchema).optional()
}).strict();
exports.PaymentUncheckedUpdateManyWithoutAdminInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    owner_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    voucherImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isEmailSend: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    account_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.PaymentUpdateWithoutUserInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    voucherImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isEmailSend: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUpdateManyWithoutPaymentNestedInputSchema).optional(),
    Account: zod_1.z.lazy(() => exports.AccountUpdateOneRequiredWithoutPaymentNestedInputSchema).optional(),
    Admin: zod_1.z.lazy(() => exports.UserUpdateOneRequiredWithoutPaymentsCreatedNestedInputSchema).optional()
}).strict();
exports.PaymentUncheckedUpdateWithoutUserInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    voucherImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isEmailSend: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    account_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    created_by: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedUpdateManyWithoutPaymentNestedInputSchema).optional()
}).strict();
exports.PaymentUncheckedUpdateManyWithoutUserInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    voucherImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isEmailSend: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    account_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    created_by: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ResidenceUpdateWithoutOwnerInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityUpdateOneRequiredWithoutResidenceNestedInputSchema).optional(),
    ResidenceType: zod_1.z.lazy(() => exports.ResidenceTypeUpdateOneRequiredWithoutResidenceNestedInputSchema).optional(),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserUpdateManyWithoutResidentInNestedInputSchema).optional()
}).strict();
exports.ResidenceUncheckedUpdateWithoutOwnerInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    residenceType_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotUncheckedUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserUncheckedUpdateManyWithoutResidentInNestedInputSchema).optional()
}).strict();
exports.ResidenceUncheckedUpdateManyWithoutOwnerInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    residenceType_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ParkingSlotCreateManyResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    number: zod_1.z.number().int()
}).strict();
exports.ExpenseCreateManyResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    emitingDate: zod_1.z.coerce.date(),
    expireDate: zod_1.z.coerce.date(),
    status: zod_1.z.string(),
    expenseType_id: zod_1.z.number().int(),
    payment_id: zod_1.z.string()
}).strict();
exports.UserCreateManyResidentInInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    userName: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string().optional().nullable(),
    identification: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    phone: zod_1.z.string(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    community_id: zod_1.z.string().optional(),
    role_id: zod_1.z.number().int()
}).strict();
exports.ParkingSlotUpdateWithoutResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    number: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ParkingSlotUncheckedUpdateWithoutResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    number: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ParkingSlotUncheckedUpdateManyWithoutResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    number: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ExpenseUpdateWithoutResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    emitingDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    expireDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeUpdateOneRequiredWithoutExpenseNestedInputSchema).optional(),
    Payment: zod_1.z.lazy(() => exports.PaymentUpdateOneRequiredWithoutExpenseNestedInputSchema).optional()
}).strict();
exports.ExpenseUncheckedUpdateWithoutResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    emitingDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    expireDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    expenseType_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    payment_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ExpenseUncheckedUpdateManyWithoutResidenceInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    emitingDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    expireDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    expenseType_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    payment_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.UserUpdateWithoutResidentInInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    userName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    password: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    firstName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    lastName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isVerified: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    Community: zod_1.z.lazy(() => exports.CommunityUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
    Role: zod_1.z.lazy(() => exports.RoleUpdateOneWithoutUserNestedInputSchema).optional(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentUpdateManyWithoutAdminNestedInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentUpdateManyWithoutUserNestedInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUpdateManyWithoutOwnerNestedInputSchema).optional()
}).strict();
exports.UserUncheckedUpdateWithoutResidentInInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    userName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    password: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    firstName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    lastName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isVerified: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    role_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentUncheckedUpdateManyWithoutAdminNestedInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional()
}).strict();
exports.UserUncheckedUpdateManyWithoutResidentInInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    userName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    password: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    firstName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    lastName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isVerified: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    role_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ResidenceCreateManyResidenceTypeInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    owner_id: zod_1.z.string().optional().nullable(),
    community_id: zod_1.z.string(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
}).strict();
exports.ExpenseTypeCreateManyResidenceTypeInputSchema = zod_1.z.object({
    id: zod_1.z.number().int().optional(),
    title: zod_1.z.string(),
    value: zod_1.z.number().int()
}).strict();
exports.ResidenceUpdateWithoutResidenceTypeInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    Owner: zod_1.z.lazy(() => exports.UserUpdateOneWithoutResidenceNestedInputSchema).optional(),
    Community: zod_1.z.lazy(() => exports.CommunityUpdateOneRequiredWithoutResidenceNestedInputSchema).optional(),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserUpdateManyWithoutResidentInNestedInputSchema).optional()
}).strict();
exports.ResidenceUncheckedUpdateWithoutResidenceTypeInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    owner_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
    ParkingSlot: zod_1.z.lazy(() => exports.ParkingSlotUncheckedUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedUpdateManyWithoutResidenceNestedInputSchema).optional(),
    Resident: zod_1.z.lazy(() => exports.UserUncheckedUpdateManyWithoutResidentInNestedInputSchema).optional()
}).strict();
exports.ResidenceUncheckedUpdateManyWithoutResidenceTypeInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    owner_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    contacts: zod_1.z.union([zod_1.z.lazy(() => exports.NullableJsonNullValueInputSchema), exports.InputJsonValueSchema]).optional(),
}).strict();
exports.ExpenseTypeUpdateWithoutResidenceTypeInputSchema = zod_1.z.object({
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    value: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUpdateManyWithoutExpenseTypeNestedInputSchema).optional()
}).strict();
exports.ExpenseTypeUncheckedUpdateWithoutResidenceTypeInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    value: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedUpdateManyWithoutExpenseTypeNestedInputSchema).optional()
}).strict();
exports.ExpenseTypeUncheckedUpdateManyWithoutResidenceTypeInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    value: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.CashoutCreateManyProviderInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    billImage: zod_1.z.string(),
    account_id: zod_1.z.string(),
    status: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date()
}).strict();
exports.CashoutUpdateWithoutProviderInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    billImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    Account: zod_1.z.lazy(() => exports.AccountUpdateOneRequiredWithoutCashoutNestedInputSchema).optional()
}).strict();
exports.CashoutUncheckedUpdateWithoutProviderInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    billImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    account_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.CashoutUncheckedUpdateManyWithoutProviderInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    billImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    account_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.UserCreateManyRoleInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    userName: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string().optional().nullable(),
    identification: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    phone: zod_1.z.string(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    community_id: zod_1.z.string().optional(),
    residence_id: zod_1.z.string().optional().nullable()
}).strict();
exports.UserUpdateWithoutRoleInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    userName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    password: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    firstName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    lastName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isVerified: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    Community: zod_1.z.lazy(() => exports.CommunityUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentUpdateManyWithoutAdminNestedInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentUpdateManyWithoutUserNestedInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUpdateManyWithoutOwnerNestedInputSchema).optional(),
    ResidentIn: zod_1.z.lazy(() => exports.ResidenceUpdateOneWithoutResidentNestedInputSchema).optional()
}).strict();
exports.UserUncheckedUpdateWithoutRoleInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    userName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    password: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    firstName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    lastName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isVerified: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    residence_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    paymentsCreated: zod_1.z.lazy(() => exports.PaymentUncheckedUpdateManyWithoutAdminNestedInputSchema).optional(),
    paymentsMade: zod_1.z.lazy(() => exports.PaymentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional()
}).strict();
exports.UserUncheckedUpdateManyWithoutRoleInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    userName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    email: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    password: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
    identification: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    firstName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    lastName: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    phone: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isVerified: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    isActive: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.NullableBoolFieldUpdateOperationsInputSchema)]).optional().nullable(),
    community_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    residence_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
}).strict();
exports.ExpenseCreateManyPaymentInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    residence_id: zod_1.z.string(),
    emitingDate: zod_1.z.coerce.date(),
    expireDate: zod_1.z.coerce.date(),
    status: zod_1.z.string(),
    expenseType_id: zod_1.z.number().int()
}).strict();
exports.ExpenseUpdateWithoutPaymentInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    emitingDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    expireDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUpdateOneRequiredWithoutExpenseNestedInputSchema).optional(),
    ExpenseType: zod_1.z.lazy(() => exports.ExpenseTypeUpdateOneRequiredWithoutExpenseNestedInputSchema).optional()
}).strict();
exports.ExpenseUncheckedUpdateWithoutPaymentInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    residence_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    emitingDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    expireDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    expenseType_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ExpenseUncheckedUpdateManyWithoutPaymentInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    residence_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    emitingDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    expireDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    expenseType_id: zod_1.z.union([zod_1.z.number().int(), zod_1.z.lazy(() => exports.IntFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ExpenseCreateManyExpenseTypeInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    residence_id: zod_1.z.string(),
    emitingDate: zod_1.z.coerce.date(),
    expireDate: zod_1.z.coerce.date(),
    status: zod_1.z.string(),
    payment_id: zod_1.z.string()
}).strict();
exports.ExpenseUpdateWithoutExpenseTypeInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    emitingDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    expireDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Residence: zod_1.z.lazy(() => exports.ResidenceUpdateOneRequiredWithoutExpenseNestedInputSchema).optional(),
    Payment: zod_1.z.lazy(() => exports.PaymentUpdateOneRequiredWithoutExpenseNestedInputSchema).optional()
}).strict();
exports.ExpenseUncheckedUpdateWithoutExpenseTypeInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    residence_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    emitingDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    expireDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    payment_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.ExpenseUncheckedUpdateManyWithoutExpenseTypeInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    residence_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    emitingDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    expireDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    payment_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.PaymentCreateManyAccountInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    owner_id: zod_1.z.string(),
    voucherImage: zod_1.z.string(),
    isEmailSend: zod_1.z.boolean(),
    created_by: zod_1.z.string()
}).strict();
exports.CashoutCreateManyAccountInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    provider_id: zod_1.z.string(),
    amount: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }),
    billImage: zod_1.z.string(),
    status: zod_1.z.string(),
    registerDate: zod_1.z.coerce.date()
}).strict();
exports.PaymentUpdateWithoutAccountInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    voucherImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isEmailSend: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUpdateManyWithoutPaymentNestedInputSchema).optional(),
    User: zod_1.z.lazy(() => exports.UserUpdateOneRequiredWithoutPaymentsMadeNestedInputSchema).optional(),
    Admin: zod_1.z.lazy(() => exports.UserUpdateOneRequiredWithoutPaymentsCreatedNestedInputSchema).optional()
}).strict();
exports.PaymentUncheckedUpdateWithoutAccountInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    owner_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    voucherImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isEmailSend: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    created_by: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    Expense: zod_1.z.lazy(() => exports.ExpenseUncheckedUpdateManyWithoutPaymentNestedInputSchema).optional()
}).strict();
exports.PaymentUncheckedUpdateManyWithoutAccountInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    owner_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    voucherImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    isEmailSend: zod_1.z.union([zod_1.z.boolean(), zod_1.z.lazy(() => exports.BoolFieldUpdateOperationsInputSchema)]).optional(),
    created_by: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.CashoutUpdateWithoutAccountInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    billImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
    Provider: zod_1.z.lazy(() => exports.ProviderUpdateOneRequiredWithoutCashoutNestedInputSchema).optional()
}).strict();
exports.CashoutUncheckedUpdateWithoutAccountInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    provider_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    billImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
exports.CashoutUncheckedUpdateManyWithoutAccountInputSchema = zod_1.z.object({
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    title: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    description: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    provider_id: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    amount: zod_1.z.union([zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.instanceof(client_1.Prisma.Decimal), exports.DecimalJsLikeSchema,]).refine((v) => (0, exports.isValidDecimalInput)(v), { message: 'Must be a Decimal' }), zod_1.z.lazy(() => exports.DecimalFieldUpdateOperationsInputSchema)]).optional(),
    billImage: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    status: zod_1.z.union([zod_1.z.string(), zod_1.z.lazy(() => exports.StringFieldUpdateOperationsInputSchema)]).optional(),
    registerDate: zod_1.z.union([zod_1.z.coerce.date(), zod_1.z.lazy(() => exports.DateTimeFieldUpdateOperationsInputSchema)]).optional(),
}).strict();
/////////////////////////////////////////
// ARGS
/////////////////////////////////////////
exports.CommunityFindFirstArgsSchema = zod_1.z.object({
    select: exports.CommunitySelectSchema.optional(),
    include: exports.CommunityIncludeSchema.optional(),
    where: exports.CommunityWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.CommunityOrderByWithRelationInputSchema.array(), exports.CommunityOrderByWithRelationInputSchema]).optional(),
    cursor: exports.CommunityWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.CommunityScalarFieldEnumSchema, exports.CommunityScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.CommunityFindFirstOrThrowArgsSchema = zod_1.z.object({
    select: exports.CommunitySelectSchema.optional(),
    include: exports.CommunityIncludeSchema.optional(),
    where: exports.CommunityWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.CommunityOrderByWithRelationInputSchema.array(), exports.CommunityOrderByWithRelationInputSchema]).optional(),
    cursor: exports.CommunityWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.CommunityScalarFieldEnumSchema, exports.CommunityScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.CommunityFindManyArgsSchema = zod_1.z.object({
    select: exports.CommunitySelectSchema.optional(),
    include: exports.CommunityIncludeSchema.optional(),
    where: exports.CommunityWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.CommunityOrderByWithRelationInputSchema.array(), exports.CommunityOrderByWithRelationInputSchema]).optional(),
    cursor: exports.CommunityWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.CommunityScalarFieldEnumSchema, exports.CommunityScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.CommunityAggregateArgsSchema = zod_1.z.object({
    where: exports.CommunityWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.CommunityOrderByWithRelationInputSchema.array(), exports.CommunityOrderByWithRelationInputSchema]).optional(),
    cursor: exports.CommunityWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.CommunityGroupByArgsSchema = zod_1.z.object({
    where: exports.CommunityWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.CommunityOrderByWithAggregationInputSchema.array(), exports.CommunityOrderByWithAggregationInputSchema]).optional(),
    by: exports.CommunityScalarFieldEnumSchema.array(),
    having: exports.CommunityScalarWhereWithAggregatesInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.CommunityFindUniqueArgsSchema = zod_1.z.object({
    select: exports.CommunitySelectSchema.optional(),
    include: exports.CommunityIncludeSchema.optional(),
    where: exports.CommunityWhereUniqueInputSchema,
}).strict();
exports.CommunityFindUniqueOrThrowArgsSchema = zod_1.z.object({
    select: exports.CommunitySelectSchema.optional(),
    include: exports.CommunityIncludeSchema.optional(),
    where: exports.CommunityWhereUniqueInputSchema,
}).strict();
exports.UserFindFirstArgsSchema = zod_1.z.object({
    select: exports.UserSelectSchema.optional(),
    include: exports.UserIncludeSchema.optional(),
    where: exports.UserWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.UserOrderByWithRelationInputSchema.array(), exports.UserOrderByWithRelationInputSchema]).optional(),
    cursor: exports.UserWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.UserScalarFieldEnumSchema, exports.UserScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.UserFindFirstOrThrowArgsSchema = zod_1.z.object({
    select: exports.UserSelectSchema.optional(),
    include: exports.UserIncludeSchema.optional(),
    where: exports.UserWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.UserOrderByWithRelationInputSchema.array(), exports.UserOrderByWithRelationInputSchema]).optional(),
    cursor: exports.UserWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.UserScalarFieldEnumSchema, exports.UserScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.UserFindManyArgsSchema = zod_1.z.object({
    select: exports.UserSelectSchema.optional(),
    include: exports.UserIncludeSchema.optional(),
    where: exports.UserWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.UserOrderByWithRelationInputSchema.array(), exports.UserOrderByWithRelationInputSchema]).optional(),
    cursor: exports.UserWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.UserScalarFieldEnumSchema, exports.UserScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.UserAggregateArgsSchema = zod_1.z.object({
    where: exports.UserWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.UserOrderByWithRelationInputSchema.array(), exports.UserOrderByWithRelationInputSchema]).optional(),
    cursor: exports.UserWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.UserGroupByArgsSchema = zod_1.z.object({
    where: exports.UserWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.UserOrderByWithAggregationInputSchema.array(), exports.UserOrderByWithAggregationInputSchema]).optional(),
    by: exports.UserScalarFieldEnumSchema.array(),
    having: exports.UserScalarWhereWithAggregatesInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.UserFindUniqueArgsSchema = zod_1.z.object({
    select: exports.UserSelectSchema.optional(),
    include: exports.UserIncludeSchema.optional(),
    where: exports.UserWhereUniqueInputSchema,
}).strict();
exports.UserFindUniqueOrThrowArgsSchema = zod_1.z.object({
    select: exports.UserSelectSchema.optional(),
    include: exports.UserIncludeSchema.optional(),
    where: exports.UserWhereUniqueInputSchema,
}).strict();
exports.ResidenceFindFirstArgsSchema = zod_1.z.object({
    select: exports.ResidenceSelectSchema.optional(),
    include: exports.ResidenceIncludeSchema.optional(),
    where: exports.ResidenceWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ResidenceOrderByWithRelationInputSchema.array(), exports.ResidenceOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ResidenceWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.ResidenceScalarFieldEnumSchema, exports.ResidenceScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.ResidenceFindFirstOrThrowArgsSchema = zod_1.z.object({
    select: exports.ResidenceSelectSchema.optional(),
    include: exports.ResidenceIncludeSchema.optional(),
    where: exports.ResidenceWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ResidenceOrderByWithRelationInputSchema.array(), exports.ResidenceOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ResidenceWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.ResidenceScalarFieldEnumSchema, exports.ResidenceScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.ResidenceFindManyArgsSchema = zod_1.z.object({
    select: exports.ResidenceSelectSchema.optional(),
    include: exports.ResidenceIncludeSchema.optional(),
    where: exports.ResidenceWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ResidenceOrderByWithRelationInputSchema.array(), exports.ResidenceOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ResidenceWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.ResidenceScalarFieldEnumSchema, exports.ResidenceScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.ResidenceAggregateArgsSchema = zod_1.z.object({
    where: exports.ResidenceWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ResidenceOrderByWithRelationInputSchema.array(), exports.ResidenceOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ResidenceWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.ResidenceGroupByArgsSchema = zod_1.z.object({
    where: exports.ResidenceWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ResidenceOrderByWithAggregationInputSchema.array(), exports.ResidenceOrderByWithAggregationInputSchema]).optional(),
    by: exports.ResidenceScalarFieldEnumSchema.array(),
    having: exports.ResidenceScalarWhereWithAggregatesInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.ResidenceFindUniqueArgsSchema = zod_1.z.object({
    select: exports.ResidenceSelectSchema.optional(),
    include: exports.ResidenceIncludeSchema.optional(),
    where: exports.ResidenceWhereUniqueInputSchema,
}).strict();
exports.ResidenceFindUniqueOrThrowArgsSchema = zod_1.z.object({
    select: exports.ResidenceSelectSchema.optional(),
    include: exports.ResidenceIncludeSchema.optional(),
    where: exports.ResidenceWhereUniqueInputSchema,
}).strict();
exports.ParkingSlotFindFirstArgsSchema = zod_1.z.object({
    select: exports.ParkingSlotSelectSchema.optional(),
    include: exports.ParkingSlotIncludeSchema.optional(),
    where: exports.ParkingSlotWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ParkingSlotOrderByWithRelationInputSchema.array(), exports.ParkingSlotOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ParkingSlotWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.ParkingSlotScalarFieldEnumSchema, exports.ParkingSlotScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.ParkingSlotFindFirstOrThrowArgsSchema = zod_1.z.object({
    select: exports.ParkingSlotSelectSchema.optional(),
    include: exports.ParkingSlotIncludeSchema.optional(),
    where: exports.ParkingSlotWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ParkingSlotOrderByWithRelationInputSchema.array(), exports.ParkingSlotOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ParkingSlotWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.ParkingSlotScalarFieldEnumSchema, exports.ParkingSlotScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.ParkingSlotFindManyArgsSchema = zod_1.z.object({
    select: exports.ParkingSlotSelectSchema.optional(),
    include: exports.ParkingSlotIncludeSchema.optional(),
    where: exports.ParkingSlotWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ParkingSlotOrderByWithRelationInputSchema.array(), exports.ParkingSlotOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ParkingSlotWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.ParkingSlotScalarFieldEnumSchema, exports.ParkingSlotScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.ParkingSlotAggregateArgsSchema = zod_1.z.object({
    where: exports.ParkingSlotWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ParkingSlotOrderByWithRelationInputSchema.array(), exports.ParkingSlotOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ParkingSlotWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.ParkingSlotGroupByArgsSchema = zod_1.z.object({
    where: exports.ParkingSlotWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ParkingSlotOrderByWithAggregationInputSchema.array(), exports.ParkingSlotOrderByWithAggregationInputSchema]).optional(),
    by: exports.ParkingSlotScalarFieldEnumSchema.array(),
    having: exports.ParkingSlotScalarWhereWithAggregatesInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.ParkingSlotFindUniqueArgsSchema = zod_1.z.object({
    select: exports.ParkingSlotSelectSchema.optional(),
    include: exports.ParkingSlotIncludeSchema.optional(),
    where: exports.ParkingSlotWhereUniqueInputSchema,
}).strict();
exports.ParkingSlotFindUniqueOrThrowArgsSchema = zod_1.z.object({
    select: exports.ParkingSlotSelectSchema.optional(),
    include: exports.ParkingSlotIncludeSchema.optional(),
    where: exports.ParkingSlotWhereUniqueInputSchema,
}).strict();
exports.ResidenceTypeFindFirstArgsSchema = zod_1.z.object({
    select: exports.ResidenceTypeSelectSchema.optional(),
    include: exports.ResidenceTypeIncludeSchema.optional(),
    where: exports.ResidenceTypeWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ResidenceTypeOrderByWithRelationInputSchema.array(), exports.ResidenceTypeOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ResidenceTypeWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.ResidenceTypeScalarFieldEnumSchema, exports.ResidenceTypeScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.ResidenceTypeFindFirstOrThrowArgsSchema = zod_1.z.object({
    select: exports.ResidenceTypeSelectSchema.optional(),
    include: exports.ResidenceTypeIncludeSchema.optional(),
    where: exports.ResidenceTypeWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ResidenceTypeOrderByWithRelationInputSchema.array(), exports.ResidenceTypeOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ResidenceTypeWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.ResidenceTypeScalarFieldEnumSchema, exports.ResidenceTypeScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.ResidenceTypeFindManyArgsSchema = zod_1.z.object({
    select: exports.ResidenceTypeSelectSchema.optional(),
    include: exports.ResidenceTypeIncludeSchema.optional(),
    where: exports.ResidenceTypeWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ResidenceTypeOrderByWithRelationInputSchema.array(), exports.ResidenceTypeOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ResidenceTypeWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.ResidenceTypeScalarFieldEnumSchema, exports.ResidenceTypeScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.ResidenceTypeAggregateArgsSchema = zod_1.z.object({
    where: exports.ResidenceTypeWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ResidenceTypeOrderByWithRelationInputSchema.array(), exports.ResidenceTypeOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ResidenceTypeWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.ResidenceTypeGroupByArgsSchema = zod_1.z.object({
    where: exports.ResidenceTypeWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ResidenceTypeOrderByWithAggregationInputSchema.array(), exports.ResidenceTypeOrderByWithAggregationInputSchema]).optional(),
    by: exports.ResidenceTypeScalarFieldEnumSchema.array(),
    having: exports.ResidenceTypeScalarWhereWithAggregatesInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.ResidenceTypeFindUniqueArgsSchema = zod_1.z.object({
    select: exports.ResidenceTypeSelectSchema.optional(),
    include: exports.ResidenceTypeIncludeSchema.optional(),
    where: exports.ResidenceTypeWhereUniqueInputSchema,
}).strict();
exports.ResidenceTypeFindUniqueOrThrowArgsSchema = zod_1.z.object({
    select: exports.ResidenceTypeSelectSchema.optional(),
    include: exports.ResidenceTypeIncludeSchema.optional(),
    where: exports.ResidenceTypeWhereUniqueInputSchema,
}).strict();
exports.ProviderFindFirstArgsSchema = zod_1.z.object({
    select: exports.ProviderSelectSchema.optional(),
    include: exports.ProviderIncludeSchema.optional(),
    where: exports.ProviderWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ProviderOrderByWithRelationInputSchema.array(), exports.ProviderOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ProviderWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.ProviderScalarFieldEnumSchema, exports.ProviderScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.ProviderFindFirstOrThrowArgsSchema = zod_1.z.object({
    select: exports.ProviderSelectSchema.optional(),
    include: exports.ProviderIncludeSchema.optional(),
    where: exports.ProviderWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ProviderOrderByWithRelationInputSchema.array(), exports.ProviderOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ProviderWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.ProviderScalarFieldEnumSchema, exports.ProviderScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.ProviderFindManyArgsSchema = zod_1.z.object({
    select: exports.ProviderSelectSchema.optional(),
    include: exports.ProviderIncludeSchema.optional(),
    where: exports.ProviderWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ProviderOrderByWithRelationInputSchema.array(), exports.ProviderOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ProviderWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.ProviderScalarFieldEnumSchema, exports.ProviderScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.ProviderAggregateArgsSchema = zod_1.z.object({
    where: exports.ProviderWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ProviderOrderByWithRelationInputSchema.array(), exports.ProviderOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ProviderWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.ProviderGroupByArgsSchema = zod_1.z.object({
    where: exports.ProviderWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ProviderOrderByWithAggregationInputSchema.array(), exports.ProviderOrderByWithAggregationInputSchema]).optional(),
    by: exports.ProviderScalarFieldEnumSchema.array(),
    having: exports.ProviderScalarWhereWithAggregatesInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.ProviderFindUniqueArgsSchema = zod_1.z.object({
    select: exports.ProviderSelectSchema.optional(),
    include: exports.ProviderIncludeSchema.optional(),
    where: exports.ProviderWhereUniqueInputSchema,
}).strict();
exports.ProviderFindUniqueOrThrowArgsSchema = zod_1.z.object({
    select: exports.ProviderSelectSchema.optional(),
    include: exports.ProviderIncludeSchema.optional(),
    where: exports.ProviderWhereUniqueInputSchema,
}).strict();
exports.RoleFindFirstArgsSchema = zod_1.z.object({
    select: exports.RoleSelectSchema.optional(),
    include: exports.RoleIncludeSchema.optional(),
    where: exports.RoleWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.RoleOrderByWithRelationInputSchema.array(), exports.RoleOrderByWithRelationInputSchema]).optional(),
    cursor: exports.RoleWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.RoleScalarFieldEnumSchema, exports.RoleScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.RoleFindFirstOrThrowArgsSchema = zod_1.z.object({
    select: exports.RoleSelectSchema.optional(),
    include: exports.RoleIncludeSchema.optional(),
    where: exports.RoleWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.RoleOrderByWithRelationInputSchema.array(), exports.RoleOrderByWithRelationInputSchema]).optional(),
    cursor: exports.RoleWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.RoleScalarFieldEnumSchema, exports.RoleScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.RoleFindManyArgsSchema = zod_1.z.object({
    select: exports.RoleSelectSchema.optional(),
    include: exports.RoleIncludeSchema.optional(),
    where: exports.RoleWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.RoleOrderByWithRelationInputSchema.array(), exports.RoleOrderByWithRelationInputSchema]).optional(),
    cursor: exports.RoleWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.RoleScalarFieldEnumSchema, exports.RoleScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.RoleAggregateArgsSchema = zod_1.z.object({
    where: exports.RoleWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.RoleOrderByWithRelationInputSchema.array(), exports.RoleOrderByWithRelationInputSchema]).optional(),
    cursor: exports.RoleWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.RoleGroupByArgsSchema = zod_1.z.object({
    where: exports.RoleWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.RoleOrderByWithAggregationInputSchema.array(), exports.RoleOrderByWithAggregationInputSchema]).optional(),
    by: exports.RoleScalarFieldEnumSchema.array(),
    having: exports.RoleScalarWhereWithAggregatesInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.RoleFindUniqueArgsSchema = zod_1.z.object({
    select: exports.RoleSelectSchema.optional(),
    include: exports.RoleIncludeSchema.optional(),
    where: exports.RoleWhereUniqueInputSchema,
}).strict();
exports.RoleFindUniqueOrThrowArgsSchema = zod_1.z.object({
    select: exports.RoleSelectSchema.optional(),
    include: exports.RoleIncludeSchema.optional(),
    where: exports.RoleWhereUniqueInputSchema,
}).strict();
exports.ExpenseFindFirstArgsSchema = zod_1.z.object({
    select: exports.ExpenseSelectSchema.optional(),
    include: exports.ExpenseIncludeSchema.optional(),
    where: exports.ExpenseWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ExpenseOrderByWithRelationInputSchema.array(), exports.ExpenseOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ExpenseWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.ExpenseScalarFieldEnumSchema, exports.ExpenseScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.ExpenseFindFirstOrThrowArgsSchema = zod_1.z.object({
    select: exports.ExpenseSelectSchema.optional(),
    include: exports.ExpenseIncludeSchema.optional(),
    where: exports.ExpenseWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ExpenseOrderByWithRelationInputSchema.array(), exports.ExpenseOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ExpenseWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.ExpenseScalarFieldEnumSchema, exports.ExpenseScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.ExpenseFindManyArgsSchema = zod_1.z.object({
    select: exports.ExpenseSelectSchema.optional(),
    include: exports.ExpenseIncludeSchema.optional(),
    where: exports.ExpenseWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ExpenseOrderByWithRelationInputSchema.array(), exports.ExpenseOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ExpenseWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.ExpenseScalarFieldEnumSchema, exports.ExpenseScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.ExpenseAggregateArgsSchema = zod_1.z.object({
    where: exports.ExpenseWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ExpenseOrderByWithRelationInputSchema.array(), exports.ExpenseOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ExpenseWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.ExpenseGroupByArgsSchema = zod_1.z.object({
    where: exports.ExpenseWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ExpenseOrderByWithAggregationInputSchema.array(), exports.ExpenseOrderByWithAggregationInputSchema]).optional(),
    by: exports.ExpenseScalarFieldEnumSchema.array(),
    having: exports.ExpenseScalarWhereWithAggregatesInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.ExpenseFindUniqueArgsSchema = zod_1.z.object({
    select: exports.ExpenseSelectSchema.optional(),
    include: exports.ExpenseIncludeSchema.optional(),
    where: exports.ExpenseWhereUniqueInputSchema,
}).strict();
exports.ExpenseFindUniqueOrThrowArgsSchema = zod_1.z.object({
    select: exports.ExpenseSelectSchema.optional(),
    include: exports.ExpenseIncludeSchema.optional(),
    where: exports.ExpenseWhereUniqueInputSchema,
}).strict();
exports.PaymentFindFirstArgsSchema = zod_1.z.object({
    select: exports.PaymentSelectSchema.optional(),
    include: exports.PaymentIncludeSchema.optional(),
    where: exports.PaymentWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.PaymentOrderByWithRelationInputSchema.array(), exports.PaymentOrderByWithRelationInputSchema]).optional(),
    cursor: exports.PaymentWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.PaymentScalarFieldEnumSchema, exports.PaymentScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.PaymentFindFirstOrThrowArgsSchema = zod_1.z.object({
    select: exports.PaymentSelectSchema.optional(),
    include: exports.PaymentIncludeSchema.optional(),
    where: exports.PaymentWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.PaymentOrderByWithRelationInputSchema.array(), exports.PaymentOrderByWithRelationInputSchema]).optional(),
    cursor: exports.PaymentWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.PaymentScalarFieldEnumSchema, exports.PaymentScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.PaymentFindManyArgsSchema = zod_1.z.object({
    select: exports.PaymentSelectSchema.optional(),
    include: exports.PaymentIncludeSchema.optional(),
    where: exports.PaymentWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.PaymentOrderByWithRelationInputSchema.array(), exports.PaymentOrderByWithRelationInputSchema]).optional(),
    cursor: exports.PaymentWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.PaymentScalarFieldEnumSchema, exports.PaymentScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.PaymentAggregateArgsSchema = zod_1.z.object({
    where: exports.PaymentWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.PaymentOrderByWithRelationInputSchema.array(), exports.PaymentOrderByWithRelationInputSchema]).optional(),
    cursor: exports.PaymentWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.PaymentGroupByArgsSchema = zod_1.z.object({
    where: exports.PaymentWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.PaymentOrderByWithAggregationInputSchema.array(), exports.PaymentOrderByWithAggregationInputSchema]).optional(),
    by: exports.PaymentScalarFieldEnumSchema.array(),
    having: exports.PaymentScalarWhereWithAggregatesInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.PaymentFindUniqueArgsSchema = zod_1.z.object({
    select: exports.PaymentSelectSchema.optional(),
    include: exports.PaymentIncludeSchema.optional(),
    where: exports.PaymentWhereUniqueInputSchema,
}).strict();
exports.PaymentFindUniqueOrThrowArgsSchema = zod_1.z.object({
    select: exports.PaymentSelectSchema.optional(),
    include: exports.PaymentIncludeSchema.optional(),
    where: exports.PaymentWhereUniqueInputSchema,
}).strict();
exports.CashoutFindFirstArgsSchema = zod_1.z.object({
    select: exports.CashoutSelectSchema.optional(),
    include: exports.CashoutIncludeSchema.optional(),
    where: exports.CashoutWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.CashoutOrderByWithRelationInputSchema.array(), exports.CashoutOrderByWithRelationInputSchema]).optional(),
    cursor: exports.CashoutWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.CashoutScalarFieldEnumSchema, exports.CashoutScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.CashoutFindFirstOrThrowArgsSchema = zod_1.z.object({
    select: exports.CashoutSelectSchema.optional(),
    include: exports.CashoutIncludeSchema.optional(),
    where: exports.CashoutWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.CashoutOrderByWithRelationInputSchema.array(), exports.CashoutOrderByWithRelationInputSchema]).optional(),
    cursor: exports.CashoutWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.CashoutScalarFieldEnumSchema, exports.CashoutScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.CashoutFindManyArgsSchema = zod_1.z.object({
    select: exports.CashoutSelectSchema.optional(),
    include: exports.CashoutIncludeSchema.optional(),
    where: exports.CashoutWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.CashoutOrderByWithRelationInputSchema.array(), exports.CashoutOrderByWithRelationInputSchema]).optional(),
    cursor: exports.CashoutWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.CashoutScalarFieldEnumSchema, exports.CashoutScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.CashoutAggregateArgsSchema = zod_1.z.object({
    where: exports.CashoutWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.CashoutOrderByWithRelationInputSchema.array(), exports.CashoutOrderByWithRelationInputSchema]).optional(),
    cursor: exports.CashoutWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.CashoutGroupByArgsSchema = zod_1.z.object({
    where: exports.CashoutWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.CashoutOrderByWithAggregationInputSchema.array(), exports.CashoutOrderByWithAggregationInputSchema]).optional(),
    by: exports.CashoutScalarFieldEnumSchema.array(),
    having: exports.CashoutScalarWhereWithAggregatesInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.CashoutFindUniqueArgsSchema = zod_1.z.object({
    select: exports.CashoutSelectSchema.optional(),
    include: exports.CashoutIncludeSchema.optional(),
    where: exports.CashoutWhereUniqueInputSchema,
}).strict();
exports.CashoutFindUniqueOrThrowArgsSchema = zod_1.z.object({
    select: exports.CashoutSelectSchema.optional(),
    include: exports.CashoutIncludeSchema.optional(),
    where: exports.CashoutWhereUniqueInputSchema,
}).strict();
exports.ExpenseTypeFindFirstArgsSchema = zod_1.z.object({
    select: exports.ExpenseTypeSelectSchema.optional(),
    include: exports.ExpenseTypeIncludeSchema.optional(),
    where: exports.ExpenseTypeWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ExpenseTypeOrderByWithRelationInputSchema.array(), exports.ExpenseTypeOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ExpenseTypeWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.ExpenseTypeScalarFieldEnumSchema, exports.ExpenseTypeScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.ExpenseTypeFindFirstOrThrowArgsSchema = zod_1.z.object({
    select: exports.ExpenseTypeSelectSchema.optional(),
    include: exports.ExpenseTypeIncludeSchema.optional(),
    where: exports.ExpenseTypeWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ExpenseTypeOrderByWithRelationInputSchema.array(), exports.ExpenseTypeOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ExpenseTypeWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.ExpenseTypeScalarFieldEnumSchema, exports.ExpenseTypeScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.ExpenseTypeFindManyArgsSchema = zod_1.z.object({
    select: exports.ExpenseTypeSelectSchema.optional(),
    include: exports.ExpenseTypeIncludeSchema.optional(),
    where: exports.ExpenseTypeWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ExpenseTypeOrderByWithRelationInputSchema.array(), exports.ExpenseTypeOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ExpenseTypeWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.ExpenseTypeScalarFieldEnumSchema, exports.ExpenseTypeScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.ExpenseTypeAggregateArgsSchema = zod_1.z.object({
    where: exports.ExpenseTypeWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ExpenseTypeOrderByWithRelationInputSchema.array(), exports.ExpenseTypeOrderByWithRelationInputSchema]).optional(),
    cursor: exports.ExpenseTypeWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.ExpenseTypeGroupByArgsSchema = zod_1.z.object({
    where: exports.ExpenseTypeWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.ExpenseTypeOrderByWithAggregationInputSchema.array(), exports.ExpenseTypeOrderByWithAggregationInputSchema]).optional(),
    by: exports.ExpenseTypeScalarFieldEnumSchema.array(),
    having: exports.ExpenseTypeScalarWhereWithAggregatesInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.ExpenseTypeFindUniqueArgsSchema = zod_1.z.object({
    select: exports.ExpenseTypeSelectSchema.optional(),
    include: exports.ExpenseTypeIncludeSchema.optional(),
    where: exports.ExpenseTypeWhereUniqueInputSchema,
}).strict();
exports.ExpenseTypeFindUniqueOrThrowArgsSchema = zod_1.z.object({
    select: exports.ExpenseTypeSelectSchema.optional(),
    include: exports.ExpenseTypeIncludeSchema.optional(),
    where: exports.ExpenseTypeWhereUniqueInputSchema,
}).strict();
exports.AccountFindFirstArgsSchema = zod_1.z.object({
    select: exports.AccountSelectSchema.optional(),
    include: exports.AccountIncludeSchema.optional(),
    where: exports.AccountWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.AccountOrderByWithRelationInputSchema.array(), exports.AccountOrderByWithRelationInputSchema]).optional(),
    cursor: exports.AccountWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.AccountScalarFieldEnumSchema, exports.AccountScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.AccountFindFirstOrThrowArgsSchema = zod_1.z.object({
    select: exports.AccountSelectSchema.optional(),
    include: exports.AccountIncludeSchema.optional(),
    where: exports.AccountWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.AccountOrderByWithRelationInputSchema.array(), exports.AccountOrderByWithRelationInputSchema]).optional(),
    cursor: exports.AccountWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.AccountScalarFieldEnumSchema, exports.AccountScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.AccountFindManyArgsSchema = zod_1.z.object({
    select: exports.AccountSelectSchema.optional(),
    include: exports.AccountIncludeSchema.optional(),
    where: exports.AccountWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.AccountOrderByWithRelationInputSchema.array(), exports.AccountOrderByWithRelationInputSchema]).optional(),
    cursor: exports.AccountWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
    distinct: zod_1.z.union([exports.AccountScalarFieldEnumSchema, exports.AccountScalarFieldEnumSchema.array()]).optional(),
}).strict();
exports.AccountAggregateArgsSchema = zod_1.z.object({
    where: exports.AccountWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.AccountOrderByWithRelationInputSchema.array(), exports.AccountOrderByWithRelationInputSchema]).optional(),
    cursor: exports.AccountWhereUniqueInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.AccountGroupByArgsSchema = zod_1.z.object({
    where: exports.AccountWhereInputSchema.optional(),
    orderBy: zod_1.z.union([exports.AccountOrderByWithAggregationInputSchema.array(), exports.AccountOrderByWithAggregationInputSchema]).optional(),
    by: exports.AccountScalarFieldEnumSchema.array(),
    having: exports.AccountScalarWhereWithAggregatesInputSchema.optional(),
    take: zod_1.z.number().optional(),
    skip: zod_1.z.number().optional(),
}).strict();
exports.AccountFindUniqueArgsSchema = zod_1.z.object({
    select: exports.AccountSelectSchema.optional(),
    include: exports.AccountIncludeSchema.optional(),
    where: exports.AccountWhereUniqueInputSchema,
}).strict();
exports.AccountFindUniqueOrThrowArgsSchema = zod_1.z.object({
    select: exports.AccountSelectSchema.optional(),
    include: exports.AccountIncludeSchema.optional(),
    where: exports.AccountWhereUniqueInputSchema,
}).strict();
exports.CommunityCreateArgsSchema = zod_1.z.object({
    select: exports.CommunitySelectSchema.optional(),
    include: exports.CommunityIncludeSchema.optional(),
    data: zod_1.z.union([exports.CommunityCreateInputSchema, exports.CommunityUncheckedCreateInputSchema]),
}).strict();
exports.CommunityUpsertArgsSchema = zod_1.z.object({
    select: exports.CommunitySelectSchema.optional(),
    include: exports.CommunityIncludeSchema.optional(),
    where: exports.CommunityWhereUniqueInputSchema,
    create: zod_1.z.union([exports.CommunityCreateInputSchema, exports.CommunityUncheckedCreateInputSchema]),
    update: zod_1.z.union([exports.CommunityUpdateInputSchema, exports.CommunityUncheckedUpdateInputSchema]),
}).strict();
exports.CommunityCreateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.CommunityCreateManyInputSchema, exports.CommunityCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.CommunityCreateManyAndReturnArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.CommunityCreateManyInputSchema, exports.CommunityCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.CommunityDeleteArgsSchema = zod_1.z.object({
    select: exports.CommunitySelectSchema.optional(),
    include: exports.CommunityIncludeSchema.optional(),
    where: exports.CommunityWhereUniqueInputSchema,
}).strict();
exports.CommunityUpdateArgsSchema = zod_1.z.object({
    select: exports.CommunitySelectSchema.optional(),
    include: exports.CommunityIncludeSchema.optional(),
    data: zod_1.z.union([exports.CommunityUpdateInputSchema, exports.CommunityUncheckedUpdateInputSchema]),
    where: exports.CommunityWhereUniqueInputSchema,
}).strict();
exports.CommunityUpdateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.CommunityUpdateManyMutationInputSchema, exports.CommunityUncheckedUpdateManyInputSchema]),
    where: exports.CommunityWhereInputSchema.optional(),
}).strict();
exports.CommunityDeleteManyArgsSchema = zod_1.z.object({
    where: exports.CommunityWhereInputSchema.optional(),
}).strict();
exports.UserCreateArgsSchema = zod_1.z.object({
    select: exports.UserSelectSchema.optional(),
    include: exports.UserIncludeSchema.optional(),
    data: zod_1.z.union([exports.UserCreateInputSchema, exports.UserUncheckedCreateInputSchema]),
}).strict();
exports.UserUpsertArgsSchema = zod_1.z.object({
    select: exports.UserSelectSchema.optional(),
    include: exports.UserIncludeSchema.optional(),
    where: exports.UserWhereUniqueInputSchema,
    create: zod_1.z.union([exports.UserCreateInputSchema, exports.UserUncheckedCreateInputSchema]),
    update: zod_1.z.union([exports.UserUpdateInputSchema, exports.UserUncheckedUpdateInputSchema]),
}).strict();
exports.UserCreateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.UserCreateManyInputSchema, exports.UserCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.UserCreateManyAndReturnArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.UserCreateManyInputSchema, exports.UserCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.UserDeleteArgsSchema = zod_1.z.object({
    select: exports.UserSelectSchema.optional(),
    include: exports.UserIncludeSchema.optional(),
    where: exports.UserWhereUniqueInputSchema,
}).strict();
exports.UserUpdateArgsSchema = zod_1.z.object({
    select: exports.UserSelectSchema.optional(),
    include: exports.UserIncludeSchema.optional(),
    data: zod_1.z.union([exports.UserUpdateInputSchema, exports.UserUncheckedUpdateInputSchema]),
    where: exports.UserWhereUniqueInputSchema,
}).strict();
exports.UserUpdateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.UserUpdateManyMutationInputSchema, exports.UserUncheckedUpdateManyInputSchema]),
    where: exports.UserWhereInputSchema.optional(),
}).strict();
exports.UserDeleteManyArgsSchema = zod_1.z.object({
    where: exports.UserWhereInputSchema.optional(),
}).strict();
exports.ResidenceCreateArgsSchema = zod_1.z.object({
    select: exports.ResidenceSelectSchema.optional(),
    include: exports.ResidenceIncludeSchema.optional(),
    data: zod_1.z.union([exports.ResidenceCreateInputSchema, exports.ResidenceUncheckedCreateInputSchema]),
}).strict();
exports.ResidenceUpsertArgsSchema = zod_1.z.object({
    select: exports.ResidenceSelectSchema.optional(),
    include: exports.ResidenceIncludeSchema.optional(),
    where: exports.ResidenceWhereUniqueInputSchema,
    create: zod_1.z.union([exports.ResidenceCreateInputSchema, exports.ResidenceUncheckedCreateInputSchema]),
    update: zod_1.z.union([exports.ResidenceUpdateInputSchema, exports.ResidenceUncheckedUpdateInputSchema]),
}).strict();
exports.ResidenceCreateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.ResidenceCreateManyInputSchema, exports.ResidenceCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.ResidenceCreateManyAndReturnArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.ResidenceCreateManyInputSchema, exports.ResidenceCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.ResidenceDeleteArgsSchema = zod_1.z.object({
    select: exports.ResidenceSelectSchema.optional(),
    include: exports.ResidenceIncludeSchema.optional(),
    where: exports.ResidenceWhereUniqueInputSchema,
}).strict();
exports.ResidenceUpdateArgsSchema = zod_1.z.object({
    select: exports.ResidenceSelectSchema.optional(),
    include: exports.ResidenceIncludeSchema.optional(),
    data: zod_1.z.union([exports.ResidenceUpdateInputSchema, exports.ResidenceUncheckedUpdateInputSchema]),
    where: exports.ResidenceWhereUniqueInputSchema,
}).strict();
exports.ResidenceUpdateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.ResidenceUpdateManyMutationInputSchema, exports.ResidenceUncheckedUpdateManyInputSchema]),
    where: exports.ResidenceWhereInputSchema.optional(),
}).strict();
exports.ResidenceDeleteManyArgsSchema = zod_1.z.object({
    where: exports.ResidenceWhereInputSchema.optional(),
}).strict();
exports.ParkingSlotCreateArgsSchema = zod_1.z.object({
    select: exports.ParkingSlotSelectSchema.optional(),
    include: exports.ParkingSlotIncludeSchema.optional(),
    data: zod_1.z.union([exports.ParkingSlotCreateInputSchema, exports.ParkingSlotUncheckedCreateInputSchema]),
}).strict();
exports.ParkingSlotUpsertArgsSchema = zod_1.z.object({
    select: exports.ParkingSlotSelectSchema.optional(),
    include: exports.ParkingSlotIncludeSchema.optional(),
    where: exports.ParkingSlotWhereUniqueInputSchema,
    create: zod_1.z.union([exports.ParkingSlotCreateInputSchema, exports.ParkingSlotUncheckedCreateInputSchema]),
    update: zod_1.z.union([exports.ParkingSlotUpdateInputSchema, exports.ParkingSlotUncheckedUpdateInputSchema]),
}).strict();
exports.ParkingSlotCreateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.ParkingSlotCreateManyInputSchema, exports.ParkingSlotCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.ParkingSlotCreateManyAndReturnArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.ParkingSlotCreateManyInputSchema, exports.ParkingSlotCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.ParkingSlotDeleteArgsSchema = zod_1.z.object({
    select: exports.ParkingSlotSelectSchema.optional(),
    include: exports.ParkingSlotIncludeSchema.optional(),
    where: exports.ParkingSlotWhereUniqueInputSchema,
}).strict();
exports.ParkingSlotUpdateArgsSchema = zod_1.z.object({
    select: exports.ParkingSlotSelectSchema.optional(),
    include: exports.ParkingSlotIncludeSchema.optional(),
    data: zod_1.z.union([exports.ParkingSlotUpdateInputSchema, exports.ParkingSlotUncheckedUpdateInputSchema]),
    where: exports.ParkingSlotWhereUniqueInputSchema,
}).strict();
exports.ParkingSlotUpdateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.ParkingSlotUpdateManyMutationInputSchema, exports.ParkingSlotUncheckedUpdateManyInputSchema]),
    where: exports.ParkingSlotWhereInputSchema.optional(),
}).strict();
exports.ParkingSlotDeleteManyArgsSchema = zod_1.z.object({
    where: exports.ParkingSlotWhereInputSchema.optional(),
}).strict();
exports.ResidenceTypeCreateArgsSchema = zod_1.z.object({
    select: exports.ResidenceTypeSelectSchema.optional(),
    include: exports.ResidenceTypeIncludeSchema.optional(),
    data: zod_1.z.union([exports.ResidenceTypeCreateInputSchema, exports.ResidenceTypeUncheckedCreateInputSchema]),
}).strict();
exports.ResidenceTypeUpsertArgsSchema = zod_1.z.object({
    select: exports.ResidenceTypeSelectSchema.optional(),
    include: exports.ResidenceTypeIncludeSchema.optional(),
    where: exports.ResidenceTypeWhereUniqueInputSchema,
    create: zod_1.z.union([exports.ResidenceTypeCreateInputSchema, exports.ResidenceTypeUncheckedCreateInputSchema]),
    update: zod_1.z.union([exports.ResidenceTypeUpdateInputSchema, exports.ResidenceTypeUncheckedUpdateInputSchema]),
}).strict();
exports.ResidenceTypeCreateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.ResidenceTypeCreateManyInputSchema, exports.ResidenceTypeCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.ResidenceTypeCreateManyAndReturnArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.ResidenceTypeCreateManyInputSchema, exports.ResidenceTypeCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.ResidenceTypeDeleteArgsSchema = zod_1.z.object({
    select: exports.ResidenceTypeSelectSchema.optional(),
    include: exports.ResidenceTypeIncludeSchema.optional(),
    where: exports.ResidenceTypeWhereUniqueInputSchema,
}).strict();
exports.ResidenceTypeUpdateArgsSchema = zod_1.z.object({
    select: exports.ResidenceTypeSelectSchema.optional(),
    include: exports.ResidenceTypeIncludeSchema.optional(),
    data: zod_1.z.union([exports.ResidenceTypeUpdateInputSchema, exports.ResidenceTypeUncheckedUpdateInputSchema]),
    where: exports.ResidenceTypeWhereUniqueInputSchema,
}).strict();
exports.ResidenceTypeUpdateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.ResidenceTypeUpdateManyMutationInputSchema, exports.ResidenceTypeUncheckedUpdateManyInputSchema]),
    where: exports.ResidenceTypeWhereInputSchema.optional(),
}).strict();
exports.ResidenceTypeDeleteManyArgsSchema = zod_1.z.object({
    where: exports.ResidenceTypeWhereInputSchema.optional(),
}).strict();
exports.ProviderCreateArgsSchema = zod_1.z.object({
    select: exports.ProviderSelectSchema.optional(),
    include: exports.ProviderIncludeSchema.optional(),
    data: zod_1.z.union([exports.ProviderCreateInputSchema, exports.ProviderUncheckedCreateInputSchema]),
}).strict();
exports.ProviderUpsertArgsSchema = zod_1.z.object({
    select: exports.ProviderSelectSchema.optional(),
    include: exports.ProviderIncludeSchema.optional(),
    where: exports.ProviderWhereUniqueInputSchema,
    create: zod_1.z.union([exports.ProviderCreateInputSchema, exports.ProviderUncheckedCreateInputSchema]),
    update: zod_1.z.union([exports.ProviderUpdateInputSchema, exports.ProviderUncheckedUpdateInputSchema]),
}).strict();
exports.ProviderCreateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.ProviderCreateManyInputSchema, exports.ProviderCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.ProviderCreateManyAndReturnArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.ProviderCreateManyInputSchema, exports.ProviderCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.ProviderDeleteArgsSchema = zod_1.z.object({
    select: exports.ProviderSelectSchema.optional(),
    include: exports.ProviderIncludeSchema.optional(),
    where: exports.ProviderWhereUniqueInputSchema,
}).strict();
exports.ProviderUpdateArgsSchema = zod_1.z.object({
    select: exports.ProviderSelectSchema.optional(),
    include: exports.ProviderIncludeSchema.optional(),
    data: zod_1.z.union([exports.ProviderUpdateInputSchema, exports.ProviderUncheckedUpdateInputSchema]),
    where: exports.ProviderWhereUniqueInputSchema,
}).strict();
exports.ProviderUpdateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.ProviderUpdateManyMutationInputSchema, exports.ProviderUncheckedUpdateManyInputSchema]),
    where: exports.ProviderWhereInputSchema.optional(),
}).strict();
exports.ProviderDeleteManyArgsSchema = zod_1.z.object({
    where: exports.ProviderWhereInputSchema.optional(),
}).strict();
exports.RoleCreateArgsSchema = zod_1.z.object({
    select: exports.RoleSelectSchema.optional(),
    include: exports.RoleIncludeSchema.optional(),
    data: zod_1.z.union([exports.RoleCreateInputSchema, exports.RoleUncheckedCreateInputSchema]),
}).strict();
exports.RoleUpsertArgsSchema = zod_1.z.object({
    select: exports.RoleSelectSchema.optional(),
    include: exports.RoleIncludeSchema.optional(),
    where: exports.RoleWhereUniqueInputSchema,
    create: zod_1.z.union([exports.RoleCreateInputSchema, exports.RoleUncheckedCreateInputSchema]),
    update: zod_1.z.union([exports.RoleUpdateInputSchema, exports.RoleUncheckedUpdateInputSchema]),
}).strict();
exports.RoleCreateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.RoleCreateManyInputSchema, exports.RoleCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.RoleCreateManyAndReturnArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.RoleCreateManyInputSchema, exports.RoleCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.RoleDeleteArgsSchema = zod_1.z.object({
    select: exports.RoleSelectSchema.optional(),
    include: exports.RoleIncludeSchema.optional(),
    where: exports.RoleWhereUniqueInputSchema,
}).strict();
exports.RoleUpdateArgsSchema = zod_1.z.object({
    select: exports.RoleSelectSchema.optional(),
    include: exports.RoleIncludeSchema.optional(),
    data: zod_1.z.union([exports.RoleUpdateInputSchema, exports.RoleUncheckedUpdateInputSchema]),
    where: exports.RoleWhereUniqueInputSchema,
}).strict();
exports.RoleUpdateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.RoleUpdateManyMutationInputSchema, exports.RoleUncheckedUpdateManyInputSchema]),
    where: exports.RoleWhereInputSchema.optional(),
}).strict();
exports.RoleDeleteManyArgsSchema = zod_1.z.object({
    where: exports.RoleWhereInputSchema.optional(),
}).strict();
exports.ExpenseCreateArgsSchema = zod_1.z.object({
    select: exports.ExpenseSelectSchema.optional(),
    include: exports.ExpenseIncludeSchema.optional(),
    data: zod_1.z.union([exports.ExpenseCreateInputSchema, exports.ExpenseUncheckedCreateInputSchema]),
}).strict();
exports.ExpenseUpsertArgsSchema = zod_1.z.object({
    select: exports.ExpenseSelectSchema.optional(),
    include: exports.ExpenseIncludeSchema.optional(),
    where: exports.ExpenseWhereUniqueInputSchema,
    create: zod_1.z.union([exports.ExpenseCreateInputSchema, exports.ExpenseUncheckedCreateInputSchema]),
    update: zod_1.z.union([exports.ExpenseUpdateInputSchema, exports.ExpenseUncheckedUpdateInputSchema]),
}).strict();
exports.ExpenseCreateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.ExpenseCreateManyInputSchema, exports.ExpenseCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.ExpenseCreateManyAndReturnArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.ExpenseCreateManyInputSchema, exports.ExpenseCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.ExpenseDeleteArgsSchema = zod_1.z.object({
    select: exports.ExpenseSelectSchema.optional(),
    include: exports.ExpenseIncludeSchema.optional(),
    where: exports.ExpenseWhereUniqueInputSchema,
}).strict();
exports.ExpenseUpdateArgsSchema = zod_1.z.object({
    select: exports.ExpenseSelectSchema.optional(),
    include: exports.ExpenseIncludeSchema.optional(),
    data: zod_1.z.union([exports.ExpenseUpdateInputSchema, exports.ExpenseUncheckedUpdateInputSchema]),
    where: exports.ExpenseWhereUniqueInputSchema,
}).strict();
exports.ExpenseUpdateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.ExpenseUpdateManyMutationInputSchema, exports.ExpenseUncheckedUpdateManyInputSchema]),
    where: exports.ExpenseWhereInputSchema.optional(),
}).strict();
exports.ExpenseDeleteManyArgsSchema = zod_1.z.object({
    where: exports.ExpenseWhereInputSchema.optional(),
}).strict();
exports.PaymentCreateArgsSchema = zod_1.z.object({
    select: exports.PaymentSelectSchema.optional(),
    include: exports.PaymentIncludeSchema.optional(),
    data: zod_1.z.union([exports.PaymentCreateInputSchema, exports.PaymentUncheckedCreateInputSchema]),
}).strict();
exports.PaymentUpsertArgsSchema = zod_1.z.object({
    select: exports.PaymentSelectSchema.optional(),
    include: exports.PaymentIncludeSchema.optional(),
    where: exports.PaymentWhereUniqueInputSchema,
    create: zod_1.z.union([exports.PaymentCreateInputSchema, exports.PaymentUncheckedCreateInputSchema]),
    update: zod_1.z.union([exports.PaymentUpdateInputSchema, exports.PaymentUncheckedUpdateInputSchema]),
}).strict();
exports.PaymentCreateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.PaymentCreateManyInputSchema, exports.PaymentCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.PaymentCreateManyAndReturnArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.PaymentCreateManyInputSchema, exports.PaymentCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.PaymentDeleteArgsSchema = zod_1.z.object({
    select: exports.PaymentSelectSchema.optional(),
    include: exports.PaymentIncludeSchema.optional(),
    where: exports.PaymentWhereUniqueInputSchema,
}).strict();
exports.PaymentUpdateArgsSchema = zod_1.z.object({
    select: exports.PaymentSelectSchema.optional(),
    include: exports.PaymentIncludeSchema.optional(),
    data: zod_1.z.union([exports.PaymentUpdateInputSchema, exports.PaymentUncheckedUpdateInputSchema]),
    where: exports.PaymentWhereUniqueInputSchema,
}).strict();
exports.PaymentUpdateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.PaymentUpdateManyMutationInputSchema, exports.PaymentUncheckedUpdateManyInputSchema]),
    where: exports.PaymentWhereInputSchema.optional(),
}).strict();
exports.PaymentDeleteManyArgsSchema = zod_1.z.object({
    where: exports.PaymentWhereInputSchema.optional(),
}).strict();
exports.CashoutCreateArgsSchema = zod_1.z.object({
    select: exports.CashoutSelectSchema.optional(),
    include: exports.CashoutIncludeSchema.optional(),
    data: zod_1.z.union([exports.CashoutCreateInputSchema, exports.CashoutUncheckedCreateInputSchema]),
}).strict();
exports.CashoutUpsertArgsSchema = zod_1.z.object({
    select: exports.CashoutSelectSchema.optional(),
    include: exports.CashoutIncludeSchema.optional(),
    where: exports.CashoutWhereUniqueInputSchema,
    create: zod_1.z.union([exports.CashoutCreateInputSchema, exports.CashoutUncheckedCreateInputSchema]),
    update: zod_1.z.union([exports.CashoutUpdateInputSchema, exports.CashoutUncheckedUpdateInputSchema]),
}).strict();
exports.CashoutCreateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.CashoutCreateManyInputSchema, exports.CashoutCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.CashoutCreateManyAndReturnArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.CashoutCreateManyInputSchema, exports.CashoutCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.CashoutDeleteArgsSchema = zod_1.z.object({
    select: exports.CashoutSelectSchema.optional(),
    include: exports.CashoutIncludeSchema.optional(),
    where: exports.CashoutWhereUniqueInputSchema,
}).strict();
exports.CashoutUpdateArgsSchema = zod_1.z.object({
    select: exports.CashoutSelectSchema.optional(),
    include: exports.CashoutIncludeSchema.optional(),
    data: zod_1.z.union([exports.CashoutUpdateInputSchema, exports.CashoutUncheckedUpdateInputSchema]),
    where: exports.CashoutWhereUniqueInputSchema,
}).strict();
exports.CashoutUpdateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.CashoutUpdateManyMutationInputSchema, exports.CashoutUncheckedUpdateManyInputSchema]),
    where: exports.CashoutWhereInputSchema.optional(),
}).strict();
exports.CashoutDeleteManyArgsSchema = zod_1.z.object({
    where: exports.CashoutWhereInputSchema.optional(),
}).strict();
exports.ExpenseTypeCreateArgsSchema = zod_1.z.object({
    select: exports.ExpenseTypeSelectSchema.optional(),
    include: exports.ExpenseTypeIncludeSchema.optional(),
    data: zod_1.z.union([exports.ExpenseTypeCreateInputSchema, exports.ExpenseTypeUncheckedCreateInputSchema]),
}).strict();
exports.ExpenseTypeUpsertArgsSchema = zod_1.z.object({
    select: exports.ExpenseTypeSelectSchema.optional(),
    include: exports.ExpenseTypeIncludeSchema.optional(),
    where: exports.ExpenseTypeWhereUniqueInputSchema,
    create: zod_1.z.union([exports.ExpenseTypeCreateInputSchema, exports.ExpenseTypeUncheckedCreateInputSchema]),
    update: zod_1.z.union([exports.ExpenseTypeUpdateInputSchema, exports.ExpenseTypeUncheckedUpdateInputSchema]),
}).strict();
exports.ExpenseTypeCreateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.ExpenseTypeCreateManyInputSchema, exports.ExpenseTypeCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.ExpenseTypeCreateManyAndReturnArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.ExpenseTypeCreateManyInputSchema, exports.ExpenseTypeCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.ExpenseTypeDeleteArgsSchema = zod_1.z.object({
    select: exports.ExpenseTypeSelectSchema.optional(),
    include: exports.ExpenseTypeIncludeSchema.optional(),
    where: exports.ExpenseTypeWhereUniqueInputSchema,
}).strict();
exports.ExpenseTypeUpdateArgsSchema = zod_1.z.object({
    select: exports.ExpenseTypeSelectSchema.optional(),
    include: exports.ExpenseTypeIncludeSchema.optional(),
    data: zod_1.z.union([exports.ExpenseTypeUpdateInputSchema, exports.ExpenseTypeUncheckedUpdateInputSchema]),
    where: exports.ExpenseTypeWhereUniqueInputSchema,
}).strict();
exports.ExpenseTypeUpdateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.ExpenseTypeUpdateManyMutationInputSchema, exports.ExpenseTypeUncheckedUpdateManyInputSchema]),
    where: exports.ExpenseTypeWhereInputSchema.optional(),
}).strict();
exports.ExpenseTypeDeleteManyArgsSchema = zod_1.z.object({
    where: exports.ExpenseTypeWhereInputSchema.optional(),
}).strict();
exports.AccountCreateArgsSchema = zod_1.z.object({
    select: exports.AccountSelectSchema.optional(),
    include: exports.AccountIncludeSchema.optional(),
    data: zod_1.z.union([exports.AccountCreateInputSchema, exports.AccountUncheckedCreateInputSchema]),
}).strict();
exports.AccountUpsertArgsSchema = zod_1.z.object({
    select: exports.AccountSelectSchema.optional(),
    include: exports.AccountIncludeSchema.optional(),
    where: exports.AccountWhereUniqueInputSchema,
    create: zod_1.z.union([exports.AccountCreateInputSchema, exports.AccountUncheckedCreateInputSchema]),
    update: zod_1.z.union([exports.AccountUpdateInputSchema, exports.AccountUncheckedUpdateInputSchema]),
}).strict();
exports.AccountCreateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.AccountCreateManyInputSchema, exports.AccountCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.AccountCreateManyAndReturnArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.AccountCreateManyInputSchema, exports.AccountCreateManyInputSchema.array()]),
    skipDuplicates: zod_1.z.boolean().optional(),
}).strict();
exports.AccountDeleteArgsSchema = zod_1.z.object({
    select: exports.AccountSelectSchema.optional(),
    include: exports.AccountIncludeSchema.optional(),
    where: exports.AccountWhereUniqueInputSchema,
}).strict();
exports.AccountUpdateArgsSchema = zod_1.z.object({
    select: exports.AccountSelectSchema.optional(),
    include: exports.AccountIncludeSchema.optional(),
    data: zod_1.z.union([exports.AccountUpdateInputSchema, exports.AccountUncheckedUpdateInputSchema]),
    where: exports.AccountWhereUniqueInputSchema,
}).strict();
exports.AccountUpdateManyArgsSchema = zod_1.z.object({
    data: zod_1.z.union([exports.AccountUpdateManyMutationInputSchema, exports.AccountUncheckedUpdateManyInputSchema]),
    where: exports.AccountWhereInputSchema.optional(),
}).strict();
exports.AccountDeleteManyArgsSchema = zod_1.z.object({
    where: exports.AccountWhereInputSchema.optional(),
}).strict();
